-- Generated by Haxe 4.0.5
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

_G.require = function() end
local Sys = {time = function() end}
local _hx_exports = _hx_exports or {}
local Array = _hx_e()
local Date = _hx_e()
local IntIterator = _hx_e()
local Lambda = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
__gmod_I_NET = _hx_e()
local NETMESSAGE_di_cleanup = _hx_e()
local NETMESSAGE_di_evac = _hx_e()
local NETMESSAGE_di_infected = _hx_e()
local NETMESSAGE_di_infection = _hx_e()
local NETMESSAGE_di_infinfo = _hx_e()
local NETMESSAGE_di_statinfo = _hx_e()
local NETMESSAGE_gamestate = _hx_e()
local NETMESSAGE_geiger = _hx_e()
local NETMESSAGE_grabend = _hx_e()
local NETMESSAGE_grabupdate = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
__gmod_hooks_Gm = _hx_e()
__gmod_gamemode_BuildOverrides = _hx_e()
__deceptinfect_DeceptInfect = _hx_e()
__deceptinfect_GameInstance = _hx_e()
__enumExtractor_EnumExtractor = _hx_e()
__deceptinfect_GAME_STATE = _hx_e()
__tink_core_SignalObject = _hx_e()
__tink_core_SignalTrigger = _hx_e()
__deceptinfect_GameManager = _hx_e()
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_ = _hx_e()
__deceptinfect_GameValues = _hx_e()
__deceptinfect_MapStorage = _hx_e()
__deceptinfect_ModelType = _hx_e()
__deceptinfect_Misc = _hx_e()
__deceptinfect_PlayerManager = _hx_e()
__deceptinfect_ecswip_Component = _hx_e()
__deceptinfect_abilities_FormComponent = _hx_e()
__deceptinfect_abilities_CurrentForm = _hx_e()
__deceptinfect_abilities_Cooldown = _hx_e()
__deceptinfect_ecswip_System = _hx_e()
__deceptinfect_abilities_FormSystem = _hx_e()
__deceptinfect_client_GeigerSystem = _hx_e()
__haxe_IMap = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__deceptinfect_ecswip_ComponentManager = _hx_e()
__deceptinfect_ecswip_ComponentTools = _hx_e()
__deceptinfect_ecswip_ComponentState = _hx_e()
__deceptinfect_ecswip_DamagePenaltyHidden = _hx_e()
__deceptinfect_ecswip_GEntityComponent = _hx_e()
__deceptinfect_ecswip_GrabAccepter = _hx_e()
__deceptinfect_ecswip_GrabAcceptState = _hx_e()
__deceptinfect_ecswip_GrabProducer = _hx_e()
__deceptinfect_ecswip_SearchingState = _hx_e()
__deceptinfect_ecswip_GrabProduceState = _hx_e()
__deceptinfect_ecswip_GrabSystem = _hx_e()
__deceptinfect_ecswip_HiddenHealthComponent = _hx_e()
__deceptinfect_ecswip_HiddenHealthSystem = _hx_e()
__deceptinfect_ecswip_PlayerComponent = _hx_e()
__deceptinfect_ecswip_DeathTime = _hx_e()
__deceptinfect_ecswip_SignalStorage = _hx_e()
__deceptinfect_ecswip_Spectate = _hx_e()
__deceptinfect_ecswip_Spec_Direction = _hx_e()
__deceptinfect_ecswip_SpectateComponent = _hx_e()
__deceptinfect_infection_InfectionSystem = _hx_e()
__deceptinfect_radiation_RadiationAccepter = _hx_e()
__deceptinfect_infection_RateComponent = _hx_e()
__deceptinfect_radiation_RadiationProducer = _hx_e()
__deceptinfect_ecswip_VirtualPosition = _hx_e()
__deceptinfect_infection_RateSystem = _hx_e()
__deceptinfect_radiation_RadiationSystem = _hx_e()
__deceptinfect_game_WinSystem = _hx_e()
__deceptinfect_game_BatterySystem = _hx_e()
__deceptinfect_game_SpawnPointTable = _hx_e()
__deceptinfect_game_SpawnSystem = _hx_e()
__deceptinfect_statuses_WalkthroughSystem = _hx_e()
__deceptinfect_game_NestSystem = _hx_e()
__deceptinfect_game_EvacSystem = _hx_e()
__deceptinfect_game_RagdollSystem = _hx_e()
__deceptinfect_game_SlowMotionSystem = _hx_e()
__deceptinfect_infection_InfectionLookSystem = _hx_e()
__deceptinfect_radiation_ContaminationSystem = _hx_e()
__deceptinfect_radiation_RadSourceSystem = _hx_e()
__deceptinfect_game_LowHealthSystem = _hx_e()
__deceptinfect_ecswip_SystemManager = _hx_e()
__deceptinfect_ecswip_ChooseVirPos = _hx_e()
__gmod_sent_ENT = _hx_e()
__gmod_sent_ENT_ANIM = _hx_e()
__deceptinfect_ents_Di_battery = _hx_e()
__deceptinfect_ents_Di_charger = _hx_e()
__gmod_sent_ENT_BRUSH = _hx_e()
__deceptinfect_ents_Di_evac_zone = _hx_e()
__deceptinfect_ents_Di_flare = _hx_e()
__deceptinfect_ents_Di_nest = _hx_e()
__deceptinfect_ents_Di_ragdoll = _hx_e()
__deceptinfect_game_AliveComponent = _hx_e()
__deceptinfect_game_BatteryAccepter = _hx_e()
__deceptinfect_game_AccepterStatus = _hx_e()
__deceptinfect_game_BatterySource = _hx_e()
__deceptinfect_game_CleanupEnt = _hx_e()
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_ = _hx_e()
__deceptinfect_game_EvacZone = _hx_e()
__deceptinfect_game_EvacState = _hx_e()
__deceptinfect_game_FlareComponent = _hx_e()
__deceptinfect_game_InEvacZone = _hx_e()
__deceptinfect_game_KeepRestart = _hx_e()
__deceptinfect_game_NestComponent = _hx_e()
__deceptinfect_game_NestState = _hx_e()
__deceptinfect_game_Ragdoll = _hx_e()
__deceptinfect_game_RagdollReveal = _hx_e()
__deceptinfect_game_SlowMotionState = _hx_e()
__deceptinfect_game_SpawnClaim = _hx_e()
__deceptinfect_game_Spawn = _hx_e()
__deceptinfect_game_BoundsSpawn = _hx_e()
__deceptinfect_game_Spawned = _hx_e()
__deceptinfect_game_StatInfo = _hx_e()
__deceptinfect_game_Statue = _hx_e()
__deceptinfect_game_Win = _hx_e()
__deceptinfect_infection_InfVunerability = _hx_e()
__deceptinfect_infection_InfectedComponent = _hx_e()
__deceptinfect_infection_InfectionComponent = _hx_e()
__deceptinfect_infection_AcceptingInfection = _hx_e()
__deceptinfect_infection_BaseInfection = _hx_e()
__deceptinfect_infection_INF_STATE = _hx_e()
__deceptinfect_infection_InfectionLookInfo = _hx_e()
__deceptinfect_radiation_ContaminationAccepter = _hx_e()
__deceptinfect_radiation_ContaminationProducer = _hx_e()
__deceptinfect_radiation_NextOptions = _hx_e()
__deceptinfect_radiation_ContaminationType = _hx_e()
__deceptinfect_radiation_RadSource = _hx_e()
__deceptinfect_radiation_RadSourceOp = _hx_e()
__deceptinfect_radiation_RadSourceState = _hx_e()
__deceptinfect_radiation_RadTime = _hx_e()
__deceptinfect_radiation_RadVictim = _hx_e()
__deceptinfect_radiation_RadLifetime = _hx_e()
__deceptinfect_radiation_RadiationTypes = _hx_e()
__deceptinfect_sabotage_S_Break = _hx_e()
__deceptinfect_sabotage_S_Explode = _hx_e()
__deceptinfect_statuses_Contaminated = _hx_e()
__deceptinfect_statuses_Walkthroughable = _hx_e()
__deceptinfect_util_Cooldown = _hx_e()
__deceptinfect_util_EntityExt = _hx_e()
__deceptinfect_util_ValidID = _hx_e()
__deceptinfect_util_MinMaxTools = _hx_e()
__deceptinfect_util_PlayerExt = _hx_e()
__deceptinfect_util_TimeKeep = _hx_e()
__deceptinfect_util_Util = _hx_e()
__gmod_PairTools = _hx_e()
__haxe_EntryPoint = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_MainEvent = _hx_e()
__haxe_MainLoop = _hx_e()
__haxe_Timer = _hx_e()
__haxe_ds_BalancedTree = _hx_e()
__haxe_ds_TreeNode = _hx_e()
__haxe_ds_EnumValueMap = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_ds_Option = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__lua_Boot = _hx_e()
__haxe_iterators_MapKeyValueIterator = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__lua_lib_luasocket_Socket = _G.require("socket")
__tink_core__Callback_Callback_Impl_ = _hx_e()
__tink_core_LinkObject = _hx_e()
__tink_core__Callback_ListCell = _hx_e()
__tink_core_CallbackList = _hx_e()
__tink_core_Noise = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
_hxClasses["Array"] = Array
Array.__name__ = "Array"
Array.prototype = _hx_a();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    _g:push(i1);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    _G.table.insert(tbl, Std.string(i:next()));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
_hxClasses["Date"] = Date
Date.__name__ = "Date"
Date.prototype = _hx_a();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

IntIterator.new = function(min,max) 
  local self = _hx_new(IntIterator.prototype)
  IntIterator.super(self,min,max)
  return self
end
IntIterator.super = function(self,min,max) 
  self.min = min;
  self.max = max;
end
_hxClasses["IntIterator"] = IntIterator
IntIterator.__name__ = "IntIterator"
IntIterator.prototype = _hx_a();
IntIterator.prototype.min= nil;
IntIterator.prototype.max= nil;
IntIterator.prototype.hasNext = function(self) 
  do return self.min < self.max end
end
IntIterator.prototype.next = function(self) 
  do return (function() 
  local _hx_obj = self;
  local _hx_fld = 'min';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)() end
end

IntIterator.prototype.__class__ =  IntIterator

Lambda.new = {}
_hxClasses["Lambda"] = Lambda
Lambda.__name__ = "Lambda"
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    if (x:next() == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Main.new = {}
_hxClasses["Main"] = Main
Main.__name__ = "Main"
Main.main = function() 
  __deceptinfect_DeceptInfect.new();
  _G.file.CreateDir("deceptinfect");
  _G.game.CleanUpMap();
  __deceptinfect_ecswip_SignalStorage.initEvents();
  __deceptinfect_GameManager.init();
  local _g = 0;
  local _g1 = __deceptinfect_Misc.roundModels;
  while (_g < _g1.length) do 
    local model = _g1[_g];
    _g = _g + 1;
    _G.util.PrecacheModel(model);
  end;
  __deceptinfect_game_SpawnSystem.generateSpawns();
  _G.util.PrecacheModel(__deceptinfect_Misc.infModel);
  _G.game.ConsoleCommand("mp_falldamage 1\n");
  __deceptinfect_GameManager.cleanup();
  _G.math.randomseed(_G.RealTime());
end

Math.new = {}
_hxClasses["Math"] = Math
Math.__name__ = "Math"
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

__gmod_I_NET.new = {}
_hxClasses["gmod.I_NET"] = __gmod_I_NET
__gmod_I_NET.__name__ = "gmod.I_NET"

NETMESSAGE_di_cleanup.new = function() 
  local self = _hx_new(NETMESSAGE_di_cleanup.prototype)
  NETMESSAGE_di_cleanup.super(self)
  return self
end
NETMESSAGE_di_cleanup.super = function(self) 
  _G.util.AddNetworkString("di_cleanup");
end
_hxClasses["NETMESSAGE_di_cleanup"] = NETMESSAGE_di_cleanup
NETMESSAGE_di_cleanup.__name__ = "NETMESSAGE_di_cleanup"
NETMESSAGE_di_cleanup.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_cleanup.prototype = _hx_a();
NETMESSAGE_di_cleanup.prototype.broadcast = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_cleanup", unreliable);
  _G.net.Broadcast();
end

NETMESSAGE_di_cleanup.prototype.__class__ =  NETMESSAGE_di_cleanup

NETMESSAGE_di_evac.new = function() 
  local self = _hx_new(NETMESSAGE_di_evac.prototype)
  NETMESSAGE_di_evac.super(self)
  return self
end
NETMESSAGE_di_evac.super = function(self) 
  _G.util.AddNetworkString("di_evac");
end
_hxClasses["NETMESSAGE_di_evac"] = NETMESSAGE_di_evac
NETMESSAGE_di_evac.__name__ = "NETMESSAGE_di_evac"
NETMESSAGE_di_evac.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_evac.prototype = _hx_a();
NETMESSAGE_di_evac.prototype.broadcast = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_evac", unreliable);
  _G.net.WriteInt(data.state, 32);
  _G.net.WriteFloat(data.time);
  _G.net.Broadcast();
end

NETMESSAGE_di_evac.prototype.__class__ =  NETMESSAGE_di_evac

NETMESSAGE_di_infected.new = function() 
  local self = _hx_new(NETMESSAGE_di_infected.prototype)
  NETMESSAGE_di_infected.super(self)
  return self
end
NETMESSAGE_di_infected.super = function(self) 
  _G.util.AddNetworkString("di_infected");
end
_hxClasses["NETMESSAGE_di_infected"] = NETMESSAGE_di_infected
NETMESSAGE_di_infected.__name__ = "NETMESSAGE_di_infected"
NETMESSAGE_di_infected.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infected.prototype = _hx_a();
NETMESSAGE_di_infected.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infected", unreliable);
  _G.net.Send(recv);
end

NETMESSAGE_di_infected.prototype.__class__ =  NETMESSAGE_di_infected

NETMESSAGE_di_infection.new = function() 
  local self = _hx_new(NETMESSAGE_di_infection.prototype)
  NETMESSAGE_di_infection.super(self)
  return self
end
NETMESSAGE_di_infection.super = function(self) 
  _G.util.AddNetworkString("di_infection");
end
_hxClasses["NETMESSAGE_di_infection"] = NETMESSAGE_di_infection
NETMESSAGE_di_infection.__name__ = "NETMESSAGE_di_infection"
NETMESSAGE_di_infection.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infection.prototype = _hx_a();
NETMESSAGE_di_infection.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infection", unreliable);
  _G.net.WriteFloat(data.infection);
  _G.net.Send(recv);
end

NETMESSAGE_di_infection.prototype.__class__ =  NETMESSAGE_di_infection

NETMESSAGE_di_infinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_infinfo.prototype)
  NETMESSAGE_di_infinfo.super(self)
  return self
end
NETMESSAGE_di_infinfo.super = function(self) 
  _G.util.AddNetworkString("di_infinfo");
end
_hxClasses["NETMESSAGE_di_infinfo"] = NETMESSAGE_di_infinfo
NETMESSAGE_di_infinfo.__name__ = "NETMESSAGE_di_infinfo"
NETMESSAGE_di_infinfo.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infinfo.prototype = _hx_a();
NETMESSAGE_di_infinfo.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infinfo", unreliable);
  _G.net.WriteFloat(data.inf);
  _G.net.WriteBool(data.isinfected);
  _G.net.WriteEntity(data.target);
  _G.net.Send(recv);
end

NETMESSAGE_di_infinfo.prototype.__class__ =  NETMESSAGE_di_infinfo

NETMESSAGE_di_statinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_statinfo.prototype)
  NETMESSAGE_di_statinfo.super(self)
  return self
end
NETMESSAGE_di_statinfo.super = function(self) 
  _G.util.AddNetworkString("di_statinfo");
end
_hxClasses["NETMESSAGE_di_statinfo"] = NETMESSAGE_di_statinfo
NETMESSAGE_di_statinfo.__name__ = "NETMESSAGE_di_statinfo"
NETMESSAGE_di_statinfo.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_statinfo.prototype = _hx_a();
NETMESSAGE_di_statinfo.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_statinfo", unreliable);
  _G.net.WriteFloat(data.health);
  _G.net.WriteFloat(data.inf);
  _G.net.WriteString(data.name);
  _G.net.WriteEntity(data.stat);
  _G.net.Send(recv);
end

NETMESSAGE_di_statinfo.prototype.__class__ =  NETMESSAGE_di_statinfo

NETMESSAGE_gamestate.new = function() 
  local self = _hx_new(NETMESSAGE_gamestate.prototype)
  NETMESSAGE_gamestate.super(self)
  return self
end
NETMESSAGE_gamestate.super = function(self) 
  _G.util.AddNetworkString("gamestate");
end
_hxClasses["NETMESSAGE_gamestate"] = NETMESSAGE_gamestate
NETMESSAGE_gamestate.__name__ = "NETMESSAGE_gamestate"
NETMESSAGE_gamestate.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_gamestate.prototype = _hx_a();
NETMESSAGE_gamestate.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("gamestate", unreliable);
  _G.net.WriteInt(data.state, 32);
  _G.net.WriteFloat(data.time);
  _G.net.Send(recv);
end

NETMESSAGE_gamestate.prototype.__class__ =  NETMESSAGE_gamestate

NETMESSAGE_geiger.new = function() 
  local self = _hx_new(NETMESSAGE_geiger.prototype)
  NETMESSAGE_geiger.super(self)
  return self
end
NETMESSAGE_geiger.super = function(self) 
  _G.util.AddNetworkString("geiger");
end
_hxClasses["NETMESSAGE_geiger"] = NETMESSAGE_geiger
NETMESSAGE_geiger.__name__ = "NETMESSAGE_geiger"
NETMESSAGE_geiger.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_geiger.prototype = _hx_a();
NETMESSAGE_geiger.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("geiger", unreliable);
  _G.net.WriteFloat(data.geiger);
  _G.net.Send(recv);
end

NETMESSAGE_geiger.prototype.__class__ =  NETMESSAGE_geiger

NETMESSAGE_grabend.new = function() 
  local self = _hx_new(NETMESSAGE_grabend.prototype)
  NETMESSAGE_grabend.super(self)
  return self
end
NETMESSAGE_grabend.super = function(self) 
  _G.util.AddNetworkString("grabend");
end
_hxClasses["NETMESSAGE_grabend"] = NETMESSAGE_grabend
NETMESSAGE_grabend.__name__ = "NETMESSAGE_grabend"
NETMESSAGE_grabend.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_grabend.prototype = _hx_a();
NETMESSAGE_grabend.prototype.sendFilter = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("grabend", unreliable);
  _G.net.WriteInt(data.index, 32);
  _G.net.Send(recv);
end

NETMESSAGE_grabend.prototype.__class__ =  NETMESSAGE_grabend

NETMESSAGE_grabupdate.new = function() 
  local self = _hx_new(NETMESSAGE_grabupdate.prototype)
  NETMESSAGE_grabupdate.super(self)
  return self
end
NETMESSAGE_grabupdate.super = function(self) 
  _G.util.AddNetworkString("grabupdate");
end
_hxClasses["NETMESSAGE_grabupdate"] = NETMESSAGE_grabupdate
NETMESSAGE_grabupdate.__name__ = "NETMESSAGE_grabupdate"
NETMESSAGE_grabupdate.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_grabupdate.prototype = _hx_a();
NETMESSAGE_grabupdate.prototype.sendFilter = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("grabupdate", unreliable);
  _G.net.WriteEntity(data.ent);
  _G.net.WriteEntity(data.ent2);
  _G.net.WriteInt(data.index, 32);
  _G.net.Send(recv);
end

NETMESSAGE_grabupdate.prototype.__class__ =  NETMESSAGE_grabupdate

Reflect.new = {}
_hxClasses["Reflect"] = Reflect
Reflect.__name__ = "Reflect"
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
    
      local _hx_1 = _hx_result
      local e = _hx_1
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    local _g = _hx_tab_array({}, 0);
    local f = __lua_Boot.fieldIterator(o);
    while (f:hasNext()) do 
      local f1 = f:next();
      _g:push(f1);
    end;
    do return _g end;
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end
Reflect.compare = function(a,b) 
  if (a == b) then 
    do return 0 end;
  else
    if (a == nil) then 
      do return -1 end;
    else
      if (b == nil) then 
        do return 1 end;
      else
        if (a > b) then 
          do return 1 end;
        else
          do return -1 end;
        end;
      end;
    end;
  end;
end
Reflect.isEnumValue = function(v) 
  if ((v ~= nil) and __lua_Boot.__instanceof(v, _G.table)) then 
    do return v.__enum__ ~= nil end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
_hxClasses["String"] = String
String.__name__ = "String"
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
_hxClasses["Std"] = Std
Std.__name__ = "Std"
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    if (x < __lua_Boot.Min_Int32) then 
      do return __lua_Boot.Min_Int32 end;
    else
      if (x > __lua_Boot.Max_Int32) then 
        do return __lua_Boot.Max_Int32 end;
      else
        do return _G.math.floor(x) end;
      end;
    end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
_hxClasses["StringBuf"] = StringBuf
StringBuf.__name__ = "StringBuf"
StringBuf.prototype = _hx_a();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
_hxClasses["StringTools"] = StringTools
StringTools.__name__ = "StringTools"
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do 
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  _G.table.insert(buf_b, Std.string(s));
  do return _G.table.concat(buf_b) end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
_hxClasses["Type"] = Type
Type.__name__ = "Type"
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o1 = o;
  if (__lua_Boot.__instanceof(o1, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o1, String)) then 
      do return String end;
    else
      local cl = o1.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.resolveClass = function(name) 
  local cl = _hxClasses[name];
  local tmp;
  if (cl ~= nil) then 
    local o = cl;
    tmp = not ((function() 
      local _hx_1
      if (_G.type(o) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = o.__name__; end
      return _hx_1
    end )());
  else
    tmp = true;
  end;
  if (tmp) then 
    do return nil end;
  end;
  do return cl end;
end
Type.createInstance = function(cl,args) 
  do return cl.new(_hx_table.unpack(args, 0)) end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do 
    local f = __lua_Boot.fieldIterator(p);
    while (f:hasNext()) do 
      local f1 = f:next();
      if (not Lambda.has(a, f1)) then 
        a:push(f1);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

__gmod_hooks_Gm.new = {}
_hxClasses["gmod.hooks.Gm"] = __gmod_hooks_Gm
__gmod_hooks_Gm.__name__ = "gmod.hooks.Gm"

__gmod_gamemode_BuildOverrides.new = {}
_hxClasses["gmod.gamemode.BuildOverrides"] = __gmod_gamemode_BuildOverrides
__gmod_gamemode_BuildOverrides.__name__ = "gmod.gamemode.BuildOverrides"

__deceptinfect_DeceptInfect.new = function() 
  local self = _hx_new(__deceptinfect_DeceptInfect.prototype)
  __deceptinfect_DeceptInfect.super(self)
  return self
end
__deceptinfect_DeceptInfect.super = function(self) 
  self.underperforming = false;
  self.timestart = 0;
  GM.CreateEntityRagdoll = function(GM,...) return self:CreateEntityRagdoll(...) end;
  GM.Think = function(GM,...) return self:Think(...) end;
  GM.OnEntityCreated = function(GM,...) return self:OnEntityCreated(...) end;
  GM.EntityRemoved = function(GM,...) return self:EntityRemoved(...) end;
  GM.PlayerSilentDeath = function(GM,...) return self:PlayerSilentDeath(...) end;
  GM.DoPlayerDeath = function(GM,...) return self:DoPlayerDeath(...) end;
  GM.PlayerDeath = function(GM,...) return self:PlayerDeath(...) end;
  GM.EntityKeyValue = function(GM,...) return self:EntityKeyValue(...) end;
  GM.PlayerSpawn = function(GM,...) return self:PlayerSpawn(...) end;
  GM.PlayerDisconnected = function(GM,...) return self:PlayerDisconnected(...) end;
  GM.PlayerButtonUp = function(GM,...) return self:PlayerButtonUp(...) end;
  GM.KeyPress = function(GM,...) return self:KeyPress(...) end;
  GM.KeyRelease = function(GM,...) return self:KeyRelease(...) end;
  GM.PlayerSwitchWeapon = function(GM,...) return self:PlayerSwitchWeapon(...) end;
  GM.PlayerButtonDown = function(GM,...) return self:PlayerButtonDown(...) end;
  GM.PlayerDeathSound = function(GM,...) return self:PlayerDeathSound(...) end;
  GM.PlayerDeathThink = function(GM,...) return self:PlayerDeathThink(...) end;
  GM.IsSpawnpointSuitable = function(GM,...) return self:IsSpawnpointSuitable(...) end;
  GM.PlayerSelectSpawn = function(GM,...) return self:PlayerSelectSpawn(...) end;
  GM.EntityTakeDamage = function(GM,...) return self:EntityTakeDamage(...) end;
  GM.PlayerSay = function(GM,...) return self:PlayerSay(...) end;
  self["self"] = GM;
  __deceptinfect_DeceptInfect.instance = self;
end
_hxClasses["deceptinfect.DeceptInfect"] = __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__name__ = "deceptinfect.DeceptInfect"
__deceptinfect_DeceptInfect.prototype = _hx_a();
__deceptinfect_DeceptInfect.prototype.CreateEntityRagdoll = function(self,owner,ragdoll) 
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_RagdollSystem):playerRagdoll(owner, ragdoll);
end
__deceptinfect_DeceptInfect.prototype.Think = function(self) 
  __deceptinfect_ecswip_SystemManager.runAllSystems();
  __deceptinfect_GameManager.think();
  self:checkPerformance();
end
__deceptinfect_DeceptInfect.prototype.timestart= nil;
__deceptinfect_DeceptInfect.prototype.underperforming= nil;
__deceptinfect_DeceptInfect.prototype.checkPerformance = function(self) 
  if ((_G.FrameTime() > 0.016666666666667) and not self.underperforming) then 
    __haxe_Log.trace("Server underperforming! ", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=72,className="deceptinfect.DeceptInfect",methodName="checkPerformance"}));
    self.underperforming = true;
  else
    if (self.underperforming) then 
      __haxe_Log.trace("Server recovered", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=75,className="deceptinfect.DeceptInfect",methodName="checkPerformance"}));
      self.underperforming = false;
    end;
  end;
end
__deceptinfect_DeceptInfect.prototype.OnEntityCreated = function(self,entity) 
  if (entity:IsPlayer()) then 
    local x = __deceptinfect_ecswip_PlayerComponent.new(entity);
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(x.player);
  end;
end
__deceptinfect_DeceptInfect.prototype.EntityRemoved = function(self,ent) 
  if (ent:IsPlayer()) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(ent.id);
    do return end;
  end;
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(_g1[2]);
  end;
end
__deceptinfect_DeceptInfect.prototype.PlayerSilentDeath = function(self,ply) 
end
__deceptinfect_DeceptInfect.prototype.playerDeath = function(self,victim) 
  __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_game_AliveComponent, victim.id);
  __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_ecswip_GrabAccepter, victim.id);
  local sounds = __deceptinfect_Misc.deathSounds:get(__deceptinfect_ModelType.HUMAN_MALE);
  local sound = sounds[_G.math.random(0, sounds.length - 1)];
  victim:EmitSound(sound, 0, nil, 0);
  _G.EmitSound(sound, victim:GetPos(), victim:EntIndex(), _G.CHAN_VOICE);
  victim:CreateRagdoll();
end
__deceptinfect_DeceptInfect.prototype.DoPlayerDeath = function(self,ply,attacker,dmg) 
  GAMEMODE:PlayerSilentDeath();
  ply:KillSilent();
  self:playerDeath(ply);
  do return end
end
__deceptinfect_DeceptInfect.prototype.PlayerDeath = function(self,victim,inflictor,attacker) 
  __haxe_Log.trace("Player ded!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=133,className="deceptinfect.DeceptInfect",methodName="PlayerDeath"}));
end
__deceptinfect_DeceptInfect.prototype.EntityKeyValue = function(self,ent,key,value) 
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.PlayerSpawn = function(self,player,transition) 
  player:UnSpectate();
  player:SetModel(__deceptinfect_Misc.roundModels[_G.math.random(0, __deceptinfect_Misc.roundModels.length - 1)]);
  player:SetShouldServerRagdoll(true);
  player:ShouldDropWeapon(true);
  local tmp;
  local tmp1 = __deceptinfect_GameManager.state[1];
  if (tmp1) == 0 then 
    tmp = true;
  elseif (tmp1) == 1 then 
    tmp = true;else
  tmp = false; end;
  if (tmp) then 
    player:Give(__deceptinfect_Misc.roundWeapons[0]);
    player:ShouldDropWeapon(false);
  end;
end
__deceptinfect_DeceptInfect.prototype.PlayerDisconnected = function(self,ply) 
  __deceptinfect_ecswip_ComponentManager.removeEntity(ply.id);
end
__deceptinfect_DeceptInfect.prototype.PlayerButtonUp = function(self,ply,button) 
  if (button) == _G.KEY_E then 
  elseif (button) == _G.KEY_F then 
    __deceptinfect_abilities_FormSystem.attemptChangeForm(ply.id);
  elseif (button) == _G.KEY_L then 
    local plyr = _G.player.GetByID(1);
    local ent = _G.ents.Create("prop_ragdoll");
    ent:SetModel(plyr:GetModel());
    ent:SetPos(plyr:GetPos());
    ent:Spawn();
    local _g = 0;
    local _g1 = ent:GetPhysicsObjectCount() - 1;
    while (_g < _g1) do 
      _g = _g + 1;
      local physNum = _g - 1;
      local physob = ent:GetPhysicsObjectNum(physNum);
      local _hx_1_result_a, _hx_1_result_b = plyr:GetBonePosition(ent:TranslatePhysBoneToBone(physNum));
      if (_G.IsValid(physob)) then 
        physob:SetPos(_hx_1_result_a);
        physob:SetAngles(_hx_1_result_b);
        physob:EnableMotion(false);
        physob:Sleep();
      end;
    end;
    ent:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
    ent:SetSolid(_G.SOLID_NONE);
    ent:SetNWString("showwep", ply:GetActiveWeapon():GetModel());
  elseif (button) == _G.KEY_M then 
    __haxe_Log.trace(__deceptinfect_ecswip_ComponentManager.components.h[__deceptinfect_ecswip_PlayerComponent], _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=175,className="deceptinfect.DeceptInfect",methodName="PlayerButtonUp"}));
  elseif (button) == _G.KEY_SEMICOLON then 
    local plyr1 = _G.player.GetByID(1);
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_infection_InfectionSystem):makeInfected(plyr1.id);else end;
end
__deceptinfect_DeceptInfect.prototype.KeyPress = function(self,ply,key) 
  if (key == _G.IN_USE) then 
    __deceptinfect_ecswip_GrabSystem.requestStartSearch(ply.id);
  end;
end
__deceptinfect_DeceptInfect.prototype.KeyRelease = function(self,ply,key) 
  if (key == _G.IN_USE) then 
    __deceptinfect_ecswip_GrabSystem.requestStopSearch(ply.id);
  end;
end
__deceptinfect_DeceptInfect.prototype.PlayerSwitchWeapon = function(self,player,oldWeapon,newWeapon) 
  if (not _G.IsValid(oldWeapon) or not _G.IsValid(newWeapon)) then 
    do return nil end;
  end;
  if (oldWeapon:GetClass() == "weapon_infect") then 
    do return true end;
  end;
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.PlayerButtonDown = function(self,ply,button) 
end
__deceptinfect_DeceptInfect.prototype.PlayerDeathSound = function(self) 
  do return true end
end
__deceptinfect_DeceptInfect.prototype.PlayerDeathThink = function(self,ply) 
  local this1 = ply.id;
  local comp = __deceptinfect_ecswip_ComponentTools.sure(__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[this1]);
  local reviveTime;
  local revive = false;
  local _g = comp.deathTime;
  local tmp;
  local tmp1 = _g[1];
  if (tmp1) == 0 then 
    reviveTime = _G.CurTime() + 1;
    tmp = __deceptinfect_ecswip_DeathTime.DEAD(reviveTime);
  elseif (tmp1) == 1 then 
    reviveTime = _g[2];
    tmp = comp.deathTime; end;
  comp.deathTime = tmp;
  if ((ply:IsBot() and (_G.CurTime() > reviveTime)) and __deceptinfect_GameManager.shouldAllowRespawn()) then 
    revive = true;
  end;
  if (_G.IsValid(ply:GetObserverTarget())) then 
    ply:SetPos(ply:GetObserverTarget():GetPos());
  end;
  if (ply:KeyPressed(_G.IN_ATTACK)) then 
    if ((_G.CurTime() > reviveTime) and __deceptinfect_GameManager.shouldAllowRespawn()) then 
      revive = true;
    end;
    __deceptinfect_ecswip_Spectate.chooseSpectateTarget(comp, __deceptinfect_ecswip_Spec_Direction.FORWARDS);
  else
    if (ply:KeyPressed(_G.IN_ATTACK2)) then 
      __deceptinfect_ecswip_Spectate.chooseSpectateTarget(comp, __deceptinfect_ecswip_Spec_Direction.BACKWARDS);
    else
      if (ply:KeyPressed(_G.IN_JUMP) and __deceptinfect_util_PlayerExt.shouldFreeRoam(ply)) then 
        ply:UnSpectate();
        ply:Spectate(_G.OBS_MODE_ROAMING);
        comp.spec_next = 1;
      end;
    end;
  end;
  if (revive) then 
    comp.deathTime = __deceptinfect_ecswip_DeathTime.ALIVE;
    ply:UnSpectate();
    ply:Spawn();
    do return true end;
  else
    do return false end;
  end;
end
__deceptinfect_DeceptInfect.prototype.IsSpawnpointSuitable = function(self,ply,spawnpoint,makeSuitable) 
  local pos = spawnpoint:GetPos();
  local otherVec = _G.Vector(-30, -30, 0);
  local blockers = pos + otherVec;
  local otherVec1 = _G.Vector(30, 30, 72);
  local blockers1 = _G.ents.FindInBox(blockers, pos + otherVec1);
  local otherVec2 = _G.Vector(1, 1, 1);
  local tracehit = _G.util.TraceEntity(_hx_o({__fields__={start=true,endpos=true},start=pos,endpos=pos + otherVec2}), ply);
  local ent = __gmod_PairTools.iterator(blockers1);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    if (ent1:IsPlayer()) then 
      local blockPly = ent1;
      __deceptinfect_util_PlayerExt.setWalkthroughable(blockPly, true);
      __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_statuses_Walkthroughable.new(), blockPly.id);
      __deceptinfect_util_PlayerExt.setWalkthroughable(ply, true);
      __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_statuses_Walkthroughable.new(), ply.id);
    end;
  end;
  if (tracehit.HitWorld) then 
    __haxe_Log.trace("not valid..", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=307,className="deceptinfect.DeceptInfect",methodName="IsSpawnpointSuitable"}));
    do return false end;
  end;
  do return true end
end
__deceptinfect_DeceptInfect.prototype.PlayerSelectSpawn = function(self,ply,transition) 
  local spawns = _G.ents.FindByClass("info_player_start");
  local random_spawn = _G.math.random(#spawns);
  if (self:IsSpawnpointSuitable(ply, spawns[random_spawn], false)) then 
    do return spawns[random_spawn] end;
  end;
  __haxe_Log.trace("Could not find a spawn!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=324,className="deceptinfect.DeceptInfect",methodName="PlayerSelectSpawn"}));
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.EntityTakeDamage = function(self,target,dmg) 
  local _g = target.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    __deceptinfect_ecswip_SignalStorage.entDamageTrigger.handlers:invoke(_hx_o({__fields__={vicID=true,dmg=true,entity=true},vicID=_g1[2],dmg=dmg,entity=target}));
  end;
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.PlayerSay = function(self,sender,text,teamChat) 
  do return "aaaaple" end
end
__deceptinfect_DeceptInfect.prototype["self"]= nil;

__deceptinfect_DeceptInfect.prototype.__class__ =  __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__super__ = __gmod_hooks_Gm
setmetatable(__deceptinfect_DeceptInfect.prototype,{__index=__gmod_hooks_Gm.prototype})

__deceptinfect_GameInstance.new = function() 
  local self = _hx_new(__deceptinfect_GameInstance.prototype)
  __deceptinfect_GameInstance.super(self)
  return self
end
__deceptinfect_GameInstance.super = function(self) 
  local ret = ({length = 1});
  ret[0] = 0.0;
  self.baseInfection = ret;
  self.totalGameTime = 0;
end
_hxClasses["deceptinfect.GameInstance"] = __deceptinfect_GameInstance
__deceptinfect_GameInstance.__name__ = "deceptinfect.GameInstance"
__deceptinfect_GameInstance.prototype = _hx_a();
__deceptinfect_GameInstance.prototype.totalGameTime= nil;
__deceptinfect_GameInstance.prototype.baseInfection= nil;
__deceptinfect_GameInstance.prototype.start = function(self) 
  self:setTime();
  local chargerSpawn = __deceptinfect_game_SpawnSystem.obj:getRandom();
  local ent = _G.ents.Create("di_charger");
  chargerSpawn:spawn(ent);
  local bat1 = _G.ents.Create("di_battery");
  local bat2 = _G.ents.Create("di_battery");
  local spawns = chargerSpawn:getRandomSpawns(2);
  __haxe_Log.trace(spawns.length, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=39,className="deceptinfect.GameInstance",methodName="start"}));
  __haxe_Log.trace(spawns[1].claimed, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=40,className="deceptinfect.GameInstance",methodName="start"}));
  spawns[0]:spawn(bat1);
  spawns[1]:spawn(bat2);
  local nestSpawn = __deceptinfect_game_SpawnSystem.nest:getRandom();
  local nest = _G.ents.Create("di_nest");
  nestSpawn:spawn(nest);
  local evacZone = _G.ents.Create("di_evac_zone");
  local evacZoneSpawn = __deceptinfect_game_SpawnSystem.evac:getRandom();
  evacZoneSpawn:spawn(evacZone);
end
__deceptinfect_GameInstance.prototype.think = function(self) 
  self.baseInfection[0] = self:calcBaseInfection();
end
__deceptinfect_GameInstance.prototype.calcBaseInfection = function(self) 
  do return (100 / self.totalGameTime) * __deceptinfect_GameManager.diffTime end
end
__deceptinfect_GameInstance.prototype.setTime = function(self) 
  local variance = __deceptinfect_GameValues.GAME_TIMER_VARIANCE;
  self.totalGameTime = __deceptinfect_GameValues.GAME_TIMER + _G.math.random(-variance, variance);
  __haxe_Log.trace("", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=66,className="deceptinfect.GameInstance",methodName="setTime"}));
  __haxe_Log.trace(Std.string("Time until infection: ") .. Std.string(self.totalGameTime), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=67,className="deceptinfect.GameInstance",methodName="setTime"}));
end

__deceptinfect_GameInstance.prototype.__class__ =  __deceptinfect_GameInstance

__enumExtractor_EnumExtractor.new = {}
_hxClasses["enumExtractor.EnumExtractor"] = __enumExtractor_EnumExtractor
__enumExtractor_EnumExtractor.__name__ = "enumExtractor.EnumExtractor"
_hxClasses["deceptinfect.GAME_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WAIT","SETTING_UP","PLAYING","ENDING"},4)}
__deceptinfect_GAME_STATE = _hxClasses["deceptinfect.GAME_STATE"];
__deceptinfect_GAME_STATE.WAIT = _hx_tab_array({[0]="WAIT",0,__enum__ = __deceptinfect_GAME_STATE},2)

__deceptinfect_GAME_STATE.SETTING_UP = function(x,time) local _x = _hx_tab_array({[0]="SETTING_UP",1,x,time,__enum__=__deceptinfect_GAME_STATE}, 4); return _x; end 
__deceptinfect_GAME_STATE.PLAYING = function(x) local _x = _hx_tab_array({[0]="PLAYING",2,x,__enum__=__deceptinfect_GAME_STATE}, 3); return _x; end 
__deceptinfect_GAME_STATE.ENDING = function(x,time) local _x = _hx_tab_array({[0]="ENDING",3,x,time,__enum__=__deceptinfect_GAME_STATE}, 4); return _x; end 

__tink_core_SignalObject.new = {}
_hxClasses["tink.core.SignalObject"] = __tink_core_SignalObject
__tink_core_SignalObject.__name__ = "tink.core.SignalObject"
__tink_core_SignalObject.prototype = _hx_a();
__tink_core_SignalObject.prototype.listen= nil;

__tink_core_SignalObject.prototype.__class__ =  __tink_core_SignalObject

__tink_core_SignalTrigger.new = function() 
  local self = _hx_new(__tink_core_SignalTrigger.prototype)
  __tink_core_SignalTrigger.super(self)
  return self
end
__tink_core_SignalTrigger.super = function(self) 
  self.handlers = __tink_core_CallbackList.new();
end
_hxClasses["tink.core.SignalTrigger"] = __tink_core_SignalTrigger
__tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger"
__tink_core_SignalTrigger.__interfaces__ = {__tink_core_SignalObject}
__tink_core_SignalTrigger.prototype = _hx_a();
__tink_core_SignalTrigger.prototype.handlers= nil;
__tink_core_SignalTrigger.prototype.listen = function(self,cb) 
  local _this = self.handlers;
  local node = __tink_core__Callback_ListCell.new(cb, _this);
  _this.cells:push(node);
  _this.used = _this.used + 1;
  do return node end
end

__tink_core_SignalTrigger.prototype.__class__ =  __tink_core_SignalTrigger

__deceptinfect_GameManager.new = {}
_hxClasses["deceptinfect.GameManager"] = __deceptinfect_GameManager
__deceptinfect_GameManager.__name__ = "deceptinfect.GameManager"
__deceptinfect_GameManager.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_GameManager.shouldAllowRespawn = function() 
  local tmp = __deceptinfect_GameManager.state[1];
  if (tmp) == 0 then 
    do return true end;
  elseif (tmp) == 1 then 
    do return true end;else
  do return false end; end;
end
__deceptinfect_GameManager.initPlayer = function(ply) 
  local p = ply.id;
  local infcomp = __deceptinfect_infection_InfectionComponent.new();
  local spec = __deceptinfect_ecswip_SpectateComponent.new();
  local rate = __deceptinfect_infection_RateComponent.new();
  local vic = __deceptinfect_radiation_RadVictim.new();
  local contam = __deceptinfect_radiation_ContaminationAccepter.new();
  local health = __deceptinfect_ecswip_HiddenHealthComponent.new();
  local grabaccept = __deceptinfect_ecswip_GrabAccepter.new();
  local radaccept = __deceptinfect_radiation_RadiationAccepter.new(_hx_e());
  local virpos = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(ply));
  __deceptinfect_ecswip_ComponentManager.addComponent(infcomp, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(spec, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(rate, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(health, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(grabaccept, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(radaccept, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(virpos, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_AliveComponent.new(), p);
  __deceptinfect_ecswip_ComponentManager.addComponent(vic, p);
  __deceptinfect_ecswip_ComponentManager.addComponent(contam, p);
end
__deceptinfect_GameManager.thinkWait = function() 
  _G.player.GetCount();
end
__deceptinfect_GameManager.think = function() 
  local _g = __deceptinfect_GameManager.state;
  local tmp = _g[1];
  if (tmp) == 0 then 
    __deceptinfect_GameManager.thinkWait();
  elseif (tmp) == 1 then 
    local time = _g[3];
    local x = _g[2];
    if (_G.CurTime() > time) then 
      __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.PLAYING(x));
    end;
  elseif (tmp) == 2 then 
    local x1 = _g[2];
    x1:think();
  elseif (tmp) == 3 then 
    local time1 = _g[3];
    local x2 = _g[2];
    if (_G.CurTime() > time1) then 
      __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.WAIT);
    end; end;
  if (__deceptinfect_GameManager.diffTime == nil) then 
    __deceptinfect_GameManager.diffTime = 0.0;
  else
    __deceptinfect_GameManager.diffTime = _G.CurTime() - __deceptinfect_GameManager.lastTick;
  end;
  __deceptinfect_GameManager.lastTick = _G.CurTime();
end
__deceptinfect_GameManager.set_state = function(x) 
  local time = 0.0;
  local tmp = __deceptinfect_GameManager.state[1];
  if (tmp) == 0 then 
    local tmp1 = x[1];
    if (tmp1) == 1 then 
      time = x[3];
    elseif (tmp1) == 2 then 
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();else
    _G.error("Unsupported state transition",0); end;
  elseif (tmp) == 1 then 
    if (x[1] == 2) then 
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();
    else
      _G.error("Unsupported state transition",0);
    end;
  elseif (tmp) == 2 then 
    local tmp2 = x[1];
    if (tmp2) == 2 then 
      __deceptinfect_GameManager.cleanup();
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();
    elseif (tmp2) == 3 then 
      time = x[3];else
    _G.error("Unsupported state transition",0); end;
  elseif (tmp) == 3 then 
    if (x[1] == 0) then 
      __deceptinfect_GameManager.stateTrig.handlers:invoke(x);
      __deceptinfect_GameManager.cleanup();
    else
      _G.error("Unsupported state transition",0);
    end; end;
  local p = __gmod_PairTools.iterator(_G.player.GetAll());
  while (p:hasNext()) do 
    local p1 = p:next();
    __deceptinfect_GameManager.net_gamestate:send(_hx_o({__fields__={state=true,time=true},state=__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.fromGAME_STATE(x),time=time}), p1);
  end;
  __haxe_Log.trace(Std.string("set state... ") .. Std.string(Std.string(x)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=184,className="deceptinfect.GameManager",methodName="set_state"}));
  __deceptinfect_GameManager.stateTrig.handlers:invoke(x);
  __deceptinfect_GameManager.state = x do return __deceptinfect_GameManager.state end;
end
__deceptinfect_GameManager.cleanup = function() 
  __deceptinfect_GameManager.net_cleanup:broadcast(_hx_e());
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent1];
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_CleanupEnt)[ent1][1] == 1) then 
      if (_g1[1] == 1) then 
        __haxe_Log.trace(ent1, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=196,className="deceptinfect.GameManager",methodName="cleanup"}));
        _g1[2].entity:Remove();
      end;
    end;
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_KeepRestart)[ent1][1] ~= 1) then 
      __deceptinfect_ecswip_ComponentManager.removeEntity(ent1);
    end;
  end;
  __deceptinfect_GameManager.stateTrig.handlers:clear();
  __deceptinfect_ecswip_SystemManager.initAllSystems();
  local ent2 = __gmod_PairTools.iterator(_G.ents.GetAll());
  while (ent2:hasNext()) do 
    local ent3 = ent2:next();
    local _g = ent3:GetClass();
    if (_g) == "di_battery" or (_g) == "di_charger" or (_g) == "di_evac_zone" or (_g) == "di_flare" or (_g) == "di_nest" then 
      ent3:Remove();else end;
  end;
  local p = __gmod_PairTools.iterator(_G.player.GetAll());
  while (p:hasNext()) do 
    local p1 = p:next();
    local x = __deceptinfect_ecswip_PlayerComponent.new(p1);
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(x.player);
    p1:KillSilent();
    p1:Spawn();
  end;
end
_hx_exports["cleanup"] = __deceptinfect_GameManager.cleanup
__deceptinfect_GameManager.hookWin = function() 
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).newWinner:listen(__deceptinfect_GameManager.newWin);
end
__deceptinfect_GameManager.newWin = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    __haxe_Log.trace("Humans win", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=233,className="deceptinfect.GameManager",methodName="newWin"}));
  elseif (tmp) == 1 then 
    __haxe_Log.trace("Infected win", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=235,className="deceptinfect.GameManager",methodName="newWin"}));
  elseif (tmp) == 2 then 
    __haxe_Log.trace("Draw. Boring...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=237,className="deceptinfect.GameManager",methodName="newWin"})); end;
  __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.ENDING(__deceptinfect_GameManager.state:slice(2)[0], _G.CurTime() + 10));
end
__deceptinfect_GameManager.initInfectedPlayer = function(x) 
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_infection_InfectedComponent.new(), x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_GrabProducer.new(), x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_HiddenHealthComponent.new(), x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_abilities_FormComponent.new(), x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_DamagePenaltyHidden.new(), x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_infection_InfectionLookInfo.new(), x);
  local x1 = __deceptinfect_infection_InfectionComponent;
  if (__deceptinfect_ecswip_ComponentManager.lazyInit(x1)[x]:slice(2)[0] == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  local x2 = __deceptinfect_ecswip_GrabAccepter;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x2)[x]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x2.__name__),0);
  end;
  retrieve_comp.grabState = __deceptinfect_ecswip_GrabAcceptState.UNAVALIABLE(__deceptinfect_util_Cooldown.UNAVALIABLE);
  local rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(3, x);
  local x3 = __deceptinfect_ecswip_GEntityComponent;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x3)[x]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x3.__name__),0);
  end;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(retrieve_comp1.entity)), rad);
end
__deceptinfect_GameManager.initAllPlayers = function() 
  local choose = _G.math.random(1, _G.player.GetCount());
  local _g = __gmod_PairTools.keyValueIterator(_G.player.GetAll());
  while (_g:hasNext()) do 
    local _g1 = _g:next();
    local ind = _g1.key;
    local player = _g1.value;
    __deceptinfect_GameManager.initPlayer(player);
    if (ind == choose) then 
      __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_infection_InfectionSystem):makeInfected(player.id);
    end;
    player:StripWeapons();
    player:Give(__deceptinfect_Misc.startingWeapons[0]);
    __deceptinfect_util_PlayerExt.giveFullAmmo(player);
    player:Spawn();
  end;
end
__deceptinfect_GameManager.startGame = function(skipintro) 
  if (skipintro == nil) then 
    skipintro = false;
  end;
  local game = __deceptinfect_GameInstance.new();
  if (skipintro) then 
    __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.PLAYING(game));
  else
    __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.SETTING_UP(game, _G.CurTime() + __deceptinfect_GameValues.SETUP_TIME));
  end;
end
_hx_exports["startGame"] = __deceptinfect_GameManager.startGame
__deceptinfect_GameManager.init = function() 
  __deceptinfect_GameManager.stateChange = __deceptinfect_GameManager.stateTrig;
end

__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.new = {}
_hxClasses["deceptinfect._GameManager.Net_GAME_STATE_VAL_Impl_"] = __deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.__name__ = "deceptinfect._GameManager.Net_GAME_STATE_VAL_Impl_"
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.fromGAME_STATE = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    do return 1 end;
  elseif (tmp) == 2 then 
    do return 2 end;
  elseif (tmp) == 3 then 
    do return 3 end; end;
end

__deceptinfect_GameValues.new = {}
_hx_exports["GameValues"] = __deceptinfect_GameValues
_hxClasses["deceptinfect.GameValues"] = __deceptinfect_GameValues
__deceptinfect_GameValues.__name__ = "deceptinfect.GameValues"

__deceptinfect_MapStorage.new = {}
_hxClasses["deceptinfect.MapStorage"] = __deceptinfect_MapStorage
__deceptinfect_MapStorage.__name__ = "deceptinfect.MapStorage"
_hxClasses["deceptinfect.ModelType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ZOMBIE","HUMAN_MALE"},2)}
__deceptinfect_ModelType = _hxClasses["deceptinfect.ModelType"];
__deceptinfect_ModelType.ZOMBIE = _hx_tab_array({[0]="ZOMBIE",0,__enum__ = __deceptinfect_ModelType},2)

__deceptinfect_ModelType.HUMAN_MALE = _hx_tab_array({[0]="HUMAN_MALE",1,__enum__ = __deceptinfect_ModelType},2)


__deceptinfect_Misc.new = {}
_hxClasses["deceptinfect.Misc"] = __deceptinfect_Misc
__deceptinfect_Misc.__name__ = "deceptinfect.Misc"

__deceptinfect_PlayerManager.new = {}
_hxClasses["deceptinfect.PlayerManager"] = __deceptinfect_PlayerManager
__deceptinfect_PlayerManager.__name__ = "deceptinfect.PlayerManager"
__deceptinfect_PlayerManager.addID = function(ent,id) 
  local this1 = __deceptinfect_PlayerManager.indexLookup;
  local key = ent:EntIndex();
  local _this = this1;
  if (id == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = id;
  end;
end

__deceptinfect_ecswip_Component.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_Component.prototype)
  __deceptinfect_ecswip_Component.super(self)
  return self
end
__deceptinfect_ecswip_Component.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.Component"] = __deceptinfect_ecswip_Component
__deceptinfect_ecswip_Component.__name__ = "deceptinfect.ecswip.Component"
__deceptinfect_ecswip_Component.prototype = _hx_a();

__deceptinfect_ecswip_Component.prototype.__class__ =  __deceptinfect_ecswip_Component

__deceptinfect_abilities_FormComponent.new = function() 
  local self = _hx_new(__deceptinfect_abilities_FormComponent.prototype)
  __deceptinfect_abilities_FormComponent.super(self)
  return self
end
__deceptinfect_abilities_FormComponent.super = function(self) 
  self.formModel = _hx_funcToField(__deceptinfect_Misc.infModel);
  self.formMaxHealth = 60.0;
  self.form = __deceptinfect_abilities_CurrentForm.HUMAN;
  self.nextCooldown = 5;
  self.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
  self.formHealth = 60.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.abilities.FormComponent"] = __deceptinfect_abilities_FormComponent
__deceptinfect_abilities_FormComponent.__name__ = "deceptinfect.abilities.FormComponent"
__deceptinfect_abilities_FormComponent.prototype = _hx_a();
__deceptinfect_abilities_FormComponent.prototype.formHealth= nil;
__deceptinfect_abilities_FormComponent.prototype.cooldown= nil;
__deceptinfect_abilities_FormComponent.prototype.nextCooldown= nil;
__deceptinfect_abilities_FormComponent.prototype.form= nil;
__deceptinfect_abilities_FormComponent.prototype.formMaxHealth= nil;
__deceptinfect_abilities_FormComponent.prototype.formModel= nil;

__deceptinfect_abilities_FormComponent.prototype.__class__ =  __deceptinfect_abilities_FormComponent
__deceptinfect_abilities_FormComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_abilities_FormComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.abilities.CurrentForm"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HUMAN","INFECTED"},2)}
__deceptinfect_abilities_CurrentForm = _hxClasses["deceptinfect.abilities.CurrentForm"];
__deceptinfect_abilities_CurrentForm.HUMAN = _hx_tab_array({[0]="HUMAN",0,__enum__ = __deceptinfect_abilities_CurrentForm},2)

__deceptinfect_abilities_CurrentForm.INFECTED = _hx_tab_array({[0]="INFECTED",1,__enum__ = __deceptinfect_abilities_CurrentForm},2)

_hxClasses["deceptinfect.abilities.Cooldown"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","COOLDOWN"},2)}
__deceptinfect_abilities_Cooldown = _hxClasses["deceptinfect.abilities.Cooldown"];
__deceptinfect_abilities_Cooldown.ACTIVE = _hx_tab_array({[0]="ACTIVE",0,__enum__ = __deceptinfect_abilities_Cooldown},2)

__deceptinfect_abilities_Cooldown.COOLDOWN = function(time) local _x = _hx_tab_array({[0]="COOLDOWN",1,time,__enum__=__deceptinfect_abilities_Cooldown}, 3); return _x; end 

__deceptinfect_ecswip_System.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_System.prototype)
  __deceptinfect_ecswip_System.super(self)
  return self
end
__deceptinfect_ecswip_System.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.System"] = __deceptinfect_ecswip_System
__deceptinfect_ecswip_System.__name__ = "deceptinfect.ecswip.System"
__deceptinfect_ecswip_System.prototype = _hx_a();
__deceptinfect_ecswip_System.prototype.init_server = function(self) 
end
__deceptinfect_ecswip_System.prototype.run_server = function(self) 
end
__deceptinfect_ecswip_System.prototype.init = function(self) 
  self:init_server();
end
__deceptinfect_ecswip_System.prototype.run = function(self) 
  self:run_server();
end

__deceptinfect_ecswip_System.prototype.__class__ =  __deceptinfect_ecswip_System

__deceptinfect_abilities_FormSystem.new = function() 
  local self = _hx_new(__deceptinfect_abilities_FormSystem.prototype)
  __deceptinfect_abilities_FormSystem.super(self)
  return self
end
__deceptinfect_abilities_FormSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.abilities.FormSystem"] = __deceptinfect_abilities_FormSystem
__deceptinfect_abilities_FormSystem.__name__ = "deceptinfect.abilities.FormSystem"
__deceptinfect_abilities_FormSystem.attemptChangeForm = function(ent) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_abilities_FormComponent)[ent];
  if (_g1[1] == 1) then 
    local _g2 = _g1[2];
    if (_g[1] == 1) then 
      local _hx_tmp;
      _hx_tmp = _g[2].entity;
      local _g3 = _g2.cooldown;
      if (_g3[1] == 1) then 
        if (not (_G.CurTime() < _g3[2])) then 
          _g2.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
        end;
      else
        _g2.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
      end;
      if ((_g2.formHealth > 0) and (_g2.cooldown == __deceptinfect_abilities_Cooldown.ACTIVE)) then 
        if (_hx_tmp:Health() > 0) then 
          __deceptinfect_abilities_FormSystem.changeForm(ent);
        end;
      end;
    end;
  end;
end
__deceptinfect_abilities_FormSystem.changeForm = function(ent) 
  local x = __deceptinfect_abilities_FormComponent;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[ent]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_form = retrieve_comp;
  local x1 = __deceptinfect_ecswip_GEntityComponent;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[ent]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  local g_ent = retrieve_comp1.entity;
  local curHealth = g_ent:Health();
  local curMaxHealth = g_ent:GetMaxHealth();
  local curModel = g_ent:GetModel();
  g_ent:SetMaxHealth(c_form.formMaxHealth);
  g_ent:SetHealth(c_form.formHealth);
  g_ent:SetModel(c_form.formModel);
  local tmp;
  local tmp1 = c_form.form[1];
  if (tmp1) == 0 then 
    tmp = __deceptinfect_abilities_CurrentForm.INFECTED;
  elseif (tmp1) == 1 then 
    tmp = __deceptinfect_abilities_CurrentForm.HUMAN; end;
  c_form.form = tmp;
  c_form.formHealth = curHealth;
  c_form.formMaxHealth = curMaxHealth;
  c_form.cooldown = __deceptinfect_abilities_Cooldown.COOLDOWN(_G.CurTime() + c_form.nextCooldown);
  c_form.formModel = curModel;
end
__deceptinfect_abilities_FormSystem.prototype = _hx_a();

__deceptinfect_abilities_FormSystem.prototype.__class__ =  __deceptinfect_abilities_FormSystem
__deceptinfect_abilities_FormSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_abilities_FormSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_client_GeigerSystem.new = function() 
  local self = _hx_new(__deceptinfect_client_GeigerSystem.prototype)
  __deceptinfect_client_GeigerSystem.super(self)
  return self
end
__deceptinfect_client_GeigerSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hx_exports["geiger"] = __deceptinfect_client_GeigerSystem
_hxClasses["deceptinfect.client.GeigerSystem"] = __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__name__ = "deceptinfect.client.GeigerSystem"
__deceptinfect_client_GeigerSystem.prototype = _hx_a();
__deceptinfect_client_GeigerSystem.prototype.run_server = function(self) 
  local plyr = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (plyr:hasNext()) do 
    local plyr1 = plyr:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[plyr1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[plyr1];
    if (_g2[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g1[2].player;
        __deceptinfect_client_GeigerSystem.net_geiger:send(_hx_o({__fields__={geiger=true},geiger=Math.min((_g2[2].rate - 1) / 2, 1)}), _hx_tmp, true);
      end;
    end;
  end;
end

__deceptinfect_client_GeigerSystem.prototype.__class__ =  __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_client_GeigerSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__haxe_IMap.new = {}
_hxClasses["haxe.IMap"] = __haxe_IMap
__haxe_IMap.__name__ = "haxe.IMap"
__haxe_IMap.prototype = _hx_a();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.set= nil;
__haxe_IMap.prototype.keys= nil;
__haxe_IMap.prototype.iterator= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
_hxClasses["haxe.ds.ObjectMap"] = __haxe_ds_ObjectMap
__haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap"
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_a();
__haxe_ds_ObjectMap.prototype.h= nil;
__haxe_ds_ObjectMap.prototype.k= nil;
__haxe_ds_ObjectMap.prototype.set = function(self,key,value) 
  self.h[key] = value;
  self.k[key] = true;
end
__haxe_ds_ObjectMap.prototype.get = function(self,key) 
  do return self.h[key] end
end
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end
__haxe_ds_ObjectMap.prototype.iterator = function(self) 
  local _gthis = self;
  local itr = self:keys();
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(_,...) return _hx_bind(itr,itr.hasNext)(...) end,next=function(self) 
    do return _gthis.h[itr:next()] end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__deceptinfect_ecswip_ComponentManager.new = {}
_hxClasses["deceptinfect.ecswip.ComponentManager"] = __deceptinfect_ecswip_ComponentManager
__deceptinfect_ecswip_ComponentManager.__name__ = "deceptinfect.ecswip.ComponentManager"
__deceptinfect_ecswip_ComponentManager.addGEnt = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addEntity();
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_GEntityComponent.new(x), id);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(x)), id);
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.getOrAdd = function(id,cls,args) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(cls)[id];
  local tmp = _g[1];
  if (tmp) == 0 then 
    if (args == nil) then 
      args = _hx_tab_array({}, 0);
    end;
    local inst = Type.createInstance(cls, args);
    __deceptinfect_ecswip_ComponentManager.addComponent(inst, id);
    do return inst end;
  elseif (tmp) == 1 then 
    do return _g[2] end; end;
end
__deceptinfect_ecswip_ComponentManager.addPlayer = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_PlayerComponent.new(x), id);
  __deceptinfect_PlayerManager.addID(x, id);
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.addComponent = function(x,to) 
  local cls = Type.getClass(x);
  local comparray = __deceptinfect_ecswip_ComponentManager.lazyInit(cls);
  if (__deceptinfect_ecswip_ComponentManager.componentSignals.k[cls] ~= nil) then 
    __deceptinfect_ecswip_ComponentManager.componentSignals.h[cls].handlers:invoke(_hx_o({__fields__={ent=true,comp=true},ent=to,comp=x}));
  end;
  comparray[to] = __deceptinfect_ecswip_ComponentState.Comp(x);
end
__deceptinfect_ecswip_ComponentManager.lazyInit = function(x) 
  local comparray = __deceptinfect_ecswip_ComponentManager.components.h[x];
  if (comparray == nil) then 
    comparray = _hx_tab_array({}, 0);
    local _this = __deceptinfect_ecswip_ComponentManager.components;
    _this.h[x] = comparray;
    _this.k[x] = true;
    local entity = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
    while (entity:hasNext()) do 
      comparray[entity:next()] = __deceptinfect_ecswip_ComponentState.NONE;
    end;
  end;
  do return comparray end;
end
__deceptinfect_ecswip_ComponentManager.removeComponent = function(x,from) 
  __deceptinfect_ecswip_ComponentManager.lazyInit(x)[from] = __deceptinfect_ecswip_ComponentState.NONE;
end
__deceptinfect_ecswip_ComponentManager.removeEntity = function(x) 
  local component = __deceptinfect_ecswip_ComponentManager.components:iterator();
  while (component:hasNext()) do 
    component:next()[x] = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities - 1;
end
__deceptinfect_ecswip_ComponentManager.addToAllCompArrays = function() 
  local compArray = __deceptinfect_ecswip_ComponentManager.components:iterator();
  while (compArray:hasNext()) do 
    compArray:next():push(__deceptinfect_ecswip_ComponentState.NONE);
  end;
end
__deceptinfect_ecswip_ComponentManager.addEntity = function() 
  __deceptinfect_ecswip_ComponentManager.entities = __deceptinfect_ecswip_ComponentManager.entities + 1;
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities + 1;
  __deceptinfect_ecswip_ComponentManager.addToAllCompArrays();
  do return __deceptinfect_ecswip_ComponentManager.entities - 1 end;
end

__deceptinfect_ecswip_ComponentTools.new = {}
_hxClasses["deceptinfect.ecswip.ComponentTools"] = __deceptinfect_ecswip_ComponentTools
__deceptinfect_ecswip_ComponentTools.__name__ = "deceptinfect.ecswip.ComponentTools"
__deceptinfect_ecswip_ComponentTools.sure = function(x) 
  if (x[1] == 1) then 
    do return x[2] end;
  else
    _G.error("Component not avaliable...",0);
  end;
end
_hxClasses["deceptinfect.ecswip.ComponentState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NONE","Comp"},2)}
__deceptinfect_ecswip_ComponentState = _hxClasses["deceptinfect.ecswip.ComponentState"];
__deceptinfect_ecswip_ComponentState.NONE = _hx_tab_array({[0]="NONE",0,__enum__ = __deceptinfect_ecswip_ComponentState},2)

__deceptinfect_ecswip_ComponentState.Comp = function(comp) local _x = _hx_tab_array({[0]="Comp",1,comp,__enum__=__deceptinfect_ecswip_ComponentState}, 3); return _x; end 

__deceptinfect_ecswip_DamagePenaltyHidden.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_DamagePenaltyHidden.prototype)
  __deceptinfect_ecswip_DamagePenaltyHidden.super(self)
  return self
end
__deceptinfect_ecswip_DamagePenaltyHidden.super = function(self) 
  self.damagepenalty = 0.55;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.ecswip.DamagePenaltyHidden"] = __deceptinfect_ecswip_DamagePenaltyHidden
__deceptinfect_ecswip_DamagePenaltyHidden.__name__ = "deceptinfect.ecswip.DamagePenaltyHidden"
__deceptinfect_ecswip_DamagePenaltyHidden.prototype = _hx_a();
__deceptinfect_ecswip_DamagePenaltyHidden.prototype.damagepenalty= nil;

__deceptinfect_ecswip_DamagePenaltyHidden.prototype.__class__ =  __deceptinfect_ecswip_DamagePenaltyHidden
__deceptinfect_ecswip_DamagePenaltyHidden.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_DamagePenaltyHidden.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_GEntityComponent.new = function(e) 
  local self = _hx_new(__deceptinfect_ecswip_GEntityComponent.prototype)
  __deceptinfect_ecswip_GEntityComponent.super(self,e)
  return self
end
__deceptinfect_ecswip_GEntityComponent.super = function(self,e) 
  __deceptinfect_ecswip_Component.super(self);
  self.entity = e;
end
_hxClasses["deceptinfect.ecswip.GEntityComponent"] = __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__name__ = "deceptinfect.ecswip.GEntityComponent"
__deceptinfect_ecswip_GEntityComponent.prototype = _hx_a();
__deceptinfect_ecswip_GEntityComponent.prototype.entity= nil;

__deceptinfect_ecswip_GEntityComponent.prototype.__class__ =  __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GEntityComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_GrabAccepter.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_GrabAccepter.prototype)
  __deceptinfect_ecswip_GrabAccepter.super(self)
  return self
end
__deceptinfect_ecswip_GrabAccepter.super = function(self) 
  self.overwhelm = 2;
  self.numTargeting = 0;
  self.targeting = __haxe_ds_ObjectMap.new();
  self.grabState = __deceptinfect_ecswip_GrabAcceptState.NOT_GRABBED;
  self.grabAttacker = __haxe_ds_ObjectMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.ecswip.GrabAccepter"] = __deceptinfect_ecswip_GrabAccepter
__deceptinfect_ecswip_GrabAccepter.__name__ = "deceptinfect.ecswip.GrabAccepter"
__deceptinfect_ecswip_GrabAccepter.prototype = _hx_a();
__deceptinfect_ecswip_GrabAccepter.prototype.grabAttacker= nil;
__deceptinfect_ecswip_GrabAccepter.prototype.grabState= nil;
__deceptinfect_ecswip_GrabAccepter.prototype.targeting= nil;
__deceptinfect_ecswip_GrabAccepter.prototype.numTargeting= nil;
__deceptinfect_ecswip_GrabAccepter.prototype.overwhelm= nil;

__deceptinfect_ecswip_GrabAccepter.prototype.__class__ =  __deceptinfect_ecswip_GrabAccepter
__deceptinfect_ecswip_GrabAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GrabAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.ecswip.GrabAcceptState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_GRABBED","GRABBED","UNAVALIABLE"},3)}
__deceptinfect_ecswip_GrabAcceptState = _hxClasses["deceptinfect.ecswip.GrabAcceptState"];
__deceptinfect_ecswip_GrabAcceptState.NOT_GRABBED = _hx_tab_array({[0]="NOT_GRABBED",0,__enum__ = __deceptinfect_ecswip_GrabAcceptState},2)

__deceptinfect_ecswip_GrabAcceptState.GRABBED = _hx_tab_array({[0]="GRABBED",1,__enum__ = __deceptinfect_ecswip_GrabAcceptState},2)

__deceptinfect_ecswip_GrabAcceptState.UNAVALIABLE = function(x) local _x = _hx_tab_array({[0]="UNAVALIABLE",2,x,__enum__=__deceptinfect_ecswip_GrabAcceptState}, 3); return _x; end 

__deceptinfect_ecswip_GrabProducer.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_GrabProducer.prototype)
  __deceptinfect_ecswip_GrabProducer.super(self)
  return self
end
__deceptinfect_ecswip_GrabProducer.super = function(self) 
  self.grabState = __deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.NOT_SEARCHING);
  self.grabDist = 70;
  self.nextCooldown = 5;
  self.threshold = 50.0;
  self.damage = 0.0;
  self.grabindex = 0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.ecswip.GrabProducer"] = __deceptinfect_ecswip_GrabProducer
__deceptinfect_ecswip_GrabProducer.__name__ = "deceptinfect.ecswip.GrabProducer"
__deceptinfect_ecswip_GrabProducer.prototype = _hx_a();
__deceptinfect_ecswip_GrabProducer.prototype.grabindex= nil;
__deceptinfect_ecswip_GrabProducer.prototype.damage= nil;
__deceptinfect_ecswip_GrabProducer.prototype.threshold= nil;
__deceptinfect_ecswip_GrabProducer.prototype.nextCooldown= nil;
__deceptinfect_ecswip_GrabProducer.prototype.grabDist= nil;
__deceptinfect_ecswip_GrabProducer.prototype.grabState= nil;
__deceptinfect_ecswip_GrabProducer.prototype.set_grabState = function(self,newGrabState) 
  local _g = self.grabState;
  if (_g[1] == 0) then 
    local _g1 = _g[2];
    if (_g1[1] == 2) then 
      local _g2 = _g1[2];
      if (newGrabState[1] == 0) then 
        local _g3 = newGrabState[2];
        if (_g3[1] == 2) then 
          if (_g2 ~= _g3[2]) then 
            local x = __deceptinfect_ecswip_GrabAccepter;
            local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[_g2]:slice(2)[0];
            if (retrieve_comp == nil) then 
              _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
            end;
            retrieve_comp.numTargeting = retrieve_comp.numTargeting - 1;
          end;
        else
          local x1 = __deceptinfect_ecswip_GrabAccepter;
          local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[_g2]:slice(2)[0];
          if (retrieve_comp1 == nil) then 
            _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
          end;
          retrieve_comp1.numTargeting = retrieve_comp1.numTargeting - 1;
        end;
      else
        local x2 = __deceptinfect_ecswip_GrabAccepter;
        local retrieve_comp2 = __deceptinfect_ecswip_ComponentManager.lazyInit(x2)[_g2]:slice(2)[0];
        if (retrieve_comp2 == nil) then 
          _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x2.__name__),0);
        end;
        retrieve_comp2.numTargeting = retrieve_comp2.numTargeting - 1;
      end;
    end;
  end;
  self.grabState = newGrabState do return self.grabState end
end

__deceptinfect_ecswip_GrabProducer.prototype.__class__ =  __deceptinfect_ecswip_GrabProducer
__deceptinfect_ecswip_GrabProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GrabProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.ecswip.SearchingState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_SEARCHING","SEARCHING","TARGET"},3)}
__deceptinfect_ecswip_SearchingState = _hxClasses["deceptinfect.ecswip.SearchingState"];
__deceptinfect_ecswip_SearchingState.NOT_SEARCHING = _hx_tab_array({[0]="NOT_SEARCHING",0,__enum__ = __deceptinfect_ecswip_SearchingState},2)

__deceptinfect_ecswip_SearchingState.SEARCHING = _hx_tab_array({[0]="SEARCHING",1,__enum__ = __deceptinfect_ecswip_SearchingState},2)

__deceptinfect_ecswip_SearchingState.TARGET = function(vic) local _x = _hx_tab_array({[0]="TARGET",2,vic,__enum__=__deceptinfect_ecswip_SearchingState}, 3); return _x; end 
_hxClasses["deceptinfect.ecswip.GrabProduceState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="READY","GRABBING","NOT_READY"},3)}
__deceptinfect_ecswip_GrabProduceState = _hxClasses["deceptinfect.ecswip.GrabProduceState"];
__deceptinfect_ecswip_GrabProduceState.READY = function(search) local _x = _hx_tab_array({[0]="READY",0,search,__enum__=__deceptinfect_ecswip_GrabProduceState}, 3); return _x; end 
__deceptinfect_ecswip_GrabProduceState.GRABBING = function(victim) local _x = _hx_tab_array({[0]="GRABBING",1,victim,__enum__=__deceptinfect_ecswip_GrabProduceState}, 3); return _x; end 
__deceptinfect_ecswip_GrabProduceState.NOT_READY = function(x) local _x = _hx_tab_array({[0]="NOT_READY",2,x,__enum__=__deceptinfect_ecswip_GrabProduceState}, 3); return _x; end 

__deceptinfect_ecswip_GrabSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_GrabSystem.prototype)
  __deceptinfect_ecswip_GrabSystem.super(self)
  return self
end
__deceptinfect_ecswip_GrabSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.ecswip.GrabSystem"] = __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__name__ = "deceptinfect.ecswip.GrabSystem"
__deceptinfect_ecswip_GrabSystem.grabDamage = function(ent,dmg) 
  if (ent:IsPlayer()) then 
    local this1 = ent.id;
    local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[this1];
    if (_g[1] == 1) then 
      local _g1 = _g[2];
      if (_g1.grabState[1] == 1) then 
        _g1.damage = _g1.damage + dmg:GetDamage();
        if (_g1.damage >= _g1.threshold) then 
          __deceptinfect_ecswip_GrabSystem.grabStop(ent.id);
          _g1:set_grabState(__deceptinfect_ecswip_GrabProduceState.NOT_READY(__deceptinfect_util_Cooldown.COOLDOWN(_G.CurTime() + _g1.nextCooldown)));
        end;
      end;
    end;
  end;
  do return nil end;
end
__deceptinfect_ecswip_GrabSystem.grabStop = function(attack) 
  local x = __deceptinfect_ecswip_GrabProducer;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[attack]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_produce = retrieve_comp;
  local x1 = __deceptinfect_ecswip_VirtualPosition;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[attack]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  local attackPos = retrieve_comp1:get_pos();
  local vic;
  local _g = c_produce.grabState;
  if (_g[1] == 1) then 
    vic = _g[2];
  else
    do return end;
  end;
  local x2 = __deceptinfect_ecswip_VirtualPosition;
  local retrieve_comp2 = __deceptinfect_ecswip_ComponentManager.lazyInit(x2)[vic]:slice(2)[0];
  if (retrieve_comp2 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x2.__name__),0);
  end;
  local vicPos = retrieve_comp2:get_pos();
  local x3 = __deceptinfect_ecswip_GrabAccepter;
  local retrieve_comp3 = __deceptinfect_ecswip_ComponentManager.lazyInit(x3)[vic]:slice(2)[0];
  if (retrieve_comp3 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x3.__name__),0);
  end;
  c_produce:set_grabState(__deceptinfect_ecswip_GrabProduceState.NOT_READY(__deceptinfect_util_Cooldown.COOLDOWN(_G.CurTime() + 2)));
  local _this = retrieve_comp3.grabAttacker;
  _this.h[c_produce] = false;
  _this.k[c_produce] = true;
  local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[vic];
  if (_g2[1] == 1) then 
    _g2[2].player:Freeze(false);
  end;
  local _g4 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[attack];
  if (_g4[1] == 1) then 
    _g4[2].player:Freeze(false);
  end;
  local filter = _G.RecipientFilter();
  filter:AddPVS(attackPos);
  filter:AddPVS(vicPos);
  __deceptinfect_ecswip_GrabSystem.net_grabend:sendFilter(_hx_o({__fields__={index=true},index=c_produce.grabindex}), filter);
end
__deceptinfect_ecswip_GrabSystem.attemptGrab = function(attack,vic) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabAccepter)[vic];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[attack];
  if (_g1[1] == 1) then 
    if (_g[1] == 1) then 
      local _g3 = _g[2];
      local _g11 = _g1[2].grabState;
      if (_g11[1] == 0) then 
        local _g2 = _g11[2];
        if (_g2[1] == 2) then 
          if (_g3.grabState[1] == 0) then 
            __haxe_Log.trace(Std.string("c_accpet ") .. Std.string(Std.string(_g3.grabState)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=245,className="deceptinfect.ecswip.GrabSystem",methodName="attemptGrab"}));
            __deceptinfect_ecswip_GrabSystem.grabStart(attack, _g2[2]);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.requestStartSearch = function(attack) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[attack];
  if (_g[1] == 1) then 
    local _g1 = _g[2];
    local _hx_tmp = _g1.grabState;
    if (_hx_tmp[1] == 0) then 
      if (_hx_tmp[2][1] == 0) then 
        _g1:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.SEARCHING));
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.requestStopSearch = function(attack) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[attack];
  if (_g[1] == 1) then 
    local _g1 = _g[2];
    local _hx_tmp = _g1.grabState;
    if (_hx_tmp[1] == 0) then 
      local tmp = _hx_tmp[2][1];
      if (tmp) == 1 then 
        _g1:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.NOT_SEARCHING));
      elseif (tmp) == 2 then 
        _g1:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.NOT_SEARCHING));else end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.attemptSneakAttack = function(attack,vic) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[attack];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[vic];
  if (_g1[1] == 1) then 
    if (_g[1] == 1) then 
      local _hx_tmp;
      local _hx_tmp1;
      _hx_tmp1 = _g1[2].entity;
      _hx_tmp = _g[2].entity;
      if (__deceptinfect_util_EntityExt.facingBehind(_hx_tmp1, _hx_tmp)) then 
        __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.attemptTarget = function(attack,vic) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabAccepter)[vic];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[attack];
  if (_g1[1] == 1) then 
    if (_g[1] == 1) then 
      local _g3 = _g[2];
      local _g2 = _g1[2].grabState;
      if (_g3.grabState[1] == 0) then 
        if (_g2[1] == 0) then 
          local tmp = _g2[2][1];
          if (tmp) == 1 then 
            __haxe_Log.trace(_g3.grabState, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=289,className="deceptinfect.ecswip.GrabSystem",methodName="attemptTarget"}));
            __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack, vic);
            __deceptinfect_ecswip_GrabSystem.target(attack, vic);
            if (_g3.numTargeting >= _g3.overwhelm) then 
              __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
            end;
          elseif (tmp) == 2 then 
            __haxe_Log.trace(_g3.grabState, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=289,className="deceptinfect.ecswip.GrabSystem",methodName="attemptTarget"}));
            __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack, vic);
            __deceptinfect_ecswip_GrabSystem.target(attack, vic);
            if (_g3.numTargeting >= _g3.overwhelm) then 
              __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
            end;else end;
        end;
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.clearTargetingVic = function(vic) 
  local x = __deceptinfect_ecswip_GrabAccepter;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[vic]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_accept = retrieve_comp;
  local c_produce = c_accept.targeting:keys();
  while (c_produce:hasNext()) do 
    local c_produce1 = c_produce:next();
    local _g = c_produce1.grabState;
    if (_g[1] == 0) then 
      local _g1 = _g[2];
      if (_g1[1] == 2) then 
        if (vic == _g1[2]) then 
          c_produce1:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.SEARCHING));
        end;
      end;
    end;
  end;
  local _this = c_accept.targeting;
  _this.h = ({});
  _this.k = ({});
end
__deceptinfect_ecswip_GrabSystem.grabStart = function(attack,vic) 
  __haxe_Log.trace("starting grab", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=318,className="deceptinfect.ecswip.GrabSystem",methodName="grabStart"}));
  local x = __deceptinfect_ecswip_GrabProducer;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[attack]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_produce = retrieve_comp;
  local x1 = __deceptinfect_ecswip_GrabAccepter;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[vic]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  local c_accept = retrieve_comp1;
  local _this = c_accept.grabAttacker;
  _this.h[c_produce] = true;
  _this.k[c_produce] = true;
  c_accept.grabState = __deceptinfect_ecswip_GrabAcceptState.GRABBED;
  c_produce:set_grabState(__deceptinfect_ecswip_GrabProduceState.GRABBING(vic));
  c_produce.grabindex = (function() 
  local _hx_obj = __deceptinfect_ecswip_GrabSystem;
  local _hx_fld = 'grabindex';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  __deceptinfect_ecswip_GrabSystem.clearTargetingVic(vic);
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[vic];
  if (_g[1] == 1) then 
    _g[2].player:Freeze(true);
  end;
  local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[attack];
  if (_g2[1] == 1) then 
    _g2[2].player:Freeze(true);
  end;
end
__deceptinfect_ecswip_GrabSystem.calcGrabIncrease = function() 
  do return (100 / __deceptinfect_GameValues.GRAB_TIME) / _G.math.floor(1 / _G.engine.TickInterval()) end;
end
__deceptinfect_ecswip_GrabSystem.target = function(attacker,victim) 
  local x = __deceptinfect_ecswip_GrabAccepter;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[victim]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_accept = retrieve_comp;
  local x1 = __deceptinfect_ecswip_GrabProducer;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[attacker]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  local c_produce = retrieve_comp1;
  local _this = c_accept.targeting;
  _this.h[c_produce] = true;
  _this.k[c_produce] = true;
  c_accept.numTargeting = c_accept.numTargeting + 1;
  c_produce:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.TARGET(victim)));
end
__deceptinfect_ecswip_GrabSystem.prototype = _hx_a();
__deceptinfect_ecswip_GrabSystem.prototype.init_server = function(self) 
  _G.hook.Add("EntityTakeDamage", "grabDamage", __deceptinfect_ecswip_GrabSystem.grabDamage);
end
__deceptinfect_ecswip_GrabSystem.prototype.run_server = function(self) 
  local attack = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (attack:hasNext()) do 
    local attack1 = attack:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[attack1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabProducer)[attack1];
    if (_g2[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        local c_produce = _g2[2];
        _hx_tmp = _g1[2].entity;
        local g_attack = _hx_tmp;
        local _g11 = c_produce.grabState;
        local tmp = _g11[1];
        if (tmp) == 0 then 
          local _g21 = _g11[2];
          local tmp1 = _g21[1];
          if (tmp1) == 1 then 
            local victim = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
            while (victim:hasNext()) do 
              local victim1 = victim:next();
              if (attack1 ~= victim1) then 
                local _g22 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[victim1];
                local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[victim1];
                local _g4 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabAccepter)[victim1];
                if (_g4[1] == 1) then 
                  if (_g3[1] == 1) then 
                    if (_g22[1] == 1) then 
                      local _hx_tmp1;
                      _hx_tmp1 = _g3[2]:get_pos();
                      if (_hx_tmp1:Distance(g_attack:GetPos()) < c_produce.grabDist) then 
                        __deceptinfect_ecswip_GrabSystem.attemptTarget(attack1, victim1);
                        local _g23 = c_produce.grabState;
                        local tmp2 = _g23[1];
                        if (tmp2) == 0 then 
                          local _g31 = _g23[2];
                          if (_g31[1] == 2) then 
                            if (_g31[2] == victim1) then 
                              break;
                            end;
                          end;
                        elseif (tmp2) == 1 then 
                          break;else end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          elseif (tmp1) == 2 then 
            local prevVic = _g21[2];
            local x = __deceptinfect_ecswip_VirtualPosition;
            local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[prevVic]:slice(2)[0];
            if (retrieve_comp == nil) then 
              _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
            end;
            local oldDist = retrieve_comp:get_pos():Distance(g_attack:GetPos());
            if (oldDist > c_produce.grabDist) then 
              c_produce:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.SEARCHING));
              break;
            end;
            __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack1, prevVic);
            local victim2 = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
            while (victim2:hasNext()) do 
              local victim3 = victim2:next();
              if ((victim3 ~= prevVic) and (attack1 ~= victim3)) then 
                local _g24 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[victim3];
                local _g32 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[victim3];
                local _g41 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabAccepter)[victim3];
                if (_g41[1] == 1) then 
                  if (_g32[1] == 1) then 
                    if (_g24[1] == 1) then 
                      local _hx_tmp2;
                      _hx_tmp2 = _g32[2]:get_pos();
                      local newDist = _hx_tmp2:Distance(g_attack:GetPos());
                      if ((newDist < oldDist) and (newDist < c_produce.grabDist)) then 
                        __deceptinfect_ecswip_GrabSystem.attemptTarget(attack1, victim3);
                        local _g25 = c_produce.grabState;
                        local tmp3 = _g25[1];
                        if (tmp3) == 0 then 
                          local _g33 = _g25[2];
                          if (_g33[1] == 2) then 
                            local newTarget = _g33[2];
                            if (newTarget == victim3) then 
                              __haxe_Log.trace(Std.string("switching targets ") .. Std.string(newTarget), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=147,className="deceptinfect.ecswip.GrabSystem",methodName="run_server"}));
                              break;
                            end;
                          end;
                        elseif (tmp3) == 1 then 
                          break;else end;
                      end;
                    end;
                  end;
                end;
              end;
            end;else end;
        elseif (tmp) == 1 then 
          local victim4 = _g11[2];
          local g_vic;
          local _g12 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[victim4];
          if (_g12[1] == 1) then 
            g_vic = _g12[2].entity;
          else
            do return end;
          end;
          local filter = _G.RecipientFilter();
          filter:AddPVS(g_attack:GetPos());
          filter:AddPVS(g_vic:GetPos());
          __deceptinfect_ecswip_GrabSystem.net_grabupdate:sendFilter(_hx_o({__fields__={index=true,ent=true,ent2=true},index=c_produce.grabindex,ent=g_vic,ent2=g_attack}), filter, true);
          local _g34 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[victim4];
          if (_g34[1] == 1) then 
            local _g35 = _g34[2].infection;
            local tmp4 = _g35[1];
            if (tmp4) == 0 then 
              local inf = _g35[2];
              local param = __deceptinfect_ecswip_GrabSystem.calcGrabIncrease();
              inf[0] = inf[0] + param;
            elseif (tmp4) == 1 then 
              __haxe_Log.trace("infected", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=185,className="deceptinfect.ecswip.GrabSystem",methodName="run_server"}));
              __deceptinfect_ecswip_GrabSystem.grabStop(attack1);
              local x1 = __deceptinfect_ecswip_GrabAccepter;
              local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[victim4]:slice(2)[0];
              if (retrieve_comp1 == nil) then 
                _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
              end;
              retrieve_comp1.grabState = __deceptinfect_ecswip_GrabAcceptState.UNAVALIABLE(__deceptinfect_util_Cooldown.UNAVALIABLE); end;
          else
            _G.error("Victim has no infection component..",0);
          end;
        elseif (tmp) == 2 then 
          local _g5 = _g11[2];
          if (_g5[1] == 1) then 
            if (_G.CurTime() > _g5[2]) then 
              c_produce:set_grabState(__deceptinfect_ecswip_GrabProduceState.READY(__deceptinfect_ecswip_SearchingState.NOT_SEARCHING));
            end;
          end;else end;
      end;
    end;
  end;
end

__deceptinfect_ecswip_GrabSystem.prototype.__class__ =  __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_ecswip_GrabSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_HiddenHealthComponent.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_HiddenHealthComponent.prototype)
  __deceptinfect_ecswip_HiddenHealthComponent.super(self)
  return self
end
__deceptinfect_ecswip_HiddenHealthComponent.super = function(self) 
  self.extraHealth = 0.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.ecswip.HiddenHealthComponent"] = __deceptinfect_ecswip_HiddenHealthComponent
__deceptinfect_ecswip_HiddenHealthComponent.__name__ = "deceptinfect.ecswip.HiddenHealthComponent"
__deceptinfect_ecswip_HiddenHealthComponent.prototype = _hx_a();
__deceptinfect_ecswip_HiddenHealthComponent.prototype.extraHealth= nil;

__deceptinfect_ecswip_HiddenHealthComponent.prototype.__class__ =  __deceptinfect_ecswip_HiddenHealthComponent
__deceptinfect_ecswip_HiddenHealthComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_HiddenHealthComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_HiddenHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_HiddenHealthSystem.prototype)
  __deceptinfect_ecswip_HiddenHealthSystem.super(self)
  return self
end
__deceptinfect_ecswip_HiddenHealthSystem.super = function(self) 
  __deceptinfect_client_GeigerSystem.super(self);
end
_hxClasses["deceptinfect.ecswip.HiddenHealthSystem"] = __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__name__ = "deceptinfect.ecswip.HiddenHealthSystem"
__deceptinfect_ecswip_HiddenHealthSystem.hiddenHealthDamage = function(data) 
  local victim = data.vicID;
  local g_attacker = data.dmg:GetAttacker();
  if (not g_attacker:IsPlayer()) then 
    do return end;
  end;
  local this1 = g_attacker.id;
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_DamagePenaltyHidden)[this1];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[victim];
  local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_HiddenHealthComponent)[victim];
  if (_g2[1] == 1) then 
    local _g3 = _g2[2];
    if (_g1[1] == 1) then 
      if (_g[1] == 1) then 
        local _g5 = _g[2];
        local damageVal = data.dmg:GetDamage();
        local health = _g1[2].entity:Health();
        local dmgInfo = data.dmg;
        if (damageVal >= health) then 
          __haxe_Log.trace(Std.string(Std.string(Std.string("Did ") .. Std.string(damageVal)) .. Std.string(" points of damage to extra health: ")) .. Std.string(_g3.extraHealth), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/HiddenHealthSystem.hx",lineNumber=26,className="deceptinfect.ecswip.HiddenHealthSystem",methodName="hiddenHealthDamage"}));
          _g3.extraHealth = _g3.extraHealth - damageVal;
          if (_g3.extraHealth > 0) then 
            dmgInfo:SetDamage(health - 1);
          else
            dmgInfo:SetDamage(health);
          end;
        else
          __haxe_Log.trace(Std.string(Std.string(Std.string("Adding ") .. Std.string(damageVal)) .. Std.string(" to ")) .. Std.string(damageVal * (1 - _g5.damagepenalty)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/HiddenHealthSystem.hx",lineNumber=34,className="deceptinfect.ecswip.HiddenHealthSystem",methodName="hiddenHealthDamage"}));
          _g3.extraHealth = _g3.extraHealth + (damageVal * (1 - _g5.damagepenalty));
        end;
      end;
    end;
  end;
end
__deceptinfect_ecswip_HiddenHealthSystem.prototype = _hx_a();
__deceptinfect_ecswip_HiddenHealthSystem.prototype.init_server = function(self) 
  __deceptinfect_ecswip_SignalStorage.entDamageTrigger.handlers:clear();
  __deceptinfect_ecswip_SignalStorage.entDamage:listen(__deceptinfect_ecswip_HiddenHealthSystem.hiddenHealthDamage);
end

__deceptinfect_ecswip_HiddenHealthSystem.prototype.__class__ =  __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__super__ = __deceptinfect_client_GeigerSystem
setmetatable(__deceptinfect_ecswip_HiddenHealthSystem.prototype,{__index=__deceptinfect_client_GeigerSystem.prototype})

__deceptinfect_ecswip_PlayerComponent.new = function(x) 
  local self = _hx_new(__deceptinfect_ecswip_PlayerComponent.prototype)
  __deceptinfect_ecswip_PlayerComponent.super(self,x)
  return self
end
__deceptinfect_ecswip_PlayerComponent.super = function(self,x) 
  self.deathTime = __deceptinfect_ecswip_DeathTime.ALIVE;
  self.spec_next = 1;
  __deceptinfect_ecswip_Component.super(self);
  self.player = x;
end
_hxClasses["deceptinfect.ecswip.PlayerComponent"] = __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__name__ = "deceptinfect.ecswip.PlayerComponent"
__deceptinfect_ecswip_PlayerComponent.prototype = _hx_a();
__deceptinfect_ecswip_PlayerComponent.prototype.spec_next= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.deathTime= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.player= nil;

__deceptinfect_ecswip_PlayerComponent.prototype.__class__ =  __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_PlayerComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.ecswip.DeathTime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ALIVE","DEAD"},2)}
__deceptinfect_ecswip_DeathTime = _hxClasses["deceptinfect.ecswip.DeathTime"];
__deceptinfect_ecswip_DeathTime.ALIVE = _hx_tab_array({[0]="ALIVE",0,__enum__ = __deceptinfect_ecswip_DeathTime},2)

__deceptinfect_ecswip_DeathTime.DEAD = function(reviveTime) local _x = _hx_tab_array({[0]="DEAD",1,reviveTime,__enum__=__deceptinfect_ecswip_DeathTime}, 3); return _x; end 

__deceptinfect_ecswip_SignalStorage.new = {}
_hxClasses["deceptinfect.ecswip.SignalStorage"] = __deceptinfect_ecswip_SignalStorage
__deceptinfect_ecswip_SignalStorage.__name__ = "deceptinfect.ecswip.SignalStorage"
__deceptinfect_ecswip_SignalStorage.initEvents = function() 
  __deceptinfect_ecswip_SignalStorage.entDamage = __deceptinfect_ecswip_SignalStorage.entDamageTrigger;
  __deceptinfect_ecswip_SignalStorage.onInfected = __deceptinfect_ecswip_SignalStorage.onInfectedTrigger;
end

__deceptinfect_ecswip_Spectate.new = {}
_hxClasses["deceptinfect.ecswip.Spectate"] = __deceptinfect_ecswip_Spectate
__deceptinfect_ecswip_Spectate.__name__ = "deceptinfect.ecswip.Spectate"
__deceptinfect_ecswip_Spectate.chooseSpectateTarget = function(x,dir) 
  local player = x.player;
  local iter;
  local iter1 = dir[1];
  if (iter1) == 0 then 
    iter = 1;
  elseif (iter1) == 1 then 
    iter = -1; end;
  local specCur = x.spec_next;
  local specNext = x.spec_next + iter;
  local players = _G.player.GetAll();
  local specd = false;
  while (specNext ~= specCur) do 
    local target = players[specNext];
    if (_G.IsValid(target) and target:Alive()) then 
      player:SpectateEntity(target);
      player:SetObserverMode(_G.OBS_MODE_CHASE);
      specd = true;
    end;
    specNext = specNext + iter;
    if (specNext < 1) then 
      specNext = #players;
    else
      if (specNext > #players) then 
        specNext = 0;
      end;
    end;
  end;
  if (not specd) then 
    __haxe_Log.trace("No spectatable players found", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/Spectate.hx",lineNumber=33,className="deceptinfect.ecswip.Spectate",methodName="chooseSpectateTarget"}));
  end;
  x.spec_next = specNext;
end
_hxClasses["deceptinfect.ecswip.Spec_Direction"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="FORWARDS","BACKWARDS"},2)}
__deceptinfect_ecswip_Spec_Direction = _hxClasses["deceptinfect.ecswip.Spec_Direction"];
__deceptinfect_ecswip_Spec_Direction.FORWARDS = _hx_tab_array({[0]="FORWARDS",0,__enum__ = __deceptinfect_ecswip_Spec_Direction},2)

__deceptinfect_ecswip_Spec_Direction.BACKWARDS = _hx_tab_array({[0]="BACKWARDS",1,__enum__ = __deceptinfect_ecswip_Spec_Direction},2)


__deceptinfect_ecswip_SpectateComponent.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_SpectateComponent.prototype)
  __deceptinfect_ecswip_SpectateComponent.super(self)
  return self
end
__deceptinfect_ecswip_SpectateComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.ecswip.SpectateComponent"] = __deceptinfect_ecswip_SpectateComponent
__deceptinfect_ecswip_SpectateComponent.__name__ = "deceptinfect.ecswip.SpectateComponent"
__deceptinfect_ecswip_SpectateComponent.prototype = _hx_a();

__deceptinfect_ecswip_SpectateComponent.prototype.__class__ =  __deceptinfect_ecswip_SpectateComponent
__deceptinfect_ecswip_SpectateComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_SpectateComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectionSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionSystem.prototype)
  __deceptinfect_infection_InfectionSystem.super(self)
  return self
end
__deceptinfect_infection_InfectionSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.InfectionSystem"] = __deceptinfect_infection_InfectionSystem
__deceptinfect_infection_InfectionSystem.__name__ = "deceptinfect.infection.InfectionSystem"
__deceptinfect_infection_InfectionSystem.calcInfectionFromRates = function(rate) 
  local total = 0.0;
  local totalmulti = 1.0;
  local rate1 = rate.addRates:iterator();
  while (rate1:hasNext()) do 
    total = total + rate1:next();
  end;
  local multi = rate.multipliers:iterator();
  while (multi:hasNext()) do 
    totalmulti = totalmulti + multi:next();
  end;
  do return total * totalmulti end;
end
__deceptinfect_infection_InfectionSystem.getBaseInfection = function(inf) 
  local _g = inf.baseInfection;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    local _g1 = __deceptinfect_GameManager.state;
    if (_g1[1] == 2) then 
      do return _g1[2].baseInfection[0] end;
    else
      __haxe_Log.trace("Not currently playing...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=180,className="deceptinfect.infection.InfectionSystem",methodName="getBaseInfection"}));
      inf.baseInfection = __deceptinfect_infection_BaseInfection.USING_STATIC(0.0);
      do return 0 end;
    end;
  elseif (tmp) == 2 then 
    do return _g[2] end; end;
end
__deceptinfect_infection_InfectionSystem.fixUpInfection = function(infection) 
  local _g = infection.infection;
  if (_g[1] == 0) then 
    local _g1 = _g[2];
    if (_g1[0] < 0) then 
      _g1[0] = 0;
    else
      if (_g1[0] >= 100) then 
        __haxe_Log.trace("Now infected :)", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=196,className="deceptinfect.infection.InfectionSystem",methodName="fixUpInfection"}));
        infection:set_infection(__deceptinfect_infection_INF_STATE.INFECTED);
      end;
    end;
  end;
end
__deceptinfect_infection_InfectionSystem.onInfected = function(ent) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent];
  if (_g[1] == 1) then 
    local _hx_tmp;
    _hx_tmp = _g[2].player;
    __haxe_Log.trace(Std.string("INIT INFECTED PLAYER ") .. Std.string(Std.string(_hx_tmp)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=206,className="deceptinfect.infection.InfectionSystem",methodName="onInfected"}));
    __deceptinfect_infection_InfectionSystem.net_infected:send(_hx_e(), _hx_tmp);
    __deceptinfect_GameManager.initInfectedPlayer(ent);
    __deceptinfect_client_GeigerSystem.net_geiger:send(_hx_o({__fields__={geiger=true},geiger=0.0}), _hx_tmp);
  end;
end
__deceptinfect_infection_InfectionSystem.prototype = _hx_a();
__deceptinfect_infection_InfectionSystem.prototype.run_server = function(self) 
  local numPlayers = 0;
  local totalInf = 0.0;
  local entity = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  local _hx_continue_1 = false;
  while (entity:hasNext()) do repeat 
    local entity1 = entity:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[entity1];
    if (_g1[1] == 1) then 
      local _g2 = _g1[2];
      if (_g2.acceptingInfection[1] == 0) then 
        local _g11 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[entity1];
        if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[entity1][1] == 1) then 
          if (_g11[1] == 0) then 
            break;
          end;
        end;
        local _g4 = _g2.infection;
        if (_g4[1] == 0) then 
          local _g5 = _g4[2];
          local base = __deceptinfect_infection_InfectionSystem.getBaseInfection(_g2);
          local _g41 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_RateComponent)[entity1];
          local rate = (function() 
            local _hx_1
            if (_g41[1] == 1) then 
            _hx_1 = __deceptinfect_infection_InfectionSystem.calcInfectionFromRates(_g41[2]); else 
            _hx_1 = _g2.rate; end
            return _hx_1
          end )();
          rate = rate + 1;
          local _g6 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfVunerability)[entity1];
          local vun = (function() 
            local _hx_2
            if (_g6[1] == 1) then 
            _hx_2 = _g6[2].vun; else 
            _hx_2 = 1; end
            return _hx_2
          end )();
          _g5[0] = _g5[0] + ((base * rate) * vun);
          if (_G.CurTime() > __deceptinfect_infection_InfectionSystem.infectionReport) then 
            __haxe_Log.trace(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(base)) .. Std.string(" ")) .. Std.string(rate)) .. Std.string(" ")) .. Std.string(vun), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=98,className="deceptinfect.infection.InfectionSystem",methodName="run_server"}));
          end;
          __deceptinfect_infection_InfectionSystem.fixUpInfection(_g2);
          local _g8 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[entity1];
          if (_g8[1] == 1) then 
            __deceptinfect_infection_InfectionSystem.net_inf:send(_hx_o({__fields__={infection=true},infection=_g5[0]}), _g8[2].player, true);
            totalInf = totalInf + _g2:getInfValue();
            numPlayers = numPlayers + 1;
          end;
          _g2.rate = rate;
          if (_g2.infection[1] == 1) then 
            __deceptinfect_infection_InfectionSystem.onInfected(entity1);
          end;
        else
          totalInf = totalInf + _g2:getInfValue();
          numPlayers = numPlayers + 1;
        end;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (numPlayers > 0) then 
    __deceptinfect_infection_InfectionSystem.averageInfection = totalInf / numPlayers;
  end;
  if (_G.CurTime() > __deceptinfect_infection_InfectionSystem.infectionReport) then 
    __deceptinfect_infection_InfectionSystem.infectionReport = _G.CurTime() + 5;
  end;
end
__deceptinfect_infection_InfectionSystem.prototype.makeInfected = function(self,ent) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[ent];
  if (_g[1] == 1) then 
    local _g1 = _g[2];
    local tmp;
    if (_g1.infection[1] == 0) then 
      __deceptinfect_infection_InfectionSystem.onInfected(ent);
      tmp = __deceptinfect_infection_INF_STATE.INFECTED;
    else
      tmp = __deceptinfect_infection_INF_STATE.INFECTED;
    end;
    _g1:set_infection(tmp);
    __haxe_Log.trace(Std.string("infection : ") .. Std.string(Std.string(_g1.infection)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=141,className="deceptinfect.infection.InfectionSystem",methodName="makeInfected"}));
  end;
end

__deceptinfect_infection_InfectionSystem.prototype.__class__ =  __deceptinfect_infection_InfectionSystem
__deceptinfect_infection_InfectionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_InfectionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_RadiationAccepter.new = function(options) 
  local self = _hx_new(__deceptinfect_radiation_RadiationAccepter.prototype)
  __deceptinfect_radiation_RadiationAccepter.super(self,options)
  return self
end
__deceptinfect_radiation_RadiationAccepter.super = function(self,options) 
  self.diminish = 0.75;
  self.radiation = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
  if (options.diminish ~= nil) then 
    self.diminish = _hx_funcToField(options.diminish);
  end;
end
_hxClasses["deceptinfect.radiation.RadiationAccepter"] = __deceptinfect_radiation_RadiationAccepter
__deceptinfect_radiation_RadiationAccepter.__name__ = "deceptinfect.radiation.RadiationAccepter"
__deceptinfect_radiation_RadiationAccepter.prototype = _hx_a();
__deceptinfect_radiation_RadiationAccepter.prototype.radiation= nil;
__deceptinfect_radiation_RadiationAccepter.prototype.diminish= nil;

__deceptinfect_radiation_RadiationAccepter.prototype.__class__ =  __deceptinfect_radiation_RadiationAccepter
__deceptinfect_radiation_RadiationAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadiationAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_RateComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_RateComponent.prototype)
  __deceptinfect_infection_RateComponent.super(self)
  return self
end
__deceptinfect_infection_RateComponent.super = function(self) 
  self.multipliers = __haxe_ds_IntMap.new();
  self.addRates = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.RateComponent"] = __deceptinfect_infection_RateComponent
__deceptinfect_infection_RateComponent.__name__ = "deceptinfect.infection.RateComponent"
__deceptinfect_infection_RateComponent.prototype = _hx_a();
__deceptinfect_infection_RateComponent.prototype.addRates= nil;
__deceptinfect_infection_RateComponent.prototype.multipliers= nil;

__deceptinfect_infection_RateComponent.prototype.__class__ =  __deceptinfect_infection_RateComponent
__deceptinfect_infection_RateComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_RateComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_RadiationProducer.new = function(options) 
  local self = _hx_new(__deceptinfect_radiation_RadiationProducer.prototype)
  __deceptinfect_radiation_RadiationProducer.super(self,options)
  return self
end
__deceptinfect_radiation_RadiationProducer.super = function(self,options) 
  __deceptinfect_ecswip_Component.super(self);
  self.maxrate = _hx_funcToField(options.maxrate);
  self.radius = _hx_funcToField(options.radius);
end
_hxClasses["deceptinfect.radiation.RadiationProducer"] = __deceptinfect_radiation_RadiationProducer
__deceptinfect_radiation_RadiationProducer.__name__ = "deceptinfect.radiation.RadiationProducer"
__deceptinfect_radiation_RadiationProducer.prototype = _hx_a();
__deceptinfect_radiation_RadiationProducer.prototype.maxrate= nil;
__deceptinfect_radiation_RadiationProducer.prototype.radius= nil;

__deceptinfect_radiation_RadiationProducer.prototype.__class__ =  __deceptinfect_radiation_RadiationProducer
__deceptinfect_radiation_RadiationProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadiationProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_VirtualPosition.new = function(choice) 
  local self = _hx_new(__deceptinfect_ecswip_VirtualPosition.prototype)
  __deceptinfect_ecswip_VirtualPosition.super(self,choice)
  return self
end
__deceptinfect_ecswip_VirtualPosition.super = function(self,choice) 
  __deceptinfect_ecswip_Component.super(self);
  local tmp = choice[1];
  if (tmp) == 0 then 
    self.ent = choice[2];
  elseif (tmp) == 1 then 
    self:set_pos(choice[2]);
    self:set_ang(choice[3]); end;
end
_hxClasses["deceptinfect.ecswip.VirtualPosition"] = __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__name__ = "deceptinfect.ecswip.VirtualPosition"
__deceptinfect_ecswip_VirtualPosition.prototype = _hx_a();
__deceptinfect_ecswip_VirtualPosition.prototype.pos= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.ang= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.ent= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.get_pos = function(self) 
  if (self.ent == nil) then 
    do return self.pos end;
  else
    do return self.ent:GetPos() end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.set_pos = function(self,set) 
  if (self.ent == nil) then 
    self.pos = set do return self.pos end;
  else
    self.ent:SetPos(set);
    do return set end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.set_ang = function(self,set) 
  if (self.ent == nil) then 
    self.ang = set do return self.ang end;
  else
    self.ent:SetAngles(set);
    do return set end;
  end;
end

__deceptinfect_ecswip_VirtualPosition.prototype.__class__ =  __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_VirtualPosition.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_RateSystem.new = {}
_hxClasses["deceptinfect.infection.RateSystem"] = __deceptinfect_infection_RateSystem
__deceptinfect_infection_RateSystem.__name__ = "deceptinfect.infection.RateSystem"
__deceptinfect_infection_RateSystem.getAddRateTicket = function() 
  __deceptinfect_infection_RateSystem.nextAddRate = __deceptinfect_infection_RateSystem.nextAddRate + 1;
  do return __deceptinfect_infection_RateSystem.nextAddRate - 1 end;
end

__deceptinfect_radiation_RadiationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadiationSystem.prototype)
  __deceptinfect_radiation_RadiationSystem.super(self)
  return self
end
__deceptinfect_radiation_RadiationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadiationSystem"] = __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__name__ = "deceptinfect.radiation.RadiationSystem"
__deceptinfect_radiation_RadiationSystem.testRadiation = function(vec) 
  local ent = __deceptinfect_ecswip_ComponentManager.addEntity();
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.REAL(vec, _G.Angle(0, 0, 0))), ent);
end
_hx_exports["testRadiation"] = __deceptinfect_radiation_RadiationSystem.testRadiation
__deceptinfect_radiation_RadiationSystem.getTotalRadiation = function(dist,rad) 
  if (dist < rad.radius) then 
    do return __haxe_ds_Option.Some((rad.maxrate - 1) * ((rad.radius - dist) / rad.radius)) end;
  else
    do return __haxe_ds_Option.None end;
  end;
end
__deceptinfect_radiation_RadiationSystem.getTotalRadiationRate = function(r) 
  local sortFunc = function(x,y) 
    if (x == y) then 
      do return 0 end;
    else
      if (x < y) then 
        do return -1 end;
      else
        do return 1 end;
      end;
    end;
  end;
  local sorted = _hx_tab_array({}, 0);
  local _g = __haxe_iterators_MapKeyValueIterator.new(r.radiation);
  while (_g:hasNext()) do 
    sorted:push(_g:next().value);
  end;
  sorted:sort(sortFunc);
  local total = 0;
  local _g1 = 0;
  local _g11 = sorted.length;
  while (_g1 < _g11) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    total = total + (sorted[i] * _G.math.pow(r.diminish, i));
  end;
  do return total end;
end
__deceptinfect_radiation_RadiationSystem.prototype = _hx_a();
__deceptinfect_radiation_RadiationSystem.prototype.run_server = function(self) 
  local acceptEnt = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (acceptEnt:hasNext()) do 
    local acceptEnt1 = acceptEnt:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadVictim)[acceptEnt1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[acceptEnt1];
    local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_RateComponent)[acceptEnt1];
    local _g4 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadiationAccepter)[acceptEnt1];
    if (_g4[1] == 1) then 
      local _g5 = _g4[2];
      if (_g3[1] == 1) then 
        local _g6 = _g3[2];
        if (_g2[1] == 1) then 
          local _g7 = _g2[2];
          if (_g1[1] == 1) then 
            _g5.radiation.h = ({});
            local produceEnt = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
            while (produceEnt:hasNext()) do 
              local produceEnt1 = produceEnt:next();
              local _g21 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadSource)[produceEnt1];
              local _g31 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[produceEnt1];
              local _g41 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadiationProducer)[produceEnt1];
              if (_g41[1] == 1) then 
                if (_g31[1] == 1) then 
                  if (_g21[1] == 1) then 
                    local _g22 = __deceptinfect_radiation_RadiationSystem.getTotalRadiation(_g31[2]:get_pos():Distance(_g7:get_pos()), _g41[2]);
                    if (_g22[1] == 0) then 
                      local _g32 = _g22[2];
                      local _this = _g5.radiation;
                      if (_g32 == nil) then 
                        _this.h[produceEnt1] = __haxe_ds_IntMap.tnull;
                      else
                        _this.h[produceEnt1] = _g32;
                      end;
                    end;
                  end;
                end;
              end;
            end;
            _g6.addRates:set(__deceptinfect_radiation_RadiationSystem.radRateID, __deceptinfect_radiation_RadiationSystem.getTotalRadiationRate(_g5));
          end;
        end;
      end;
    end;
  end;
end

__deceptinfect_radiation_RadiationSystem.prototype.__class__ =  __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadiationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_WinSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_WinSystem.prototype)
  __deceptinfect_game_WinSystem.super(self)
  return self
end
__deceptinfect_game_WinSystem.super = function(self) 
  self.winTrig = __tink_core_SignalTrigger.new();
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.WinSystem"] = __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__name__ = "deceptinfect.game.WinSystem"
__deceptinfect_game_WinSystem.prototype = _hx_a();
__deceptinfect_game_WinSystem.prototype.newWinner= nil;
__deceptinfect_game_WinSystem.prototype.winTrig= nil;
__deceptinfect_game_WinSystem.prototype.init_server = function(self) 
  self.newWinner = self.winTrig;
end
__deceptinfect_game_WinSystem.prototype.run_server = function(self) 
  if (__deceptinfect_GameManager.state[1] ~= 2) then 
    do return end;
  end;
  local total = 0;
  local infected = 0;
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[ent1];
    local _g4 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    local tmp = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectedComponent)[ent1][1];
    if (tmp) == 0 then 
      if (_g4[1] == 1) then 
        if (_g3[1] == 1) then 
          total = total + 1;
        end;
      end;
    elseif (tmp) == 1 then 
      if (_g4[1] == 1) then 
        if (_g3[1] == 1) then 
          infected = infected + 1;
          total = total + 1;
        end;
      end; end;
  end;
  __deceptinfect_util_Util.printTimer_2(0, 15, function() 
    __haxe_Log.trace(Std.string(Std.string(Std.string("Infected : ") .. Std.string(infected)) .. Std.string(" total : ")) .. Std.string(total), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=38,className="deceptinfect.game.WinSystem",methodName="run_server"}));
    do return end;
  end);
  if (infected == 0) then 
    __haxe_Log.trace("trigg!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=40,className="deceptinfect.game.WinSystem",methodName="run_server"}));
    self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
    self.winTrig.handlers:clear();
    do return end;
  else
    if (infected >= total) then 
      __haxe_Log.trace("trugg!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=45,className="deceptinfect.game.WinSystem",methodName="run_server"}));
      self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_INF);
      self.winTrig.handlers:clear();
      do return end;
    end;
  end;
  local aliveNests = false;
  local deadNests = false;
  local ent2 = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent2:hasNext()) do 
    local ent3 = ent2:next();
    local _g31 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_NestComponent)[ent3];
    if (_g31[1] == 1) then 
      if (_g31[2].health > 0) then 
        aliveNests = true;
        break;
      else
        deadNests = true;
      end;
    end;
  end;
  if (not aliveNests and deadNests) then 
    self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
  end;
end

__deceptinfect_game_WinSystem.prototype.__class__ =  __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_WinSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_BatterySystem.new = function() 
  local self = _hx_new(__deceptinfect_game_BatterySystem.prototype)
  __deceptinfect_game_BatterySystem.super(self)
  return self
end
__deceptinfect_game_BatterySystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.BatterySystem"] = __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__name__ = "deceptinfect.game.BatterySystem"
__deceptinfect_game_BatterySystem.prototype = _hx_a();
__deceptinfect_game_BatterySystem.prototype.run_server = function(self) 
  local ents = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ents:hasNext()) do 
    local ents1 = ents:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_BatteryAccepter)[ents1];
    if (_g1[1] == 1) then 
      local _g2 = _g1[2];
      _g2.charge = _g2.charge - _g2.decay;
      if (_g2.charge < 0.0) then 
        _g2.charge = 0.0;
      end;
      if (_g2.charge > _g2.satisfy) then 
        _g2.status = __deceptinfect_game_AccepterStatus.SATISIFED;
      end;
      if (_g2.status[1] == 1) then 
        if (_g2.charge < _g2.satisfy) then 
          _g2.status = __deceptinfect_game_AccepterStatus.AVALIABLE;
        end;
      end;
    end;
  end;
end
__deceptinfect_game_BatterySystem.prototype.addBattery = function(self,source,accepter) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_BatteryAccepter)[accepter];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_BatterySource)[source];
  if (_g1[1] == 1) then 
    local _g2 = _g1[2];
    if (_g[1] == 1) then 
      local _g3 = _g[2];
      if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_sabotage_S_Break)[source][1] == 1) then 
        _g3.charge = _g3.charge - (_g2.charge / 2);
      else
        _g3.charge = _g3.charge + _g2.charge;
      end;
      local _g21 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[source];
      if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_sabotage_S_Explode)[source][1] == 1) then 
        if (_g21[1] == 1) then 
          local _g5 = _g21[2];
          _G.util.BlastDamage(_g5.entity, _g5.entity, _g5.entity:GetPos(), 500, 75);
        end;
      end;
      do return true end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end

__deceptinfect_game_BatterySystem.prototype.__class__ =  __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_BatterySystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SpawnPointTable.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnPointTable.prototype)
  __deceptinfect_game_SpawnPointTable.super(self)
  return self
end
__deceptinfect_game_SpawnPointTable.super = function(self) 
  self.spawns = _hx_tab_array({}, 0);
end
_hxClasses["deceptinfect.game.SpawnPointTable"] = __deceptinfect_game_SpawnPointTable
__deceptinfect_game_SpawnPointTable.__name__ = "deceptinfect.game.SpawnPointTable"
__deceptinfect_game_SpawnPointTable.prototype = _hx_a();
__deceptinfect_game_SpawnPointTable.prototype.spawns= nil;
__deceptinfect_game_SpawnPointTable.prototype.generateSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local point = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_Spawn.new(self, point));
  end;
  local _g1 = 0;
  local _g2 = self.spawns;
  while (_g1 < _g2.length) do 
    local spawn = _g2[_g1];
    _g1 = _g1 + 1;
    local _g11 = 0;
    local _g21 = self.spawns;
    while (_g11 < _g21.length) do 
      local spawn2 = _g21[_g11];
      _g11 = _g11 + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end
__deceptinfect_game_SpawnPointTable.prototype.generateBoundSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local minmax = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_BoundsSpawn.new(self, __deceptinfect_util_MinMaxTools.getCenter(minmax), minmax));
  end;
  local _g1 = 0;
  local _g2 = self.spawns;
  while (_g1 < _g2.length) do 
    local spawn = _g2[_g1];
    _g1 = _g1 + 1;
    local _g11 = 0;
    local _g21 = self.spawns;
    while (_g11 < _g21.length) do 
      local spawn2 = _g21[_g11];
      _g11 = _g11 + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end
__deceptinfect_game_SpawnPointTable.prototype.getRandom = function(self) 
  local choose = _G.math.random(0, self.spawns.length - 1);
  __haxe_Log.trace(Std.string("index chosen ") .. Std.string(choose), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=246,className="deceptinfect.game.SpawnPointTable",methodName="getRandom"}));
  do return self.spawns[choose] end
end

__deceptinfect_game_SpawnPointTable.prototype.__class__ =  __deceptinfect_game_SpawnPointTable

__deceptinfect_game_SpawnSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnSystem.prototype)
  __deceptinfect_game_SpawnSystem.super(self)
  return self
end
__deceptinfect_game_SpawnSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.SpawnSystem"] = __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__name__ = "deceptinfect.game.SpawnSystem"
__deceptinfect_game_SpawnSystem.generateSpawns = function() 
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.obj:generateSpawns(ret.objectives);
  local this2 = __deceptinfect_MapStorage.spawns;
  local key1 = _G.game.GetMap();
  local ret1 = this2.h[key1];
  if (ret1 == __haxe_ds_StringMap.tnull) then 
    ret1 = nil;
  end;
  __deceptinfect_game_SpawnSystem.item:generateSpawns(ret1.items);
  local this3 = __deceptinfect_MapStorage.spawns;
  local key2 = _G.game.GetMap();
  local ret2 = this3.h[key2];
  if (ret2 == __haxe_ds_StringMap.tnull) then 
    ret2 = nil;
  end;
  __deceptinfect_game_SpawnSystem.nest:generateSpawns(ret2.nests);
  local this4 = __deceptinfect_MapStorage.spawns;
  local key3 = _G.game.GetMap();
  local ret3 = this4.h[key3];
  if (ret3 == __haxe_ds_StringMap.tnull) then 
    ret3 = nil;
  end;
  __deceptinfect_game_SpawnSystem.evac:generateBoundSpawns(ret3.evacs);
end
__deceptinfect_game_SpawnSystem.prototype = _hx_a();
__deceptinfect_game_SpawnSystem.prototype.init_server = function(self) 
end
__deceptinfect_game_SpawnSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[ent1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Spawned)[ent1];
    if (_g2[1] == 1) then 
      local _g3 = _g2[2];
      if (_g1[1] == 1) then 
        if (_g3.spawn.vec:DistToSqr(_g1[2]:get_pos()) > 8100) then 
          __haxe_Log.trace("Spawn freed", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=25,className="deceptinfect.game.SpawnSystem",methodName="run_server"}));
          _g3.spawn.claimed = __deceptinfect_game_SpawnClaim.UNCLAIMED;
          __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_game_Spawned, ent1);
        end;
      end;
    end;
  end;
end

__deceptinfect_game_SpawnSystem.prototype.__class__ =  __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SpawnSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_statuses_WalkthroughSystem.new = function() 
  local self = _hx_new(__deceptinfect_statuses_WalkthroughSystem.prototype)
  __deceptinfect_statuses_WalkthroughSystem.super(self)
  return self
end
__deceptinfect_statuses_WalkthroughSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.statuses.WalkthroughSystem"] = __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__name__ = "deceptinfect.statuses.WalkthroughSystem"
__deceptinfect_statuses_WalkthroughSystem.prototype = _hx_a();
__deceptinfect_statuses_WalkthroughSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_statuses_Walkthroughable)[ent1][1] == 1) then 
      if (_g1[1] == 1) then 
        local _g4 = _g1[2];
        local tooclose = false;
        local otherEnt = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
        local _hx_continue_2 = false;
        while (otherEnt:hasNext()) do repeat 
          local otherEnt1 = otherEnt:next();
          if (otherEnt1 == ent1) then 
            break;
          end;
          local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[otherEnt1];
          if (_g2[1] == 1) then 
            if (_g2[2].player:GetPos():DistToSqr(_g4.player:GetPos()) < 10000) then 
              tooclose = true;
              _hx_continue_2 = true;break;
            end;
          end;until true
          if _hx_continue_2 then 
          _hx_continue_2 = false;
          break;
          end;
          
        end;
        if (not tooclose) then 
          __deceptinfect_util_PlayerExt.setWalkthroughable(_g4.player, false);
          __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_statuses_Walkthroughable, ent1);
        end;
      end;
    end;
  end;
end

__deceptinfect_statuses_WalkthroughSystem.prototype.__class__ =  __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_statuses_WalkthroughSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_NestSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_NestSystem.prototype)
  __deceptinfect_game_NestSystem.super(self)
  return self
end
__deceptinfect_game_NestSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.NestSystem"] = __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__name__ = "deceptinfect.game.NestSystem"
__deceptinfect_game_NestSystem.prototype = _hx_a();
__deceptinfect_game_NestSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadiationProducer)[ent1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_NestComponent)[ent1];
    if (_g2[1] == 1) then 
      local _g3 = _g2[2];
      if (_g1[1] == 1) then 
        local _g4 = _g1[2];
        local remap = (function(inMax,inMin,value) 
          do return function(outMin,outMax) 
            do return _G.math.Remap(value[0], inMin[0], inMax[0], outMin, outMax) end;
          end end;
        end)(_hx_tab_array({[0]=_g3.rate_threshold_max}, 1), _hx_tab_array({[0]=_g3.rate_threshold_min}, 1), _hx_tab_array({[0]=__deceptinfect_infection_InfectionSystem.averageInfection}, 1));
        _g4.maxrate = remap(_g3.rate_start, _g3.rate_end);
        _g4.radius = remap(_g3.radius_start, _g3.radius_end);
      end;
    end;
  end;
end

__deceptinfect_game_NestSystem.prototype.__class__ =  __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_NestSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_EvacSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_EvacSystem.prototype)
  __deceptinfect_game_EvacSystem.super(self)
  return self
end
__deceptinfect_game_EvacSystem.super = function(self) 
  self.flaresSpawned = false;
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.EvacSystem"] = __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__name__ = "deceptinfect.game.EvacSystem"
__deceptinfect_game_EvacSystem.prototype = _hx_a();
__deceptinfect_game_EvacSystem.prototype.flaresSpawned= nil;
__deceptinfect_game_EvacSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_GameManager.state;
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_EvacZone)[ent1];
    if (_g2[1] == 1) then 
      if (_g1[1] == 2) then 
        local c_evac = _g2[2];
        if ((__deceptinfect_infection_InfectionSystem.averageInfection > 80) and not self.flaresSpawned) then 
          local flareSpawn = __deceptinfect_game_SpawnSystem.obj:getRandom();
          flareSpawn:spawn(_G.ents.Create("di_flare"));
          local flareSpawn2 = flareSpawn:getRandomSpawns(1);
          local tmp = _G.ents.Create("di_flare");
          flareSpawn2[0]:spawn(tmp);
          self.flaresSpawned = true;
        end;
        local _g11 = c_evac.state;
        local tmp1 = _g11[1];
        if (tmp1) == 1 then 
          local time = _g11[2];
          time[0] = time[0] - __deceptinfect_GameManager.diffTime;
          if (time[0] < 0) then 
            __haxe_Log.trace(c_evac.state, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=84,className="deceptinfect.game.EvacSystem",methodName="run_server"}));
            local v = c_evac.leavetime;
            local ret = ({length = 1});
            ret[0] = v;
            c_evac.state = __deceptinfect_game_EvacState.LEAVING(ret);
          end;
          __deceptinfect_game_EvacSystem.evac_state:broadcast(_hx_o({__fields__={state=true,time=true},state=__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from(c_evac.state),time=time[0]}), true);
        elseif (tmp1) == 2 then 
          local time1 = _g11[2];
          time1[0] = time1[0] - __deceptinfect_GameManager.diffTime;
          if (time1[0] < 0) then 
            __haxe_Log.trace(c_evac.state, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=64,className="deceptinfect.game.EvacSystem",methodName="run_server"}));
            self:checkWin(c_evac);
            c_evac.state = __deceptinfect_game_EvacState.NOT_ACTIVE;
          end;
          local id = c_evac.in_zone:keys();
          while (id:hasNext()) do 
            local id1 = id:next();
            local _g12 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_abilities_FormComponent)[id1];
            if (_g12[1] == 1) then 
              if (_g12[2].form[1] == 1) then 
                c_evac.in_zone:remove(id1);
                c_evac.blocked.h[id1] = true;
              end;
            end;
          end;
          __deceptinfect_game_EvacSystem.evac_state:broadcast(_hx_o({__fields__={state=true,time=true},state=__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from(c_evac.state),time=time1[0]}), true);else end;
      end;
    end;
  end;
end
__deceptinfect_game_EvacSystem.prototype.checkWin = function(self,evac) 
  local humanEscape = false;
  local id = evac.in_zone:keys();
  while (id:hasNext()) do 
    local id1 = id:next();
    local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[id1];
    local tmp = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectedComponent)[id1][1];
    if (tmp) == 0 then 
      if (_g[1] == 1) then 
        humanEscape = true;
      end;
    elseif (tmp) == 1 then 
      if (_g[1] == 1) then 
        __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_INF);
        do return end;
      end; end;
  end;
  if (humanEscape) then 
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
  else
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.DRAW);
  end;
end
__deceptinfect_game_EvacSystem.prototype.touched = function(self,ent,evac) 
  if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent][1] == 1) then 
    if (evac.blocked.h[ent] ~= nil) then 
      do return end;
    end;
    local _g = evac.state;
    if (_g[1] == 2) then 
      local _g1 = _g[2];
      if ((evac.touched.h[ent] == nil) and (_g1[0] < (evac.leavetime / 2))) then 
        _g1[0] = evac.leavetime / 2;
      end;
    end;
    evac.touched.h[ent] = true;
    evac.in_zone.h[ent] = false;
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_InEvacZone.new(), ent);
  end;
end
__deceptinfect_game_EvacSystem.prototype.addFlare = function(self,flare,evac) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_EvacZone)[evac];
  local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[flare];
  local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_FlareComponent)[flare];
  if (_g2[1] == 1) then 
    if (_g1[1] == 1) then 
      if (_g[1] == 1) then 
        local c_evac = _g[2];
        if (c_evac.state[1] == 0) then 
          local v = c_evac.arrivetime;
          local ret = ({length = 1});
          ret[0] = v;
          c_evac.state = __deceptinfect_game_EvacState.ARRIVING(ret);
          _g1[2].entity:Remove();
        end;
      end;
    end;
  end;
end
__deceptinfect_game_EvacSystem.prototype.leave = function(self,ent,evac) 
  if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent][1] == 1) then 
    evac.in_zone:remove(ent);
    __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_game_InEvacZone, ent);
  end;
end

__deceptinfect_game_EvacSystem.prototype.__class__ =  __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_EvacSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_RagdollSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_RagdollSystem.prototype)
  __deceptinfect_game_RagdollSystem.super(self)
  return self
end
__deceptinfect_game_RagdollSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.RagdollSystem"] = __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__name__ = "deceptinfect.game.RagdollSystem"
__deceptinfect_game_RagdollSystem.prototype = _hx_a();
__deceptinfect_game_RagdollSystem.prototype.init_server = function(self) 
  __deceptinfect_GameManager.stateChange:listen(_hx_bind(self,self.stateChange));
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_SlowMotionSystem).slowMotionEnd:listen(_hx_bind(self,self.endSlowMotion));
end
__deceptinfect_game_RagdollSystem.prototype.endSlowMotion = function(self,x) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Statue)[ent1];
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Ragdoll)[ent1][1] == 1) then 
      if (_g2[1] == 1) then 
        if (_g1[1] == 1) then 
          local _hx_tmp;
          _hx_tmp = _g1[2].entity;
          local _g11 = 0;
          local _g21 = _hx_tmp:GetPhysicsObjectCount();
          while (_g11 < _g21) do 
            _g11 = _g11 + 1;
            local physob = _hx_tmp:GetPhysicsObjectNum(_g11 - 1);
            physob:EnableMotion(false);
            physob:Sleep();
          end;
          _hx_tmp:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
          _hx_tmp:SetSolid(_G.SOLID_NONE);
        end;
      end;
    end;
    local _g7 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[ent1];
    local _g8 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    if (_g8[1] == 1) then 
      if (_g7[1] == 1) then 
        local _hx_tmp1;
        _hx_tmp1 = _g8[2].player;
        self:playerStatue(_hx_tmp1);
        _hx_tmp1:KillSilent();
      end;
    end;
  end;
end
__deceptinfect_game_RagdollSystem.prototype.stateChange = function(self,newstate) 
  local _g = __deceptinfect_GameManager.state;
  local tmp = newstate[1];
  if (tmp) == 0 then 
    __haxe_Log.trace("wrote", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=257,className="deceptinfect.game.RagdollSystem",methodName="stateChange"}));
    self:writeStatues();
  elseif (tmp) == 3 then 
    local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
    while (ent:hasNext()) do 
      local ent1 = ent:next();
      local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_AliveComponent)[ent1];
      local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectedComponent)[ent1];
      local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
      if (_g3[1] == 1) then 
        if (_g2[1] == 1) then 
          if (_g1[1] == 1) then 
            _g3[2].player:SetModel(__deceptinfect_Misc.infModel);
          end;
        end;
      end;
      local _g7 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Ragdoll)[ent1];
      local _g8 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent1];
      if (_g8[1] == 1) then 
        if (_g7[1] == 1) then 
          if (_g7[2].reveal[1] == 0) then 
            self:reveal(_g8[2].entity);
          end;
        end;
      end;
    end;else
  if (_g[1] == 0) then 
    local ent2 = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
    while (ent2:hasNext()) do 
      local ent3 = ent2:next();
      local _g11 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent3];
      if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Statue)[ent3][1] == 1) then 
        if (_g11[1] == 1) then 
          __haxe_Log.trace("removed statue", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=263,className="deceptinfect.game.RagdollSystem",methodName="stateChange"}));
          _g11[2].entity:Remove();
        end;
      end;
    end;
  end; end;
end
__deceptinfect_game_RagdollSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Ragdoll)[ent1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent1];
    if (_g2[1] == 1) then 
      if (_g1[1] == 1) then 
        local c_ent = _g2[2];
        local c_rag = _g1[2];
        local _g11 = c_rag.reveal;
        if (_g11[1] == 0) then 
          if (_G.CurTime() > _g11[2][0]) then 
            self:reveal(c_ent.entity);
          end;
        end;
        local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Statue)[ent1];
        if (_g3[1] ~= 1) then 
          local this1 = c_rag.owner;
          local x = __deceptinfect_ecswip_PlayerComponent;
          local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0];
          if (retrieve_comp == nil) then 
            _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
          end;
          if (retrieve_comp.player:Alive()) then 
            c_ent.entity:Remove();
          end;
        end;
      end;
    end;
    local _g5 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    if (_g5[1] == 1) then 
      local c_ply = _g5[2];
      local _g51 = __deceptinfect_util_EntityExt.validID2(c_ply.player:GetEyeTrace().Entity);
      if (_g51[1] == 0) then 
        local id = _g51[2];
        local _g52 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_StatInfo)[id];
        local _g6 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[id];
        if (_g6[1] == 1) then 
          if (_g52[1] == 1) then 
            local c_stat = _g52[2];
            __deceptinfect_game_RagdollSystem.statueinfo:send(_hx_o({__fields__={stat=true,inf=true,health=true,name=true},stat=_g6[2].entity,inf=c_stat.inf,health=c_stat.health,name=c_stat.name}), c_ply.player);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_game_RagdollSystem.prototype.playerRagdoll = function(self,owner,ragdoll) 
  if (owner:IsPlayer()) then 
    local ply = owner;
    local di_ragdoll = self:newRagdoll(ply, ragdoll);
    local this1 = ply.id;
    local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectedComponent)[this1];
    if (_g[1] == 1) then 
      local this2 = di_ragdoll.id;
      local x = __deceptinfect_game_Ragdoll;
      local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this2]:slice(2)[0];
      if (retrieve_comp == nil) then 
        _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
      end;
      local v = _G.CurTime() + 5;
      local ret = ({length = 1});
      ret[0] = v;
      retrieve_comp.reveal = __deceptinfect_game_RagdollReveal.WAIT(ret);
    end;
  end;
  ragdoll:SetNoDraw(true);
  ragdoll:Remove();
end
__deceptinfect_game_RagdollSystem.prototype.playerStatue = function(self,plyr,inf) 
  if (inf == nil) then 
    inf = false;
  end;
  local x = _G.ents.Create("prop_ragdoll");
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local ent = x;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Statue.new(), ent.id);
  local c_stat = __deceptinfect_game_StatInfo.new();
  c_stat.name = plyr:Name();
  local this1 = plyr.id;
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[this1];
  c_stat.inf = (function() 
    local _hx_1
    if (_g[1] == 1) then 
    _hx_1 = _g[2]:getInfValue(); else 
    _hx_1 = 0.0; end
    return _hx_1
  end )();
  c_stat.health = plyr:Health();
  __deceptinfect_ecswip_ComponentManager.addComponent(c_stat, ent.id);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_KeepRestart.new(), ent.id);
  ent:SetModel(plyr:GetModel());
  ent:SetPos(plyr:GetPos());
  __haxe_Log.trace("hmm i wonder whats for dinner", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=357,className="deceptinfect.game.RagdollSystem",methodName="playerStatue"}));
  ent:Spawn();
  local _g2 = 0;
  local _g3 = ent:GetPhysicsObjectCount() - 1;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local physNum = _g2 - 1;
    local physob = ent:GetPhysicsObjectNum(physNum);
    local _hx_2_result_a, _hx_2_result_b = plyr:GetBonePosition(ent:TranslatePhysBoneToBone(physNum));
    if (_G.IsValid(physob)) then 
      physob:SetPos(_hx_2_result_a);
      physob:SetAngles(_hx_2_result_b);
      physob:EnableMotion(false);
      physob:Sleep();
    end;
  end;
  ent:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
  ent:SetTrigger(true);
  ent:SetSolid(_G.SOLID_NONE);
  ent:SetNWString("showwep", plyr:GetActiveWeapon():GetModel());
end
__deceptinfect_game_RagdollSystem.prototype.writeStatues = function(self) 
  local tbl = _hx_tab_array({}, 0);
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[ent1];
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Statue)[ent1][1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g1[2].entity;
        local ar = _hx_tab_array({}, 0);
        local _g11 = 0;
        local _g2 = _hx_tmp:GetPhysicsObjectCount();
        while (_g11 < _g2) do 
          _g11 = _g11 + 1;
          local physob = _hx_tmp:GetPhysicsObjectNum(_g11 - 1);
          ar:push(_hx_o({__fields__={pos=true,ang=true},pos=_G.util.TypeToString(physob:GetPos()),ang=_G.util.TypeToString(physob:GetAngles())}));
        end;
        tbl:push(_hx_o({__fields__={model=true,phys=true},model=_hx_tmp:GetModel(),phys=ar}));
      end;
    end;
  end;
  _G.file.Write("deceptinfect/lastRoundStatues.txt", __haxe_Json.stringify(tbl));
end
__deceptinfect_game_RagdollSystem.prototype.newRagdoll = function(self,owner,old) 
  local rag = self:createProp();
  rag:SetPos(owner:GetPos());
  rag:SetModel(owner:GetModel());
  rag:Spawn();
  local this1 = rag.id;
  local x = __deceptinfect_game_Ragdoll;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  retrieve_comp.owner = owner.id;
  local _g = 0;
  local _g1 = rag:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local physNum = _g - 1;
    local physob = rag:GetPhysicsObjectNum(physNum);
    local oldphysob = old:GetPhysicsObjectNum(physNum);
    local _hx_1_result_a, _hx_1_result_b = owner:GetBonePosition(rag:TranslatePhysBoneToBone(physNum));
    if (_G.IsValid(physob)) then 
      physob:SetPos(_hx_1_result_a);
      physob:SetAngles(_hx_1_result_b);
      if (_G.IsValid(oldphysob)) then 
        physob:SetVelocityInstantaneous(oldphysob:GetVelocity());
        physob:SetVelocity(oldphysob:GetVelocity());
      end;
      physob:Wake();
    end;
  end;
  do return rag end
end
__deceptinfect_game_RagdollSystem.prototype.createProp = function(self) 
  local rag = _G.ents.Create("prop_ragdoll");
  rag.id = __deceptinfect_ecswip_ComponentManager.addGEnt(rag);
  local id = rag.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Ragdoll.new(), id);
  if (__deceptinfect_GameManager.state[1] == 2) then 
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Statue.new(), id);
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_KeepRestart.new(), id);
  else
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_CleanupEnt.new(), id);
  end;
  do return rag end
end
__deceptinfect_game_RagdollSystem.prototype.reveal = function(self,rag) 
  local newmodel = self:createProp();
  local this1 = newmodel.id;
  local x = __deceptinfect_game_Ragdoll;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_rag = retrieve_comp;
  c_rag.reveal = __deceptinfect_game_RagdollReveal.REVEAL;
  local this2 = rag.id;
  local x1 = __deceptinfect_game_Ragdoll;
  local retrieve_comp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[this2]:slice(2)[0];
  if (retrieve_comp1 == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
  end;
  c_rag.owner = retrieve_comp1.owner;
  newmodel:SetModel(__deceptinfect_Misc.infModel);
  newmodel:SetPos(rag:GetPos());
  newmodel:Spawn();
  local newlocpos = newmodel:GetBonePosition(0);
  local oldlocpos = rag:GetBonePosition(0);
  rag:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
  local _g = 0;
  local _g1 = rag:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local oldphysob = rag:GetPhysicsObjectNum(_g - 1);
    if (_G.IsValid(oldphysob)) then 
      oldphysob:EnableCollisions(false);
    end;
  end;
  local _g2 = 0;
  local _g3 = newmodel:GetPhysicsObjectCount() - 1;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i = _g2 - 1;
    local newphysob = newmodel:GetPhysicsObjectNum(i);
    if (_G.IsValid(newphysob)) then 
      local otherbone = rag:LookupBone(newmodel:GetBoneName(newmodel:TranslatePhysBoneToBone(i)));
      local _g21 = rag:TranslateBoneToPhysBone(otherbone);
      local oldphysob1 = (function() 
        local _hx_1
        if (_g21 == -1) then 
        _hx_1 = nil; else 
        _hx_1 = rag:GetPhysicsObjectNum(_g21); end
        return _hx_1
      end )();
      if (otherbone ~= nil) then 
        local _hx_2_bp_a, _hx_2_bp_b = rag:GetBonePosition(otherbone);
        newphysob:SetPos(_hx_2_bp_a, true);
        newphysob:SetAngles(_hx_2_bp_b);
        if (oldphysob1 ~= nil) then 
          newphysob:SetVelocityInstantaneous(oldphysob1:GetVelocity());
          newphysob:SetVelocity(oldphysob1:GetVelocity());
        end;
      else
        local this3 = newphysob:GetPos();
        local translate = this3 - newlocpos;
        newphysob:SetPos(translate + oldlocpos, true);
      end;
    end;
  end;
  rag:Remove();
end

__deceptinfect_game_RagdollSystem.prototype.__class__ =  __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_RagdollSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SlowMotionSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SlowMotionSystem.prototype)
  __deceptinfect_game_SlowMotionSystem.super(self)
  return self
end
__deceptinfect_game_SlowMotionSystem.super = function(self) 
  self.slowMotionEndTrig = __tink_core_SignalTrigger.new();
  self.endval = 0.03;
  self.startval = 0.25;
  self.finishtime = 1.5;
  self.slowMotion = __deceptinfect_game_SlowMotionState.INACTIVE;
  __deceptinfect_ecswip_System.super(self);
  self.slowMotionEnd = self.slowMotionEndTrig;
end
_hxClasses["deceptinfect.game.SlowMotionSystem"] = __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__name__ = "deceptinfect.game.SlowMotionSystem"
__deceptinfect_game_SlowMotionSystem.prototype = _hx_a();
__deceptinfect_game_SlowMotionSystem.prototype.slowMotion= nil;
__deceptinfect_game_SlowMotionSystem.prototype.finishtime= nil;
__deceptinfect_game_SlowMotionSystem.prototype.startval= nil;
__deceptinfect_game_SlowMotionSystem.prototype.endval= nil;
__deceptinfect_game_SlowMotionSystem.prototype.slowMotionEnd= nil;
__deceptinfect_game_SlowMotionSystem.prototype.slowMotionEndTrig= nil;
__deceptinfect_game_SlowMotionSystem.prototype.init_server = function(self) 
  __deceptinfect_GameManager.stateChange:listen(_hx_bind(self,self.stateChange));
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).newWinner:listen(_hx_bind(self,self.winChange));
end
__deceptinfect_game_SlowMotionSystem.prototype.winChange = function(self,x) 
  local tmp = x[1];
  if (tmp) == 0 or (tmp) == 1 then 
    _G.game.SetTimeScale(self.startval);
    self.slowMotion = __deceptinfect_game_SlowMotionState.ACTIVE(_G.RealTime() + self.finishtime, _G.RealTime());else end;
end
__deceptinfect_game_SlowMotionSystem.prototype.stateChange = function(self,x) 
  if (x[1] == 0) then 
    _G.game.ConsoleCommand("phys_timescale 1\n");
  end;
end
__deceptinfect_game_SlowMotionSystem.prototype.run_server = function(self) 
  local _g = self.slowMotion;
  if (_g[1] == 0) then 
    local _g2 = _g[3];
    local _g1 = _g[2];
    if (_G.RealTime() > _g1) then 
      self.slowMotion = __deceptinfect_game_SlowMotionState.FINISHED;
      _G.game.SetTimeScale(1);
      _G.game.ConsoleCommand("phys_timescale 0\n");
      local event = nil;
      self.slowMotionEndTrig.handlers:invoke(event);
      do return end;
    end;
    _G.game.SetTimeScale(_G.Lerp((_G.RealTime() - _g2) / (_g1 - _g2), self.startval, self.endval));
  end;
end

__deceptinfect_game_SlowMotionSystem.prototype.__class__ =  __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SlowMotionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_infection_InfectionLookSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionLookSystem.prototype)
  __deceptinfect_infection_InfectionLookSystem.super(self)
  return self
end
__deceptinfect_infection_InfectionLookSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.InfectionLookSystem"] = __deceptinfect_infection_InfectionLookSystem
__deceptinfect_infection_InfectionLookSystem.__name__ = "deceptinfect.infection.InfectionLookSystem"
__deceptinfect_infection_InfectionLookSystem.prototype = _hx_a();
__deceptinfect_infection_InfectionLookSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionLookInfo)[ent1];
    if (_g2[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        local c_look = _g2[2];
        _hx_tmp = _g1[2].player;
        local ply = _hx_tmp;
        local x = ply:GetEyeTrace().Entity;
        local _g11;
        if (_G.IsValid(x)) then 
          local _g = x.id;
          _g11 = (function() 
            local _hx_1
            if (_g == nil) then 
            _hx_1 = __haxe_ds_Option.None; else 
            _hx_1 = __haxe_ds_Option.Some(_g); end
            return _hx_1
          end )();
        else
          _g11 = __haxe_ds_Option.None;
        end;
        if (_g11[1] == 0) then 
          local _g21 = _g11[2];
          local _hx_tmp1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[_g21];
          if (_hx_tmp1[1] == 1) then 
            local id = _g21;
            if (c_look.lookat:addTime(id) > c_look.threshold) then 
              local isinfected;
              local inf;
              local _g12 = _hx_tmp1[2].infection;
              local inf1 = _g12[1];
              if (inf1) == 0 then 
                isinfected = false;
                inf = _g12[2][0];
              elseif (inf1) == 1 then 
                isinfected = true;
                inf = 100.0; end;
              local tmp = __deceptinfect_infection_InfectionLookSystem.infectioninfo;
              local x1 = __deceptinfect_ecswip_PlayerComponent;
              local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x1)[id]:slice(2)[0];
              if (retrieve_comp == nil) then 
                _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x1.__name__),0);
              end;
              tmp:send(_hx_o({__fields__={target=true,isinfected=true,inf=true},target=retrieve_comp.player,isinfected=isinfected,inf=inf}), ply, true);
              c_look.lookat:setTime(id, 2.0);
            end;
          else
            c_look.lookat:removeAllTimes();
          end;
        else
          c_look.lookat:removeAllTimes();
        end;
      end;
    end;
  end;
end

__deceptinfect_infection_InfectionLookSystem.prototype.__class__ =  __deceptinfect_infection_InfectionLookSystem
__deceptinfect_infection_InfectionLookSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_InfectionLookSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_ContaminationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_ContaminationSystem.prototype)
  __deceptinfect_radiation_ContaminationSystem.super(self)
  return self
end
__deceptinfect_radiation_ContaminationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.ContaminationSystem"] = __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__name__ = "deceptinfect.radiation.ContaminationSystem"
__deceptinfect_radiation_ContaminationSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_radiation_ContaminationSystem.prototype = _hx_a();
__deceptinfect_radiation_ContaminationSystem.prototype.run_server = function(self) 
  local vic = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (vic:hasNext()) do 
    local vic1 = vic:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[vic1];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_ContaminationAccepter)[vic1];
    local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadVictim)[vic1];
    if (_g3[1] == 1) then 
      if (_g2[1] == 1) then 
        if (_g1[1] == 1) then 
          local c_contamAccept = _g2[2];
          local c_rv = _g3[2];
          local c_vicpos = _g1[2];
          local produce = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
          local _hx_continue_2 = false;
          while (produce:hasNext()) do repeat 
            local produce1 = produce:next();
            local _g21 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[produce1];
            local _g31 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_ContaminationProducer)[produce1];
            local _g4 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadSource)[produce1];
            if (_g4[1] == 1) then 
              if (_g31[1] == 1) then 
                if (_g21[1] == 1) then 
                  local c_contamProduce = _g31[2];
                  local c_rs = _g4[2];
                  if (c_rs.attatch == vic1) then 
                    break;
                  end;
                  if (_g21[2]:get_pos():Distance(c_vicpos:get_pos()) < c_contamProduce.dist) then 
                    if (c_contamAccept.contam_time:addTime(produce1) > c_contamProduce.check) then 
                      c_contamAccept.contam_time:resetTime(produce1);
                      if (_G.math.random() < c_contamProduce.chance) then 
                        local tmp = c_contamProduce.type[1];
                        if (tmp) == 0 then 
                        elseif (tmp) == 1 then 
                          if (c_rv.affectedtype.h[c_rs.type] ~= nil) then 
                            break;
                          end;
                        elseif (tmp) == 2 then 
                          if (c_rv.affected.h[c_rs.base] ~= nil) then 
                            local _g22 = c_rs.lifetime;
                            local _g32 = c_rs.state;
                            if (_g32[1] == 0) then 
                              local _g41 = _g32[2];
                              if (_g41[1] == 1) then 
                                if (_g22[1] == 0) then 
                                  c_rs.state = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.FINITE(_G.CurTime() + _g22[2]));
                                end;
                              end;
                            end;
                            break;
                          end; end;
                        __haxe_Log.trace("Rolled successfully", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/ContaminationSystem.hx",lineNumber=54,className="deceptinfect.radiation.ContaminationSystem",methodName="run_server"}));
                        local rad;
                        local _g33 = c_contamProduce.nextoptions;
                        local rad1 = _g33[1];
                        if (rad1) == 0 then 
                          rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(_g33[2], vic1, c_rs.base);
                        elseif (rad1) == 1 then 
                          rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(c_rs.type, vic1, c_rs.base);
                        elseif (rad1) == 2 then 
                          local rad2 = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(c_rs.type, vic1, c_rs.base);
                          local x = __deceptinfect_radiation_RadSource;
                          local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[rad2]:slice(2)[0];
                          if (retrieve_comp == nil) then 
                            _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
                          end;
                          local c_rs1 = retrieve_comp;
                          c_rs1.lifetime = _g33[2];
                          __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):refreshTime(c_rs1);
                          rad = rad2; end;
                      end;
                    end;
                  else
                    c_contamAccept.contam_time:removeTime(produce1);
                  end;
                end;
              end;
            end;until true
            if _hx_continue_2 then 
            _hx_continue_2 = false;
            break;
            end;
            
          end;
        end;
      end;
    end;
  end;
end

__deceptinfect_radiation_ContaminationSystem.prototype.__class__ =  __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_ContaminationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_RadSourceSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadSourceSystem.prototype)
  __deceptinfect_radiation_RadSourceSystem.super(self)
  return self
end
__deceptinfect_radiation_RadSourceSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadSourceSystem"] = __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__name__ = "deceptinfect.radiation.RadSourceSystem"
__deceptinfect_radiation_RadSourceSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_radiation_RadSourceSystem.prototype = _hx_a();
__deceptinfect_radiation_RadSourceSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadSource)[ent1];
    if (_g1[1] == 1) then 
      local _g2 = _g1[2];
      local _g11 = _g2.state;
      if (_g11[1] == 0) then 
        local _g21 = _g11[2];
        if (_g21[1] == 1) then 
          if (_G.CurTime() > _g21[2]) then 
            local this1 = _g2.attatch;
            if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadVictim)[this1][1] == 1) then 
              self:disengage(ent1, _g2.attatch);
            end;
            __deceptinfect_ecswip_ComponentManager.removeEntity(ent1);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_radiation_RadSourceSystem.prototype.radSourceFromType = function(self,x,attatch,base) 
  local ret = __deceptinfect_radiation_RadiationTypes.types.h[x];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return self:newRadSource(ret, attatch, base) end
end
__deceptinfect_radiation_RadSourceSystem.prototype.refreshTime = function(self,x) 
  local _g = x.lifetime;
  local tmp;
  local tmp1 = _g[1];
  if (tmp1) == 0 then 
    tmp = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.FINITE(_G.CurTime() + _g[2]));
  elseif (tmp1) == 1 then 
    tmp = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.INFINITE); end;
  x.state = tmp;
end
__deceptinfect_radiation_RadSourceSystem.prototype.newRadSource = function(self,rso,attatch,base) 
  local rad = __deceptinfect_ecswip_ComponentManager.addEntity();
  local c_rs = __deceptinfect_radiation_RadSource.new(rso);
  __deceptinfect_ecswip_ComponentManager.addComponent(c_rs, rad);
  c_rs.base = (function() 
    local _hx_1
    if (base == nil) then 
    _hx_1 = rad; else 
    _hx_1 = base; end
    return _hx_1
  end )();
  self:attatchRad(rad, attatch);
  self:refreshTime(c_rs);
  local _g = rso.options;
  local tmp = _g[1];
  if (tmp) == 1 then 
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_radiation_RadiationProducer.new(_g[2]), rad);
  elseif (tmp) == 2 then 
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_radiation_RadiationProducer.new(_g[2]), rad);else end;
  local _g4 = rso.options;
  local tmp1 = _g4[1];
  if (tmp1) == 0 then 
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_radiation_ContaminationProducer.new(_g4[2]), rad);
  elseif (tmp1) == 2 then 
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_radiation_ContaminationProducer.new(_g4[3]), rad);else end;
  do return rad end
end
__deceptinfect_radiation_RadSourceSystem.prototype.attatchRad = function(self,rad,vic) 
  local x = __deceptinfect_radiation_RadSource;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[rad]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_rs = retrieve_comp;
  c_rs.attatch = vic;
  local c_rv;
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadVictim)[vic];
  if (_g[1] == 1) then 
    c_rv = _g[2];
  else
    __haxe_Log.trace("No radvictim found on victim", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/RadSourceSystem.hx",lineNumber=81,className="deceptinfect.radiation.RadSourceSystem",methodName="attatchRad"}));
    c_rv = __deceptinfect_radiation_RadVictim.new();
  end;
  c_rv.affected.h[c_rs.base] = true;
  c_rv.radiation.h[rad] = true;
  local key = c_rs.type;
  local _this = c_rv.affectedtype;
  if (rad == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = rad;
  end;
  local c_vir;
  local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[vic];
  local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_VirtualPosition)[vic];
  if (_g3[1] == 1) then 
    c_vir = _g3[2];
  else
    if (_g2[1] == 1) then 
      c_vir = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(_g2[2].entity));
    else
      __haxe_Log.trace(Std.string("Could not attatch to ent ") .. Std.string(vic), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/RadSourceSystem.hx",lineNumber=93,className="deceptinfect.radiation.RadSourceSystem",methodName="attatchRad"}));
      do return end;
    end;
  end;
  __deceptinfect_ecswip_ComponentManager.addComponent(c_vir, rad);
  local args = nil;
  __deceptinfect_ecswip_ComponentManager.getOrAdd(c_rs.attatch, __deceptinfect_statuses_Contaminated, args);
end
__deceptinfect_radiation_RadSourceSystem.prototype.disengage = function(self,radsource,vic) 
  local x = __deceptinfect_radiation_RadSource;
  local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[radsource]:slice(2)[0];
  if (retrieve_comp == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local c_rs = retrieve_comp;
  c_rs.attatch = nil;
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_radiation_RadVictim)[vic];
  if (_g[1] == 1) then 
    local c_rv = _g[2];
    c_rv.radiation:remove(radsource);
    c_rv.affected:remove(c_rs.base);
    c_rv.affectedtype:remove(c_rs.type);
  end;
  __deceptinfect_ecswip_ComponentManager.removeComponent(__deceptinfect_ecswip_VirtualPosition, radsource);
end

__deceptinfect_radiation_RadSourceSystem.prototype.__class__ =  __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadSourceSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_LowHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_LowHealthSystem.prototype)
  __deceptinfect_game_LowHealthSystem.super(self)
  return self
end
__deceptinfect_game_LowHealthSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.LowHealthSystem"] = __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__name__ = "deceptinfect.game.LowHealthSystem"
__deceptinfect_game_LowHealthSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_game_LowHealthSystem.prototype = _hx_a();
__deceptinfect_game_LowHealthSystem.prototype.run_server = function(self) 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    if (_g1[1] == 1) then 
      local _g2 = _g1[2];
      if (_g2.player:Health() < 25) then 
        local remap = (function(value) 
          do return function(outMin,outMax) 
            do return _G.math.Remap(value[0], 1, 25, outMin, outMax) end;
          end end;
        end)(_hx_tab_array({[0]=25 - _g2.player:Health()}, 1));
        local args = nil;
        __deceptinfect_ecswip_ComponentManager.getOrAdd(ent1, __deceptinfect_infection_InfVunerability, args).vun = remap(1.0, 1.6);
      end;
    end;
  end;
end

__deceptinfect_game_LowHealthSystem.prototype.__class__ =  __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_LowHealthSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_SystemManager.new = {}
_hxClasses["deceptinfect.ecswip.SystemManager"] = __deceptinfect_ecswip_SystemManager
__deceptinfect_ecswip_SystemManager.__name__ = "deceptinfect.ecswip.SystemManager"
__deceptinfect_ecswip_SystemManager.make = function() 
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_infection_InfectionSystem;
  _this.h[key] = __deceptinfect_infection_InfectionSystem.new();
  _this.k[key] = true;
  local _this1 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key1 = __deceptinfect_client_GeigerSystem;
  _this1.h[key1] = __deceptinfect_client_GeigerSystem.new();
  _this1.k[key1] = true;
  local _this2 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key2 = __deceptinfect_radiation_RadiationSystem;
  _this2.h[key2] = __deceptinfect_radiation_RadiationSystem.new();
  _this2.k[key2] = true;
  local _this3 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key3 = __deceptinfect_ecswip_GrabSystem;
  _this3.h[key3] = __deceptinfect_ecswip_GrabSystem.new();
  _this3.k[key3] = true;
  local _this4 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key4 = __deceptinfect_ecswip_HiddenHealthSystem;
  _this4.h[key4] = __deceptinfect_ecswip_HiddenHealthSystem.new();
  _this4.k[key4] = true;
  local _this5 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key5 = __deceptinfect_game_WinSystem;
  _this5.h[key5] = __deceptinfect_game_WinSystem.new();
  _this5.k[key5] = true;
  local _this6 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key6 = __deceptinfect_game_BatterySystem;
  _this6.h[key6] = __deceptinfect_game_BatterySystem.new();
  _this6.k[key6] = true;
  local _this7 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key7 = __deceptinfect_game_SpawnSystem;
  _this7.h[key7] = __deceptinfect_game_SpawnSystem.new();
  _this7.k[key7] = true;
  local _this8 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key8 = __deceptinfect_statuses_WalkthroughSystem;
  _this8.h[key8] = __deceptinfect_statuses_WalkthroughSystem.new();
  _this8.k[key8] = true;
  local _this9 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key9 = __deceptinfect_game_NestSystem;
  _this9.h[key9] = __deceptinfect_game_NestSystem.new();
  _this9.k[key9] = true;
  local _this10 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key10 = __deceptinfect_game_EvacSystem;
  _this10.h[key10] = __deceptinfect_game_EvacSystem.new();
  _this10.k[key10] = true;
  local _this11 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key11 = __deceptinfect_game_RagdollSystem;
  _this11.h[key11] = __deceptinfect_game_RagdollSystem.new();
  _this11.k[key11] = true;
  local _this12 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key12 = __deceptinfect_game_SlowMotionSystem;
  _this12.h[key12] = __deceptinfect_game_SlowMotionSystem.new();
  _this12.k[key12] = true;
  local _this13 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key13 = __deceptinfect_infection_InfectionLookSystem;
  _this13.h[key13] = __deceptinfect_infection_InfectionLookSystem.new();
  _this13.k[key13] = true;
  local _this14 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key14 = __deceptinfect_radiation_ContaminationSystem;
  _this14.h[key14] = __deceptinfect_radiation_ContaminationSystem.new();
  _this14.k[key14] = true;
  local _this15 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key15 = __deceptinfect_radiation_RadSourceSystem;
  _this15.h[key15] = __deceptinfect_radiation_RadSourceSystem.new();
  _this15.k[key15] = true;
  local _this16 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key16 = __deceptinfect_game_LowHealthSystem;
  _this16.h[key16] = __deceptinfect_game_LowHealthSystem.new();
  _this16.k[key16] = true;
end
__deceptinfect_ecswip_SystemManager.getSystem = function(cls) 
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[cls] end;
end
__deceptinfect_ecswip_SystemManager.getSystemExp = function(name) 
  local key = Type.resolveClass(name);
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[key] end;
end
_hx_exports["getSystem"] = __deceptinfect_ecswip_SystemManager.getSystemExp
__deceptinfect_ecswip_SystemManager.runAllSystems = function() 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:run();
  end;
end
__deceptinfect_ecswip_SystemManager.initAllSystems = function() 
  __deceptinfect_ecswip_SystemManager.make();
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:init();
  end;
end
_hxClasses["deceptinfect.ecswip.ChooseVirPos"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ENT","REAL"},2)}
__deceptinfect_ecswip_ChooseVirPos = _hxClasses["deceptinfect.ecswip.ChooseVirPos"];
__deceptinfect_ecswip_ChooseVirPos.ENT = function(x) local _x = _hx_tab_array({[0]="ENT",0,x,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 3); return _x; end 
__deceptinfect_ecswip_ChooseVirPos.REAL = function(vec,ang) local _x = _hx_tab_array({[0]="REAL",1,vec,ang,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 4); return _x; end 

__gmod_sent_ENT.new = {}
_hxClasses["gmod.sent.ENT"] = __gmod_sent_ENT
__gmod_sent_ENT.__name__ = "gmod.sent.ENT"
__gmod_sent_ENT.prototype = _hx_a();
__gmod_sent_ENT.prototype.Initialize = function(self) 
end
__gmod_sent_ENT.prototype.AcceptInput = function(self,inputName,activator,caller,data) 
  do return nil end
end
__gmod_sent_ENT.prototype.KeyValue = function(self,key,value) 
  do return nil end
end
__gmod_sent_ENT.prototype.OnReloaded = function(self) 
end
__gmod_sent_ENT.prototype.OnRemove = function(self) 
end
__gmod_sent_ENT.prototype.OnRestore = function(self) 
end
__gmod_sent_ENT.prototype.StoreOutput = function(self,name,info) 
end
__gmod_sent_ENT.prototype.Think = function(self) 
  do return nil end
end
__gmod_sent_ENT.prototype.TriggerOutput = function(self,output,activator,data) 
end
__gmod_sent_ENT.prototype.CalcAbsolutePosition = function(self,pos,ang) 
  do return nil end
end
__gmod_sent_ENT.prototype.CanProperty = function(self,ply,property) 
  do return nil end
end
__gmod_sent_ENT.prototype.DoImpactEffect = function(self,tr,damageType) 
  do return nil end
end
__gmod_sent_ENT.prototype.GravGunPickupAllowed = function(self,ply) 
  do return nil end
end
__gmod_sent_ENT.prototype.GravGunPunt = function(self,ply) 
  do return nil end
end
__gmod_sent_ENT.prototype.HandleAnimEvent = function(self,event,eventTime,cycle,type,options) 
end
__gmod_sent_ENT.prototype.IsJumpLegal = function(self,startPos,apex,endPos) 
  do return nil end
end
__gmod_sent_ENT.prototype.OnDuplicated = function(self,entTable) 
end
__gmod_sent_ENT.prototype.OnEntityCopyTableFinish = function(self,data) 
end
__gmod_sent_ENT.prototype.PostEntityPaste = function(self,ply,ent,createdEntities) 
end
__gmod_sent_ENT.prototype.PreEntityCopy = function(self) 
end
__gmod_sent_ENT.prototype.SetAutomaticFrameAdvance = function(self,enable) 
end
__gmod_sent_ENT.prototype.SetupDataTables = function(self) 
end

__gmod_sent_ENT.prototype.__class__ =  __gmod_sent_ENT

__gmod_sent_ENT_ANIM.new = function() 
  local self = _hx_new(__gmod_sent_ENT_ANIM.prototype)
  __gmod_sent_ENT_ANIM.super(self)
  return self
end
__gmod_sent_ENT_ANIM.super = function(self) 
  self.TYPE = "anim";
end
_hxClasses["gmod.sent.ENT_ANIM"] = __gmod_sent_ENT_ANIM
__gmod_sent_ENT_ANIM.__name__ = "gmod.sent.ENT_ANIM"
__gmod_sent_ENT_ANIM.prototype = _hx_a();
__gmod_sent_ENT_ANIM.prototype.TYPE= nil;
__gmod_sent_ENT_ANIM.prototype["self"]= nil;
__gmod_sent_ENT_ANIM.prototype.Blocked = function(self,other) 
end
__gmod_sent_ENT_ANIM.prototype.EndTouch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.OnTakeDamage = function(self,damage) 
end
__gmod_sent_ENT_ANIM.prototype.PhysicsCollide = function(self,colData,collider) 
end
__gmod_sent_ENT_ANIM.prototype.PhysicsSimulate = function(self,phys,deltaTime) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.PhysicsUpdate = function(self,phys) 
end
__gmod_sent_ENT_ANIM.prototype.StartTouch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.Touch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.UpdateTransmitState = function(self) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.Use = function(self,activator,caller,useType,value) 
end

__gmod_sent_ENT_ANIM.prototype.__class__ =  __gmod_sent_ENT_ANIM
__gmod_sent_ENT_ANIM.__super__ = __gmod_sent_ENT
setmetatable(__gmod_sent_ENT_ANIM.prototype,{__index=__gmod_sent_ENT.prototype})

__deceptinfect_ents_Di_battery.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_battery.prototype)
  __deceptinfect_ents_Di_battery.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_battery.super = function(self,curEnt) 
  self.added = false;
  self.id = nil;
  self.lastplayer = nil;
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_battery"] = __deceptinfect_ents_Di_battery
_hxClasses["deceptinfect.ents.Di_battery"] = __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__name__ = "deceptinfect.ents.Di_battery"
__deceptinfect_ents_Di_battery.prototype = _hx_a();
__deceptinfect_ents_Di_battery.prototype.properties= nil;
__deceptinfect_ents_Di_battery.prototype.lastplayer= nil;
__deceptinfect_ents_Di_battery.prototype.id= nil;
__deceptinfect_ents_Di_battery.prototype.added= nil;
__deceptinfect_ents_Di_battery.prototype.spawnLoc= nil;
__deceptinfect_ents_Di_battery.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/items/car_battery01.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  self["self"]:SetUseType(_G.SIMPLE_USE);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_BatterySource.new(), self.id);
end
__deceptinfect_ents_Di_battery.prototype.Use = function(self,activator,caller,useType,value) 
  if (self["self"]:IsPlayerHolding() or not activator:IsPlayer()) then 
    do return end;
  end;
  local _activator = activator;
  _activator:PickupObject(self["self"]);
  self.lastplayer = _activator;
end
__deceptinfect_ents_Di_battery.prototype.Touch = function(self,entity) 
  if (self.added) then 
    do return end;
  end;
  local _g = entity.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    if (__deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_BatterySystem):addBattery(self.id, _g1[2])) then 
      self.added = true;
      __haxe_Log.trace("Battery added :)", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ents/Di_battery.hx",lineNumber=61,className="deceptinfect.ents.Di_battery",methodName="Touch"}));
      self["self"]:Remove();
    end;
  end;
end

__deceptinfect_ents_Di_battery.prototype.__class__ =  __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_battery.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_charger.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_charger.prototype)
  __deceptinfect_ents_Di_charger.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_charger.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_charger"] = __deceptinfect_ents_Di_charger
_hxClasses["deceptinfect.ents.Di_charger"] = __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__name__ = "deceptinfect.ents.Di_charger"
__deceptinfect_ents_Di_charger.prototype = _hx_a();
__deceptinfect_ents_Di_charger.prototype.properties= nil;
__deceptinfect_ents_Di_charger.prototype.id= nil;
__deceptinfect_ents_Di_charger.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  physob:EnableMotion(false);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_BatteryAccepter.new(), self.id);
end

__deceptinfect_ents_Di_charger.prototype.__class__ =  __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_charger.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__gmod_sent_ENT_BRUSH.new = function() 
  local self = _hx_new(__gmod_sent_ENT_BRUSH.prototype)
  __gmod_sent_ENT_BRUSH.super(self)
  return self
end
__gmod_sent_ENT_BRUSH.super = function(self) 
  self.TYPE = "brush";
end
_hxClasses["gmod.sent.ENT_BRUSH"] = __gmod_sent_ENT_BRUSH
__gmod_sent_ENT_BRUSH.__name__ = "gmod.sent.ENT_BRUSH"
__gmod_sent_ENT_BRUSH.prototype = _hx_a();
__gmod_sent_ENT_BRUSH.prototype.TYPE= nil;
__gmod_sent_ENT_BRUSH.prototype["self"]= nil;
__gmod_sent_ENT_BRUSH.prototype.StartTouch = function(self,ent) 
end
__gmod_sent_ENT_BRUSH.prototype.EndTouch = function(self,ent) 
end
__gmod_sent_ENT_BRUSH.prototype.Touch = function(self,ent) 
end

__gmod_sent_ENT_BRUSH.prototype.__class__ =  __gmod_sent_ENT_BRUSH
__gmod_sent_ENT_BRUSH.__super__ = __gmod_sent_ENT
setmetatable(__gmod_sent_ENT_BRUSH.prototype,{__index=__gmod_sent_ENT.prototype})

__deceptinfect_ents_Di_evac_zone.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_evac_zone.prototype)
  __deceptinfect_ents_Di_evac_zone.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_evac_zone.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_brush"});
  __gmod_sent_ENT_BRUSH.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
_hxClasses["deceptinfect.ents.Di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__name__ = "deceptinfect.ents.Di_evac_zone"
__deceptinfect_ents_Di_evac_zone.prototype = _hx_a();
__deceptinfect_ents_Di_evac_zone.prototype.properties= nil;
__deceptinfect_ents_Di_evac_zone.prototype.id= nil;
__deceptinfect_ents_Di_evac_zone.prototype.Initialize = function(self) 
  self["self"]:SetCollisionBounds(_G.Vector(-250, -250, -250), _G.Vector(250, 250, 250));
  self["self"]:SetTrigger(true);
  self["self"]:SetCollisionGroup(_G.COLLISION_GROUP_PLAYER);
  self["self"]:UseTriggerBounds(true, 0);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_EvacZone.new(), self.id);
end
__deceptinfect_ents_Di_evac_zone.prototype.setPoints = function(self,minmax) 
  self["self"]:SetCollisionBoundsWS(minmax.mins, minmax.maxs);
end
__deceptinfect_ents_Di_evac_zone.prototype.StartTouch = function(self,ent) 
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local tmp = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem);
    local this1 = self.id;
    local x = __deceptinfect_game_EvacZone;
    local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0];
    if (retrieve_comp == nil) then 
      _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
    end;
    tmp:touched(_g1[2], retrieve_comp);
  end;
end
__deceptinfect_ents_Di_evac_zone.prototype.EndTouch = function(self,ent) 
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local tmp = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem);
    local this1 = self.id;
    local x = __deceptinfect_game_EvacZone;
    local retrieve_comp = __deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0];
    if (retrieve_comp == nil) then 
      _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
    end;
    tmp:leave(_g1[2], retrieve_comp);
  end;
end

__deceptinfect_ents_Di_evac_zone.prototype.__class__ =  __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__super__ = __gmod_sent_ENT_BRUSH
setmetatable(__deceptinfect_ents_Di_evac_zone.prototype,{__index=__gmod_sent_ENT_BRUSH.prototype})

__deceptinfect_ents_Di_flare.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_flare.prototype)
  __deceptinfect_ents_Di_flare.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_flare.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_flare"] = __deceptinfect_ents_Di_flare
_hxClasses["deceptinfect.ents.Di_flare"] = __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__name__ = "deceptinfect.ents.Di_flare"
__deceptinfect_ents_Di_flare.prototype = _hx_a();
__deceptinfect_ents_Di_flare.prototype.properties= nil;
__deceptinfect_ents_Di_flare.prototype.id= nil;
__deceptinfect_ents_Di_flare.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_FlareComponent.new(), self.id);
end
__deceptinfect_ents_Di_flare.prototype.Touch = function(self,entity) 
  local _g = entity.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem):addFlare(self.id, _g1[2]);
  end;
end
__deceptinfect_ents_Di_flare.prototype.Use = function(self,activator,caller,useType,value) 
  if (self["self"]:IsPlayerHolding() or not activator:IsPlayer()) then 
    do return end;
  end;
  activator:PickupObject(self["self"]);
end

__deceptinfect_ents_Di_flare.prototype.__class__ =  __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_flare.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_nest.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_nest.prototype)
  __deceptinfect_ents_Di_nest.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_nest.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_nest"] = __deceptinfect_ents_Di_nest
_hxClasses["deceptinfect.ents.Di_nest"] = __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__name__ = "deceptinfect.ents.Di_nest"
__deceptinfect_ents_Di_nest.prototype = _hx_a();
__deceptinfect_ents_Di_nest.prototype.properties= nil;
__deceptinfect_ents_Di_nest.prototype.id= nil;
__deceptinfect_ents_Di_nest.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_NestComponent.new(), self.id);
end
__deceptinfect_ents_Di_nest.prototype.Think = function(self) 
  local this1 = self.id;
  local x = __deceptinfect_game_NestComponent;
  if (__deceptinfect_ecswip_ComponentManager.lazyInit(x)[this1]:slice(2)[0] == nil) then 
    _G.error(Std.string("Component does not exist at sure statement ") .. Std.string(x.__name__),0);
  end;
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local this2 = self.id;
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_NestComponent)[this2];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectedComponent)[ent1];
    local _g3 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_PlayerComponent)[ent1];
    if (_g3[1] == 1) then 
      local _g4 = _g3[2];
      if (_g1[1] == 1) then 
        if (_g1[2].nestState[1] == 1) then 
          self["self"]:SetPreventTransmit(_g4.player, false);
        else
          local tmp = _g2[1];
          if (tmp) == 0 then 
            self["self"]:SetPreventTransmit(_g4.player, true);
          elseif (tmp) == 1 then 
            self["self"]:SetPreventTransmit(_g4.player, false); end;
        end;
      end;
    end;
  end;
  do return nil end
end
__deceptinfect_ents_Di_nest.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return _hx_o({__fields__={HitPos=true,Fraction=true},HitPos=startpos,Fraction=0}) end
end

__deceptinfect_ents_Di_nest.prototype.__class__ =  __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_nest.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_ragdoll.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_ragdoll.prototype)
  __deceptinfect_ents_Di_ragdoll.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_ragdoll.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
_hxClasses["deceptinfect.ents.Di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__name__ = "deceptinfect.ents.Di_ragdoll"
__deceptinfect_ents_Di_ragdoll.prototype = _hx_a();
__deceptinfect_ents_Di_ragdoll.prototype.properties= nil;
__deceptinfect_ents_Di_ragdoll.prototype.owner= nil;
__deceptinfect_ents_Di_ragdoll.prototype.id= nil;
__deceptinfect_ents_Di_ragdoll.prototype.Initialize = function(self) 
  self["self"]:SetModel(self.owner:GetModel());
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Ragdoll.new(), self.id);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_CleanupEnt.new(), self.id);
end

__deceptinfect_ents_Di_ragdoll.prototype.__class__ =  __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_ragdoll.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_game_AliveComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_AliveComponent.prototype)
  __deceptinfect_game_AliveComponent.super(self)
  return self
end
__deceptinfect_game_AliveComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.AliveComponent"] = __deceptinfect_game_AliveComponent
__deceptinfect_game_AliveComponent.__name__ = "deceptinfect.game.AliveComponent"
__deceptinfect_game_AliveComponent.prototype = _hx_a();

__deceptinfect_game_AliveComponent.prototype.__class__ =  __deceptinfect_game_AliveComponent
__deceptinfect_game_AliveComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_AliveComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_BatteryAccepter.new = function() 
  local self = _hx_new(__deceptinfect_game_BatteryAccepter.prototype)
  __deceptinfect_game_BatteryAccepter.super(self)
  return self
end
__deceptinfect_game_BatteryAccepter.super = function(self) 
  self.status = __deceptinfect_game_AccepterStatus.AVALIABLE;
  self.satisfy = 100.0;
  self.decay = 0.01;
  self.charge = 0.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.BatteryAccepter"] = __deceptinfect_game_BatteryAccepter
__deceptinfect_game_BatteryAccepter.__name__ = "deceptinfect.game.BatteryAccepter"
__deceptinfect_game_BatteryAccepter.prototype = _hx_a();
__deceptinfect_game_BatteryAccepter.prototype.charge= nil;
__deceptinfect_game_BatteryAccepter.prototype.decay= nil;
__deceptinfect_game_BatteryAccepter.prototype.satisfy= nil;
__deceptinfect_game_BatteryAccepter.prototype.status= nil;

__deceptinfect_game_BatteryAccepter.prototype.__class__ =  __deceptinfect_game_BatteryAccepter
__deceptinfect_game_BatteryAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_BatteryAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.AccepterStatus"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="AVALIABLE","SATISIFED","UNAVALIABLE"},3)}
__deceptinfect_game_AccepterStatus = _hxClasses["deceptinfect.game.AccepterStatus"];
__deceptinfect_game_AccepterStatus.AVALIABLE = _hx_tab_array({[0]="AVALIABLE",0,__enum__ = __deceptinfect_game_AccepterStatus},2)

__deceptinfect_game_AccepterStatus.SATISIFED = _hx_tab_array({[0]="SATISIFED",1,__enum__ = __deceptinfect_game_AccepterStatus},2)

__deceptinfect_game_AccepterStatus.UNAVALIABLE = function(x) local _x = _hx_tab_array({[0]="UNAVALIABLE",2,x,__enum__=__deceptinfect_game_AccepterStatus}, 3); return _x; end 

__deceptinfect_game_BatterySource.new = function() 
  local self = _hx_new(__deceptinfect_game_BatterySource.prototype)
  __deceptinfect_game_BatterySource.super(self)
  return self
end
__deceptinfect_game_BatterySource.super = function(self) 
  self.charge = 25.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.BatterySource"] = __deceptinfect_game_BatterySource
__deceptinfect_game_BatterySource.__name__ = "deceptinfect.game.BatterySource"
__deceptinfect_game_BatterySource.prototype = _hx_a();
__deceptinfect_game_BatterySource.prototype.charge= nil;

__deceptinfect_game_BatterySource.prototype.__class__ =  __deceptinfect_game_BatterySource
__deceptinfect_game_BatterySource.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_BatterySource.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_CleanupEnt.new = function() 
  local self = _hx_new(__deceptinfect_game_CleanupEnt.prototype)
  __deceptinfect_game_CleanupEnt.super(self)
  return self
end
__deceptinfect_game_CleanupEnt.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.CleanupEnt"] = __deceptinfect_game_CleanupEnt
__deceptinfect_game_CleanupEnt.__name__ = "deceptinfect.game.CleanupEnt"
__deceptinfect_game_CleanupEnt.prototype = _hx_a();

__deceptinfect_game_CleanupEnt.prototype.__class__ =  __deceptinfect_game_CleanupEnt
__deceptinfect_game_CleanupEnt.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_CleanupEnt.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.new = {}
_hxClasses["deceptinfect.game._EvacSystem.INT_EvacState_Impl_"] = __deceptinfect_game__EvacSystem_INT_EvacState_Impl_
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.__name__ = "deceptinfect.game._EvacSystem.INT_EvacState_Impl_"
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    do return 1 end;
  elseif (tmp) == 2 then 
    do return 2 end; end;
end

__deceptinfect_game_EvacZone.new = function() 
  local self = _hx_new(__deceptinfect_game_EvacZone.prototype)
  __deceptinfect_game_EvacZone.super(self)
  return self
end
__deceptinfect_game_EvacZone.super = function(self) 
  self.state = __deceptinfect_game_EvacState.NOT_ACTIVE;
  self.leavetime = 25.0;
  self.arrivetime = 10.0;
  self.blocked = __haxe_ds_IntMap.new();
  self.in_zone = __haxe_ds_IntMap.new();
  self.touched = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.EvacZone"] = __deceptinfect_game_EvacZone
__deceptinfect_game_EvacZone.__name__ = "deceptinfect.game.EvacZone"
__deceptinfect_game_EvacZone.prototype = _hx_a();
__deceptinfect_game_EvacZone.prototype.touched= nil;
__deceptinfect_game_EvacZone.prototype.in_zone= nil;
__deceptinfect_game_EvacZone.prototype.blocked= nil;
__deceptinfect_game_EvacZone.prototype.arrivetime= nil;
__deceptinfect_game_EvacZone.prototype.leavetime= nil;
__deceptinfect_game_EvacZone.prototype.state= nil;

__deceptinfect_game_EvacZone.prototype.__class__ =  __deceptinfect_game_EvacZone
__deceptinfect_game_EvacZone.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_EvacZone.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.EvacState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_ACTIVE","ARRIVING","LEAVING"},3)}
__deceptinfect_game_EvacState = _hxClasses["deceptinfect.game.EvacState"];
__deceptinfect_game_EvacState.NOT_ACTIVE = _hx_tab_array({[0]="NOT_ACTIVE",0,__enum__ = __deceptinfect_game_EvacState},2)

__deceptinfect_game_EvacState.ARRIVING = function(time) local _x = _hx_tab_array({[0]="ARRIVING",1,time,__enum__=__deceptinfect_game_EvacState}, 3); return _x; end 
__deceptinfect_game_EvacState.LEAVING = function(time) local _x = _hx_tab_array({[0]="LEAVING",2,time,__enum__=__deceptinfect_game_EvacState}, 3); return _x; end 

__deceptinfect_game_FlareComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_FlareComponent.prototype)
  __deceptinfect_game_FlareComponent.super(self)
  return self
end
__deceptinfect_game_FlareComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.FlareComponent"] = __deceptinfect_game_FlareComponent
__deceptinfect_game_FlareComponent.__name__ = "deceptinfect.game.FlareComponent"
__deceptinfect_game_FlareComponent.prototype = _hx_a();

__deceptinfect_game_FlareComponent.prototype.__class__ =  __deceptinfect_game_FlareComponent
__deceptinfect_game_FlareComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_FlareComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_InEvacZone.new = function() 
  local self = _hx_new(__deceptinfect_game_InEvacZone.prototype)
  __deceptinfect_game_InEvacZone.super(self)
  return self
end
__deceptinfect_game_InEvacZone.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.InEvacZone"] = __deceptinfect_game_InEvacZone
__deceptinfect_game_InEvacZone.__name__ = "deceptinfect.game.InEvacZone"
__deceptinfect_game_InEvacZone.prototype = _hx_a();

__deceptinfect_game_InEvacZone.prototype.__class__ =  __deceptinfect_game_InEvacZone
__deceptinfect_game_InEvacZone.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_InEvacZone.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_KeepRestart.new = function() 
  local self = _hx_new(__deceptinfect_game_KeepRestart.prototype)
  __deceptinfect_game_KeepRestart.super(self)
  return self
end
__deceptinfect_game_KeepRestart.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.KeepRestart"] = __deceptinfect_game_KeepRestart
__deceptinfect_game_KeepRestart.__name__ = "deceptinfect.game.KeepRestart"
__deceptinfect_game_KeepRestart.prototype = _hx_a();

__deceptinfect_game_KeepRestart.prototype.__class__ =  __deceptinfect_game_KeepRestart
__deceptinfect_game_KeepRestart.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_KeepRestart.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_NestComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_NestComponent.prototype)
  __deceptinfect_game_NestComponent.super(self)
  return self
end
__deceptinfect_game_NestComponent.super = function(self) 
  self.rate_threshold_max = 75.0;
  self.rate_threshold_min = 10.0;
  self.radius_end = 1000;
  self.radius_start = 500;
  self.rate_start = 5.0;
  self.rate_end = 7.0;
  self.health = 1000.0;
  self.nestState = __deceptinfect_game_NestState.INVISIBLE;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.NestComponent"] = __deceptinfect_game_NestComponent
__deceptinfect_game_NestComponent.__name__ = "deceptinfect.game.NestComponent"
__deceptinfect_game_NestComponent.prototype = _hx_a();
__deceptinfect_game_NestComponent.prototype.nestState= nil;
__deceptinfect_game_NestComponent.prototype.health= nil;
__deceptinfect_game_NestComponent.prototype.rate_end= nil;
__deceptinfect_game_NestComponent.prototype.rate_start= nil;
__deceptinfect_game_NestComponent.prototype.radius_start= nil;
__deceptinfect_game_NestComponent.prototype.radius_end= nil;
__deceptinfect_game_NestComponent.prototype.rate_threshold_min= nil;
__deceptinfect_game_NestComponent.prototype.rate_threshold_max= nil;

__deceptinfect_game_NestComponent.prototype.__class__ =  __deceptinfect_game_NestComponent
__deceptinfect_game_NestComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_NestComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.NestState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="INVISIBLE","VISIBLE","DEAD"},3)}
__deceptinfect_game_NestState = _hxClasses["deceptinfect.game.NestState"];
__deceptinfect_game_NestState.INVISIBLE = _hx_tab_array({[0]="INVISIBLE",0,__enum__ = __deceptinfect_game_NestState},2)

__deceptinfect_game_NestState.VISIBLE = _hx_tab_array({[0]="VISIBLE",1,__enum__ = __deceptinfect_game_NestState},2)

__deceptinfect_game_NestState.DEAD = _hx_tab_array({[0]="DEAD",2,__enum__ = __deceptinfect_game_NestState},2)


__deceptinfect_game_Ragdoll.new = function() 
  local self = _hx_new(__deceptinfect_game_Ragdoll.prototype)
  __deceptinfect_game_Ragdoll.super(self)
  return self
end
__deceptinfect_game_Ragdoll.super = function(self) 
  self.reveal = __deceptinfect_game_RagdollReveal.NO_REVEAL;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.Ragdoll"] = __deceptinfect_game_Ragdoll
__deceptinfect_game_Ragdoll.__name__ = "deceptinfect.game.Ragdoll"
__deceptinfect_game_Ragdoll.prototype = _hx_a();
__deceptinfect_game_Ragdoll.prototype.reveal= nil;
__deceptinfect_game_Ragdoll.prototype.owner= nil;

__deceptinfect_game_Ragdoll.prototype.__class__ =  __deceptinfect_game_Ragdoll
__deceptinfect_game_Ragdoll.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_Ragdoll.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.RagdollReveal"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WAIT","REVEAL","NO_REVEAL"},3)}
__deceptinfect_game_RagdollReveal = _hxClasses["deceptinfect.game.RagdollReveal"];
__deceptinfect_game_RagdollReveal.WAIT = function(time) local _x = _hx_tab_array({[0]="WAIT",0,time,__enum__=__deceptinfect_game_RagdollReveal}, 3); return _x; end 
__deceptinfect_game_RagdollReveal.REVEAL = _hx_tab_array({[0]="REVEAL",1,__enum__ = __deceptinfect_game_RagdollReveal},2)

__deceptinfect_game_RagdollReveal.NO_REVEAL = _hx_tab_array({[0]="NO_REVEAL",2,__enum__ = __deceptinfect_game_RagdollReveal},2)

_hxClasses["deceptinfect.game.SlowMotionState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","INACTIVE","FINISHED"},3)}
__deceptinfect_game_SlowMotionState = _hxClasses["deceptinfect.game.SlowMotionState"];
__deceptinfect_game_SlowMotionState.ACTIVE = function(target,start) local _x = _hx_tab_array({[0]="ACTIVE",0,target,start,__enum__=__deceptinfect_game_SlowMotionState}, 4); return _x; end 
__deceptinfect_game_SlowMotionState.INACTIVE = _hx_tab_array({[0]="INACTIVE",1,__enum__ = __deceptinfect_game_SlowMotionState},2)

__deceptinfect_game_SlowMotionState.FINISHED = _hx_tab_array({[0]="FINISHED",2,__enum__ = __deceptinfect_game_SlowMotionState},2)

_hxClasses["deceptinfect.game.SpawnClaim"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UNCLAIMED","CLAIMED"},2)}
__deceptinfect_game_SpawnClaim = _hxClasses["deceptinfect.game.SpawnClaim"];
__deceptinfect_game_SpawnClaim.UNCLAIMED = _hx_tab_array({[0]="UNCLAIMED",0,__enum__ = __deceptinfect_game_SpawnClaim},2)

__deceptinfect_game_SpawnClaim.CLAIMED = function(e) local _x = _hx_tab_array({[0]="CLAIMED",1,e,__enum__=__deceptinfect_game_SpawnClaim}, 3); return _x; end 

__deceptinfect_game_Spawn.new = function(parent,vec) 
  local self = _hx_new(__deceptinfect_game_Spawn.prototype)
  __deceptinfect_game_Spawn.super(self,parent,vec)
  return self
end
__deceptinfect_game_Spawn.super = function(self,parent,vec) 
  self.distOrder = _hx_tab_array({}, 0);
  self.distStore = __haxe_ds_IntMap.new();
  self.claimed = __deceptinfect_game_SpawnClaim.UNCLAIMED;
  self.vec = vec;
  self.parent = parent;
  self.id = parent.spawns.length;
end
_hxClasses["deceptinfect.game.Spawn"] = __deceptinfect_game_Spawn
__deceptinfect_game_Spawn.__name__ = "deceptinfect.game.Spawn"
__deceptinfect_game_Spawn.prototype = _hx_a();
__deceptinfect_game_Spawn.prototype.vec= nil;
__deceptinfect_game_Spawn.prototype.parent= nil;
__deceptinfect_game_Spawn.prototype.id= nil;
__deceptinfect_game_Spawn.prototype.claimed= nil;
__deceptinfect_game_Spawn.prototype.distStore= nil;
__deceptinfect_game_Spawn.prototype.distOrder= nil;
__deceptinfect_game_Spawn.prototype.maxdistID= nil;
__deceptinfect_game_Spawn.prototype.mindistID= nil;
__deceptinfect_game_Spawn.prototype.getRandomFarAwaySpawn = function(self) 
  do return _G.math.random(_G.math.floor(self.distOrder.length / 2), self.distOrder.length - 1) end
end
__deceptinfect_game_Spawn.prototype.getRandomSpawnMinDistAway = function(self,curSpawns) 
  local total = __haxe_ds_IntMap.new();
  local min = _G.math.huge;
  local max = -1.0;
  local _g = 0;
  while (_g < curSpawns.length) do 
    local _sp = curSpawns[_g];
    _g = _g + 1;
    local sp = self.parent.spawns[_sp];
    __haxe_Log.trace(Std.string(Std.string(Std.string("id : ") .. Std.string(_sp)) .. Std.string(" stuff : ")) .. Std.string(sp.distStore:toString()), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=71,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    local _g1 = __haxe_iterators_MapKeyValueIterator.new(sp.distStore);
    while (_g1:hasNext()) do 
      local _g11 = _g1:next();
      local id = _g11.key;
      local dist = _g11.value;
      __haxe_Log.trace(Std.string(Std.string(Std.string(Std.string(Std.string("my id : ") .. Std.string(_sp)) .. Std.string(" thier id : ")) .. Std.string(id)) .. Std.string(" boogie : ")) .. Std.string(Std.string(self.parent.spawns[id].claimed)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=74,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
      if (self.parent.spawns[id].claimed == __deceptinfect_game_SpawnClaim.UNCLAIMED) then 
        local ret = total.h[id];
        if (ret == __haxe_ds_IntMap.tnull) then 
          ret = nil;
        end;
        __haxe_Log.trace(ret, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=76,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        local ret1 = total.h[id];
        if (ret1 == __haxe_ds_IntMap.tnull) then 
          ret1 = nil;
        end;
        local _g2 = ret1;
        local v = (function() 
          local _hx_1
          if (_g2 == nil) then 
          _hx_1 = dist; else 
          _hx_1 = _g2 + dist; end
          return _hx_1
        end )();
        if (v == nil) then 
          total.h[id] = __haxe_ds_IntMap.tnull;
        else
          total.h[id] = v;
        end;
        local ret2 = total.h[id];
        if (ret2 == __haxe_ds_IntMap.tnull) then 
          ret2 = nil;
        end;
        if (ret2 > max) then 
          local ret3 = total.h[id];
          if (ret3 == __haxe_ds_IntMap.tnull) then 
            ret3 = nil;
          end;
          local max1 = ret3;
          max = max1;
          __haxe_Log.trace(Std.string("new max ") .. Std.string(max1), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=85,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        end;
        local ret4 = total.h[id];
        if (ret4 == __haxe_ds_IntMap.tnull) then 
          ret4 = nil;
        end;
        if (ret4 < min) then 
          local ret5 = total.h[id];
          if (ret5 == __haxe_ds_IntMap.tnull) then 
            ret5 = nil;
          end;
          local min1 = ret5;
          min = min1;
          __haxe_Log.trace(Std.string("new min ") .. Std.string(min1), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=89,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        end;
      end;
    end;
  end;
  local mindist = ((max - min) * 0.4) + min;
  local luckydraw = _hx_tab_array({}, 0);
  local _g12 = __haxe_iterators_MapKeyValueIterator.new(total);
  while (_g12:hasNext()) do 
    local _g21 = _g12:next();
    if (_g21.value > mindist) then 
      luckydraw:push(_g21.key);
    end;
  end;
  if (luckydraw.length == 0) then 
    __haxe_Log.trace("Not enough spawns far away enough to use algo.", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=104,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    local id1 = self:getRandomFarAwaySpawn();
    __haxe_Log.trace(Std.string("id chosen ") .. Std.string(id1), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=106,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    do return self.parent.spawns[id1] end;
  else
    local index = _G.math.random(0, luckydraw.length - 1);
    local id2 = luckydraw[index];
    __haxe_Log.trace(luckydraw, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=112,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    __haxe_Log.trace(Std.string(Std.string(Std.string("id chosen ") .. Std.string(id2)) .. Std.string(" index ")) .. Std.string(index), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=113,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    do return self.parent.spawns[id2] end;
  end;
end
__deceptinfect_game_Spawn.prototype.getRandomSpawns = function(self,noSpawns) 
  local rtn = _hx_tab_array({}, 0);
  local curspawns = _hx_tab_array({[0]=self.id}, 1);
  local _g = 0;
  while (_g < noSpawns) do 
    _g = _g + 1;
    local i = _g - 1;
    __haxe_Log.trace(curspawns, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=124,className="deceptinfect.game.Spawn",methodName="getRandomSpawns"}));
    local newspawn = self:getRandomSpawnMinDistAway(curspawns);
    curspawns[i] = newspawn.id;
    rtn[i] = newspawn;
  end;
  do return rtn end
end
__deceptinfect_game_Spawn.prototype.spawn = function(self,ent) 
  self.claimed = __deceptinfect_game_SpawnClaim.CLAIMED(ent);
  ent:SetPos(self.vec);
  ent:Spawn();
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local _g11 = _g1[2];
    __haxe_Log.trace(_g11, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=138,className="deceptinfect.game.Spawn",methodName="spawn"}));
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Spawned.new(self), _g11);
  end;
end
__deceptinfect_game_Spawn.prototype.calculateDist = function(self,other) 
  local dist = self.vec:DistToSqr(other.vec);
  local key = other.id;
  local _this = self.distStore;
  if (dist == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = dist;
  end;
  local tmp;
  if (self.maxdistID ~= nil) then 
    local ret = self.distStore.h[self.maxdistID];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    tmp = dist > ret;
  else
    tmp = true;
  end;
  if (tmp) then 
    self.maxdistID = other.id;
  end;
  local tmp1;
  if (self.mindistID ~= nil) then 
    local ret1 = self.distStore.h[self.mindistID];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    tmp1 = dist < ret1;
  else
    tmp1 = true;
  end;
  if (tmp1) then 
    self.mindistID = other.id;
  end;
  self:insertNewSortedDist(other);
end
__deceptinfect_game_Spawn.prototype.insertNewSortedDist = function(self,other) 
  local i = 0;
  local insert = self.distOrder.length - 1;
  local _g = 0;
  local _g1 = self.distOrder;
  while (_g < _g1.length) do 
    local spawnid = _g1[_g];
    _g = _g + 1;
    local ret = self.distStore.h[spawnid];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local ret1 = self.distStore.h[other.id];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    if (ret > ret1) then 
      insert = i;
      break;
    end;
    i = i + 1;
  end;
  self.distOrder[insert] = other.id;
end

__deceptinfect_game_Spawn.prototype.__class__ =  __deceptinfect_game_Spawn

__deceptinfect_game_BoundsSpawn.new = function(parent,vec,bounds) 
  local self = _hx_new(__deceptinfect_game_BoundsSpawn.prototype)
  __deceptinfect_game_BoundsSpawn.super(self,parent,vec,bounds)
  return self
end
__deceptinfect_game_BoundsSpawn.super = function(self,parent,vec,bounds) 
  __deceptinfect_game_Spawn.super(self,parent,vec);
  self.bounds = bounds;
end
_hxClasses["deceptinfect.game.BoundsSpawn"] = __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__name__ = "deceptinfect.game.BoundsSpawn"
__deceptinfect_game_BoundsSpawn.prototype = _hx_a();
__deceptinfect_game_BoundsSpawn.prototype.bounds= nil;
__deceptinfect_game_BoundsSpawn.prototype.spawn = function(self,ent) 
  self.claimed = __deceptinfect_game_SpawnClaim.CLAIMED(ent);
  ent:SetPos(self.vec);
  ent:Spawn();
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local _g11 = _g1[2];
    __haxe_Log.trace(_g11, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=201,className="deceptinfect.game.BoundsSpawn",methodName="spawn"}));
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Spawned.new(self), _g11);
  end;
  ent:SetCollisionBoundsWS(self.bounds.mins, self.bounds.maxs);
end

__deceptinfect_game_BoundsSpawn.prototype.__class__ =  __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__super__ = __deceptinfect_game_Spawn
setmetatable(__deceptinfect_game_BoundsSpawn.prototype,{__index=__deceptinfect_game_Spawn.prototype})

__deceptinfect_game_Spawned.new = function(sp) 
  local self = _hx_new(__deceptinfect_game_Spawned.prototype)
  __deceptinfect_game_Spawned.super(self,sp)
  return self
end
__deceptinfect_game_Spawned.super = function(self,sp) 
  __deceptinfect_ecswip_Component.super(self);
  self.spawn = sp;
end
_hxClasses["deceptinfect.game.Spawned"] = __deceptinfect_game_Spawned
__deceptinfect_game_Spawned.__name__ = "deceptinfect.game.Spawned"
__deceptinfect_game_Spawned.prototype = _hx_a();
__deceptinfect_game_Spawned.prototype.spawn= nil;

__deceptinfect_game_Spawned.prototype.__class__ =  __deceptinfect_game_Spawned
__deceptinfect_game_Spawned.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_Spawned.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_StatInfo.new = function() 
  local self = _hx_new(__deceptinfect_game_StatInfo.prototype)
  __deceptinfect_game_StatInfo.super(self)
  return self
end
__deceptinfect_game_StatInfo.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.StatInfo"] = __deceptinfect_game_StatInfo
__deceptinfect_game_StatInfo.__name__ = "deceptinfect.game.StatInfo"
__deceptinfect_game_StatInfo.prototype = _hx_a();
__deceptinfect_game_StatInfo.prototype.name= nil;
__deceptinfect_game_StatInfo.prototype.inf= nil;
__deceptinfect_game_StatInfo.prototype.health= nil;

__deceptinfect_game_StatInfo.prototype.__class__ =  __deceptinfect_game_StatInfo
__deceptinfect_game_StatInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_StatInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_Statue.new = function() 
  local self = _hx_new(__deceptinfect_game_Statue.prototype)
  __deceptinfect_game_Statue.super(self)
  return self
end
__deceptinfect_game_Statue.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.Statue"] = __deceptinfect_game_Statue
__deceptinfect_game_Statue.__name__ = "deceptinfect.game.Statue"
__deceptinfect_game_Statue.prototype = _hx_a();

__deceptinfect_game_Statue.prototype.__class__ =  __deceptinfect_game_Statue
__deceptinfect_game_Statue.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_Statue.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.Win"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WIN_HUMAN","WIN_INF","DRAW"},3)}
__deceptinfect_game_Win = _hxClasses["deceptinfect.game.Win"];
__deceptinfect_game_Win.WIN_HUMAN = _hx_tab_array({[0]="WIN_HUMAN",0,__enum__ = __deceptinfect_game_Win},2)

__deceptinfect_game_Win.WIN_INF = _hx_tab_array({[0]="WIN_INF",1,__enum__ = __deceptinfect_game_Win},2)

__deceptinfect_game_Win.DRAW = _hx_tab_array({[0]="DRAW",2,__enum__ = __deceptinfect_game_Win},2)


__deceptinfect_infection_InfVunerability.new = function(v,removeTime) 
  local self = _hx_new(__deceptinfect_infection_InfVunerability.prototype)
  __deceptinfect_infection_InfVunerability.super(self,v,removeTime)
  return self
end
__deceptinfect_infection_InfVunerability.super = function(self,v,removeTime) 
  __deceptinfect_ecswip_Component.super(self);
  self.vun = v;
  _G.CurTime();
end
_hxClasses["deceptinfect.infection.InfVunerability"] = __deceptinfect_infection_InfVunerability
__deceptinfect_infection_InfVunerability.__name__ = "deceptinfect.infection.InfVunerability"
__deceptinfect_infection_InfVunerability.prototype = _hx_a();
__deceptinfect_infection_InfVunerability.prototype.vun= nil;

__deceptinfect_infection_InfVunerability.prototype.__class__ =  __deceptinfect_infection_InfVunerability
__deceptinfect_infection_InfVunerability.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfVunerability.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectedComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectedComponent.prototype)
  __deceptinfect_infection_InfectedComponent.super(self)
  return self
end
__deceptinfect_infection_InfectedComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectedComponent"] = __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__name__ = "deceptinfect.infection.InfectedComponent"
__deceptinfect_infection_InfectedComponent.prototype = _hx_a();

__deceptinfect_infection_InfectedComponent.prototype.__class__ =  __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectedComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectionComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionComponent.prototype)
  __deceptinfect_infection_InfectionComponent.super(self)
  return self
end
__deceptinfect_infection_InfectionComponent.super = function(self) 
  self.acceptingInfection = __deceptinfect_infection_AcceptingInfection.ACCEPTING;
  self.baseInfection = __deceptinfect_infection_BaseInfection.USING_GLOBAL;
  self.rate = 1;
  local ret = ({length = 1});
  ret[0] = 0.0;
  self.infection = __deceptinfect_infection_INF_STATE.NOT_INFECTED(ret);
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectionComponent"] = __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__name__ = "deceptinfect.infection.InfectionComponent"
__deceptinfect_infection_InfectionComponent.prototype = _hx_a();
__deceptinfect_infection_InfectionComponent.prototype.infection= nil;
__deceptinfect_infection_InfectionComponent.prototype.rate= nil;
__deceptinfect_infection_InfectionComponent.prototype.baseInfection= nil;
__deceptinfect_infection_InfectionComponent.prototype.acceptingInfection= nil;
__deceptinfect_infection_InfectionComponent.prototype.getInfValue = function(self) 
  local _g = self.infection;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return _g[2][0] end;
  elseif (tmp) == 1 then 
    do return 100 end; end;
end
__deceptinfect_infection_InfectionComponent.prototype.set_infection = function(self,x) 
  self.infection = x do return self.infection end
end

__deceptinfect_infection_InfectionComponent.prototype.__class__ =  __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectionComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.infection.AcceptingInfection"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACCEPTING","REJECTING"},2)}
__deceptinfect_infection_AcceptingInfection = _hxClasses["deceptinfect.infection.AcceptingInfection"];
__deceptinfect_infection_AcceptingInfection.ACCEPTING = _hx_tab_array({[0]="ACCEPTING",0,__enum__ = __deceptinfect_infection_AcceptingInfection},2)

__deceptinfect_infection_AcceptingInfection.REJECTING = _hx_tab_array({[0]="REJECTING",1,__enum__ = __deceptinfect_infection_AcceptingInfection},2)

_hxClasses["deceptinfect.infection.BaseInfection"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_USING","USING_GLOBAL","USING_STATIC"},3)}
__deceptinfect_infection_BaseInfection = _hxClasses["deceptinfect.infection.BaseInfection"];
__deceptinfect_infection_BaseInfection.NOT_USING = _hx_tab_array({[0]="NOT_USING",0,__enum__ = __deceptinfect_infection_BaseInfection},2)

__deceptinfect_infection_BaseInfection.USING_GLOBAL = _hx_tab_array({[0]="USING_GLOBAL",1,__enum__ = __deceptinfect_infection_BaseInfection},2)

__deceptinfect_infection_BaseInfection.USING_STATIC = function(rate) local _x = _hx_tab_array({[0]="USING_STATIC",2,rate,__enum__=__deceptinfect_infection_BaseInfection}, 3); return _x; end 
_hxClasses["deceptinfect.infection.INF_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_INFECTED","INFECTED"},2)}
__deceptinfect_infection_INF_STATE = _hxClasses["deceptinfect.infection.INF_STATE"];
__deceptinfect_infection_INF_STATE.NOT_INFECTED = function(inf) local _x = _hx_tab_array({[0]="NOT_INFECTED",0,inf,__enum__=__deceptinfect_infection_INF_STATE}, 3); return _x; end 
__deceptinfect_infection_INF_STATE.INFECTED = _hx_tab_array({[0]="INFECTED",1,__enum__ = __deceptinfect_infection_INF_STATE},2)


__deceptinfect_infection_InfectionLookInfo.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionLookInfo.prototype)
  __deceptinfect_infection_InfectionLookInfo.super(self)
  return self
end
__deceptinfect_infection_InfectionLookInfo.super = function(self) 
  self.threshold = 2.0;
  self.lookat = __deceptinfect_util_TimeKeep.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectionLookInfo"] = __deceptinfect_infection_InfectionLookInfo
__deceptinfect_infection_InfectionLookInfo.__name__ = "deceptinfect.infection.InfectionLookInfo"
__deceptinfect_infection_InfectionLookInfo.prototype = _hx_a();
__deceptinfect_infection_InfectionLookInfo.prototype.lookat= nil;
__deceptinfect_infection_InfectionLookInfo.prototype.threshold= nil;

__deceptinfect_infection_InfectionLookInfo.prototype.__class__ =  __deceptinfect_infection_InfectionLookInfo
__deceptinfect_infection_InfectionLookInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectionLookInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_ContaminationAccepter.new = function() 
  local self = _hx_new(__deceptinfect_radiation_ContaminationAccepter.prototype)
  __deceptinfect_radiation_ContaminationAccepter.super(self)
  return self
end
__deceptinfect_radiation_ContaminationAccepter.super = function(self) 
  self.contam_time = __deceptinfect_util_TimeKeep.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.radiation.ContaminationAccepter"] = __deceptinfect_radiation_ContaminationAccepter
__deceptinfect_radiation_ContaminationAccepter.__name__ = "deceptinfect.radiation.ContaminationAccepter"
__deceptinfect_radiation_ContaminationAccepter.prototype = _hx_a();
__deceptinfect_radiation_ContaminationAccepter.prototype.contam_time= nil;

__deceptinfect_radiation_ContaminationAccepter.prototype.__class__ =  __deceptinfect_radiation_ContaminationAccepter
__deceptinfect_radiation_ContaminationAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_ContaminationAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_ContaminationProducer.new = function(options,radoptions) 
  local self = _hx_new(__deceptinfect_radiation_ContaminationProducer.prototype)
  __deceptinfect_radiation_ContaminationProducer.super(self,options,radoptions)
  return self
end
__deceptinfect_radiation_ContaminationProducer.super = function(self,options,radoptions) 
  self.type = __deceptinfect_radiation_ContaminationType.SAME_TYPE;
  __deceptinfect_ecswip_Component.super(self);
  self.chance = _hx_funcToField(options.chance);
  self.dist = _hx_funcToField(options.dist);
  self.check = _hx_funcToField(options.check);
  if (options.type ~= nil) then 
    self.type = _hx_funcToField(options.type);
  end;
  self.nextoptions = _hx_funcToField(options.nextoptions);
end
_hxClasses["deceptinfect.radiation.ContaminationProducer"] = __deceptinfect_radiation_ContaminationProducer
__deceptinfect_radiation_ContaminationProducer.__name__ = "deceptinfect.radiation.ContaminationProducer"
__deceptinfect_radiation_ContaminationProducer.prototype = _hx_a();
__deceptinfect_radiation_ContaminationProducer.prototype.chance= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.check= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.dist= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.type= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.nextoptions= nil;

__deceptinfect_radiation_ContaminationProducer.prototype.__class__ =  __deceptinfect_radiation_ContaminationProducer
__deceptinfect_radiation_ContaminationProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_ContaminationProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.NextOptions"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TYPE","MY_TYPE","OVERRIDE_LIFETIME"},3)}
__deceptinfect_radiation_NextOptions = _hxClasses["deceptinfect.radiation.NextOptions"];
__deceptinfect_radiation_NextOptions.TYPE = function(radtype) local _x = _hx_tab_array({[0]="TYPE",0,radtype,__enum__=__deceptinfect_radiation_NextOptions}, 3); return _x; end 
__deceptinfect_radiation_NextOptions.MY_TYPE = _hx_tab_array({[0]="MY_TYPE",1,__enum__ = __deceptinfect_radiation_NextOptions},2)

__deceptinfect_radiation_NextOptions.OVERRIDE_LIFETIME = function(t) local _x = _hx_tab_array({[0]="OVERRIDE_LIFETIME",2,t,__enum__=__deceptinfect_radiation_NextOptions}, 3); return _x; end 
_hxClasses["deceptinfect.radiation.ContaminationType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ALWAYS","SAME_TYPE","SAME_SOURCE"},3)}
__deceptinfect_radiation_ContaminationType = _hxClasses["deceptinfect.radiation.ContaminationType"];
__deceptinfect_radiation_ContaminationType.ALWAYS = _hx_tab_array({[0]="ALWAYS",0,__enum__ = __deceptinfect_radiation_ContaminationType},2)

__deceptinfect_radiation_ContaminationType.SAME_TYPE = _hx_tab_array({[0]="SAME_TYPE",1,__enum__ = __deceptinfect_radiation_ContaminationType},2)

__deceptinfect_radiation_ContaminationType.SAME_SOURCE = _hx_tab_array({[0]="SAME_SOURCE",2,__enum__ = __deceptinfect_radiation_ContaminationType},2)


__deceptinfect_radiation_RadSource.new = function(rso) 
  local self = _hx_new(__deceptinfect_radiation_RadSource.prototype)
  __deceptinfect_radiation_RadSource.super(self,rso)
  return self
end
__deceptinfect_radiation_RadSource.super = function(self,rso) 
  self.state = __deceptinfect_radiation_RadSourceState.INACTIVE;
  __deceptinfect_ecswip_Component.super(self);
  self.attatch = _hx_funcToField(rso.attatch);
  self.type = _hx_funcToField(rso.type);
  self.lifetime = _hx_funcToField(rso.lifetime);
  self.rso = rso;
end
_hxClasses["deceptinfect.radiation.RadSource"] = __deceptinfect_radiation_RadSource
__deceptinfect_radiation_RadSource.__name__ = "deceptinfect.radiation.RadSource"
__deceptinfect_radiation_RadSource.prototype = _hx_a();
__deceptinfect_radiation_RadSource.prototype.base= nil;
__deceptinfect_radiation_RadSource.prototype.type= nil;
__deceptinfect_radiation_RadSource.prototype.attatch= nil;
__deceptinfect_radiation_RadSource.prototype.lifetime= nil;
__deceptinfect_radiation_RadSource.prototype.state= nil;
__deceptinfect_radiation_RadSource.prototype.rso= nil;

__deceptinfect_radiation_RadSource.prototype.__class__ =  __deceptinfect_radiation_RadSource
__deceptinfect_radiation_RadSource.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadSource.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.RadSourceOp"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="CONTAM","RAD","BOTH"},3)}
__deceptinfect_radiation_RadSourceOp = _hxClasses["deceptinfect.radiation.RadSourceOp"];
__deceptinfect_radiation_RadSourceOp.CONTAM = function(op) local _x = _hx_tab_array({[0]="CONTAM",0,op,__enum__=__deceptinfect_radiation_RadSourceOp}, 3); return _x; end 
__deceptinfect_radiation_RadSourceOp.RAD = function(op) local _x = _hx_tab_array({[0]="RAD",1,op,__enum__=__deceptinfect_radiation_RadSourceOp}, 3); return _x; end 
__deceptinfect_radiation_RadSourceOp.BOTH = function(rpo,cpo) local _x = _hx_tab_array({[0]="BOTH",2,rpo,cpo,__enum__=__deceptinfect_radiation_RadSourceOp}, 4); return _x; end 
_hxClasses["deceptinfect.radiation.RadSourceState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","INACTIVE"},2)}
__deceptinfect_radiation_RadSourceState = _hxClasses["deceptinfect.radiation.RadSourceState"];
__deceptinfect_radiation_RadSourceState.ACTIVE = function(x) local _x = _hx_tab_array({[0]="ACTIVE",0,x,__enum__=__deceptinfect_radiation_RadSourceState}, 3); return _x; end 
__deceptinfect_radiation_RadSourceState.INACTIVE = _hx_tab_array({[0]="INACTIVE",1,__enum__ = __deceptinfect_radiation_RadSourceState},2)

_hxClasses["deceptinfect.radiation.RadTime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="INFINITE","FINITE"},2)}
__deceptinfect_radiation_RadTime = _hxClasses["deceptinfect.radiation.RadTime"];
__deceptinfect_radiation_RadTime.INFINITE = _hx_tab_array({[0]="INFINITE",0,__enum__ = __deceptinfect_radiation_RadTime},2)

__deceptinfect_radiation_RadTime.FINITE = function(removetime) local _x = _hx_tab_array({[0]="FINITE",1,removetime,__enum__=__deceptinfect_radiation_RadTime}, 3); return _x; end 

__deceptinfect_radiation_RadVictim.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadVictim.prototype)
  __deceptinfect_radiation_RadVictim.super(self)
  return self
end
__deceptinfect_radiation_RadVictim.super = function(self) 
  self.radiation = __haxe_ds_IntMap.new();
  self.affectedtype = __haxe_ds_IntMap.new();
  self.affected = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.radiation.RadVictim"] = __deceptinfect_radiation_RadVictim
__deceptinfect_radiation_RadVictim.__name__ = "deceptinfect.radiation.RadVictim"
__deceptinfect_radiation_RadVictim.prototype = _hx_a();
__deceptinfect_radiation_RadVictim.prototype.affected= nil;
__deceptinfect_radiation_RadVictim.prototype.affectedtype= nil;
__deceptinfect_radiation_RadVictim.prototype.radiation= nil;

__deceptinfect_radiation_RadVictim.prototype.__class__ =  __deceptinfect_radiation_RadVictim
__deceptinfect_radiation_RadVictim.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadVictim.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.RadLifetime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="FINITE","INFINITE"},2)}
__deceptinfect_radiation_RadLifetime = _hxClasses["deceptinfect.radiation.RadLifetime"];
__deceptinfect_radiation_RadLifetime.FINITE = function(x) local _x = _hx_tab_array({[0]="FINITE",0,x,__enum__=__deceptinfect_radiation_RadLifetime}, 3); return _x; end 
__deceptinfect_radiation_RadLifetime.INFINITE = _hx_tab_array({[0]="INFINITE",1,__enum__ = __deceptinfect_radiation_RadLifetime},2)


__deceptinfect_radiation_RadiationTypes.new = {}
_hxClasses["deceptinfect.radiation.RadiationTypes"] = __deceptinfect_radiation_RadiationTypes
__deceptinfect_radiation_RadiationTypes.__name__ = "deceptinfect.radiation.RadiationTypes"

__deceptinfect_sabotage_S_Break.new = function() 
  local self = _hx_new(__deceptinfect_sabotage_S_Break.prototype)
  __deceptinfect_sabotage_S_Break.super(self)
  return self
end
__deceptinfect_sabotage_S_Break.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.sabotage.S_Break"] = __deceptinfect_sabotage_S_Break
__deceptinfect_sabotage_S_Break.__name__ = "deceptinfect.sabotage.S_Break"
__deceptinfect_sabotage_S_Break.prototype = _hx_a();

__deceptinfect_sabotage_S_Break.prototype.__class__ =  __deceptinfect_sabotage_S_Break
__deceptinfect_sabotage_S_Break.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_sabotage_S_Break.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_sabotage_S_Explode.new = function() 
  local self = _hx_new(__deceptinfect_sabotage_S_Explode.prototype)
  __deceptinfect_sabotage_S_Explode.super(self)
  return self
end
__deceptinfect_sabotage_S_Explode.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.sabotage.S_Explode"] = __deceptinfect_sabotage_S_Explode
__deceptinfect_sabotage_S_Explode.__name__ = "deceptinfect.sabotage.S_Explode"
__deceptinfect_sabotage_S_Explode.prototype = _hx_a();

__deceptinfect_sabotage_S_Explode.prototype.__class__ =  __deceptinfect_sabotage_S_Explode
__deceptinfect_sabotage_S_Explode.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_sabotage_S_Explode.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_statuses_Contaminated.new = function() 
  local self = _hx_new(__deceptinfect_statuses_Contaminated.prototype)
  __deceptinfect_statuses_Contaminated.super(self)
  return self
end
__deceptinfect_statuses_Contaminated.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.statuses.Contaminated"] = __deceptinfect_statuses_Contaminated
__deceptinfect_statuses_Contaminated.__name__ = "deceptinfect.statuses.Contaminated"
__deceptinfect_statuses_Contaminated.prototype = _hx_a();

__deceptinfect_statuses_Contaminated.prototype.__class__ =  __deceptinfect_statuses_Contaminated
__deceptinfect_statuses_Contaminated.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_statuses_Contaminated.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_statuses_Walkthroughable.new = function() 
  local self = _hx_new(__deceptinfect_statuses_Walkthroughable.prototype)
  __deceptinfect_statuses_Walkthroughable.super(self)
  return self
end
__deceptinfect_statuses_Walkthroughable.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.statuses.Walkthroughable"] = __deceptinfect_statuses_Walkthroughable
__deceptinfect_statuses_Walkthroughable.__name__ = "deceptinfect.statuses.Walkthroughable"
__deceptinfect_statuses_Walkthroughable.prototype = _hx_a();

__deceptinfect_statuses_Walkthroughable.prototype.__class__ =  __deceptinfect_statuses_Walkthroughable
__deceptinfect_statuses_Walkthroughable.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_statuses_Walkthroughable.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.util.Cooldown"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="AVALIABLE","COOLDOWN","UNAVALIABLE"},3)}
__deceptinfect_util_Cooldown = _hxClasses["deceptinfect.util.Cooldown"];
__deceptinfect_util_Cooldown.AVALIABLE = _hx_tab_array({[0]="AVALIABLE",0,__enum__ = __deceptinfect_util_Cooldown},2)

__deceptinfect_util_Cooldown.COOLDOWN = function(time) local _x = _hx_tab_array({[0]="COOLDOWN",1,time,__enum__=__deceptinfect_util_Cooldown}, 3); return _x; end 
__deceptinfect_util_Cooldown.UNAVALIABLE = _hx_tab_array({[0]="UNAVALIABLE",2,__enum__ = __deceptinfect_util_Cooldown},2)


__deceptinfect_util_EntityExt.new = {}
_hxClasses["deceptinfect.util.EntityExt"] = __deceptinfect_util_EntityExt
__deceptinfect_util_EntityExt.__name__ = "deceptinfect.util.EntityExt"
__deceptinfect_util_EntityExt.facingBehind = function(me,target) 
  do return _G.math.acos(_G.Angle(0, me:EyeAngles()[2], 0):Forward():Dot(_G.Angle(0, target:EyeAngles()[2], 0):Forward())) < (_G.math.pi / 4) end;
end
__deceptinfect_util_EntityExt.validID2 = function(x) 
  if (_G.IsValid(x)) then 
    local _g = x.id;
    if (_g == nil) then 
      do return __deceptinfect_util_ValidID.NO_ID end;
    else
      do return __deceptinfect_util_ValidID.HAS_ID(_g) end;
    end;
  else
    do return __deceptinfect_util_ValidID.INVALID end;
  end;
end
_hxClasses["deceptinfect.util.ValidID"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HAS_ID","NO_ID","INVALID"},3)}
__deceptinfect_util_ValidID = _hxClasses["deceptinfect.util.ValidID"];
__deceptinfect_util_ValidID.HAS_ID = function(id) local _x = _hx_tab_array({[0]="HAS_ID",0,id,__enum__=__deceptinfect_util_ValidID}, 3); return _x; end 
__deceptinfect_util_ValidID.NO_ID = _hx_tab_array({[0]="NO_ID",1,__enum__ = __deceptinfect_util_ValidID},2)

__deceptinfect_util_ValidID.INVALID = _hx_tab_array({[0]="INVALID",2,__enum__ = __deceptinfect_util_ValidID},2)


__deceptinfect_util_MinMaxTools.new = {}
_hxClasses["deceptinfect.util.MinMaxTools"] = __deceptinfect_util_MinMaxTools
__deceptinfect_util_MinMaxTools.__name__ = "deceptinfect.util.MinMaxTools"
__deceptinfect_util_MinMaxTools.getCenter = function(x) 
  local this1 = x.maxs;
  local otherVec = x.mins;
  local this2 = this1 - otherVec;
  local this3 = this2 / 2;
  local otherVec1 = x.mins;
  do return this3 + otherVec1 end;
end

__deceptinfect_util_PlayerExt.new = {}
_hxClasses["deceptinfect.util.PlayerExt"] = __deceptinfect_util_PlayerExt
__deceptinfect_util_PlayerExt.__name__ = "deceptinfect.util.PlayerExt"
__deceptinfect_util_PlayerExt.setWalkthroughable = function(p,b) 
  if (b) then 
    p:SetCollisionGroup(_G.COLLISION_GROUP_PASSABLE_DOOR);
  else
    p:SetCollisionGroup(_G.COLLISION_GROUP_PLAYER);
  end;
end
__deceptinfect_util_PlayerExt.shouldFreeRoam = function(p) 
  local wrongMode = p:GetObserverMode() == _G.OBS_MODE_NONE;
  local targetDead = _G.IsValid(p:GetObserverTarget()) and not p:GetObserverTarget():Alive();
  local freeRoaming = p:GetObserverMode() == _G.OBS_MODE_ROAMING;
  if (not (wrongMode or targetDead)) then 
    do return not freeRoaming end;
  else
    do return true end;
  end;
end
__deceptinfect_util_PlayerExt.giveFullAmmo = function(p) 
  local wep = __gmod_PairTools.iterator(p:GetWeapons());
  while (wep:hasNext()) do 
    local wep1 = wep:next();
    local typ = wep1:GetPrimaryAmmoType();
    p:GiveAmmo(wep1:GetMaxClip1() * 3, typ);
  end;
end

__deceptinfect_util_TimeKeep.new = function(limitZero) 
  local self = _hx_new(__deceptinfect_util_TimeKeep.prototype)
  __deceptinfect_util_TimeKeep.super(self,limitZero)
  return self
end
__deceptinfect_util_TimeKeep.super = function(self,limitZero) 
  if (limitZero == nil) then 
    limitZero = true;
  end;
  self.times = __haxe_ds_IntMap.new();
  self.limitZero = limitZero;
end
_hxClasses["deceptinfect.util.TimeKeep"] = __deceptinfect_util_TimeKeep
__deceptinfect_util_TimeKeep.__name__ = "deceptinfect.util.TimeKeep"
__deceptinfect_util_TimeKeep.prototype = _hx_a();
__deceptinfect_util_TimeKeep.prototype.times= nil;
__deceptinfect_util_TimeKeep.prototype.limitZero= nil;
__deceptinfect_util_TimeKeep.prototype.addTime = function(self,key) 
  self:initTime(key);
  local _g1 = self.times;
  local ret = _g1.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local v = ret + __deceptinfect_GameManager.diffTime;
  if (v == nil) then 
    _g1.h[key] = __haxe_ds_IntMap.tnull;
  else
    _g1.h[key] = v;
  end;
  local ret1 = self.times.h[key];
  if (ret1 == __haxe_ds_IntMap.tnull) then 
    ret1 = nil;
  end;
  do return ret1 end
end
__deceptinfect_util_TimeKeep.prototype.initTime = function(self,key) 
  if (self.times.h[key] == nil) then 
    self.times.h[key] = 0;
  end;
end
__deceptinfect_util_TimeKeep.prototype.setTime = function(self,key,f) 
  local _this = self.times;
  if (f == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = f;
  end;
end
__deceptinfect_util_TimeKeep.prototype.resetTime = function(self,key) 
  self.times.h[key] = 0;
end
__deceptinfect_util_TimeKeep.prototype.removeTime = function(self,key) 
  self:initTime(key);
  local _g1 = self.times;
  local ret = _g1.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local v = ret - __deceptinfect_GameManager.diffTime;
  if (v == nil) then 
    _g1.h[key] = __haxe_ds_IntMap.tnull;
  else
    _g1.h[key] = v;
  end;
  local ret1 = self.times.h[key];
  if (ret1 == __haxe_ds_IntMap.tnull) then 
    ret1 = nil;
  end;
  if (ret1 < 0) then 
    self.times.h[key] = 0;
  end;
  local ret2 = self.times.h[key];
  if (ret2 == __haxe_ds_IntMap.tnull) then 
    ret2 = nil;
  end;
  do return ret2 end
end
__deceptinfect_util_TimeKeep.prototype.removeAllTimes = function(self) 
  local difftime = __deceptinfect_GameManager.diffTime;
  local key = self.times:keys();
  while (key:hasNext()) do 
    local key1 = key:next();
    local _g1 = self.times;
    local ret = _g1.h[key1];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local v = ret - difftime;
    if (v == nil) then 
      _g1.h[key1] = __haxe_ds_IntMap.tnull;
    else
      _g1.h[key1] = v;
    end;
    local ret1 = self.times.h[key1];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    if (ret1 < 0) then 
      self.times.h[key1] = 0;
    end;
  end;
end

__deceptinfect_util_TimeKeep.prototype.__class__ =  __deceptinfect_util_TimeKeep

__deceptinfect_util_Util.new = {}
_hxClasses["deceptinfect.util.Util"] = __deceptinfect_util_Util
__deceptinfect_util_Util.__name__ = "deceptinfect.util.Util"
__deceptinfect_util_Util.printTimer_2 = function(ident,time,run) 
  if (__deceptinfect_util_Util.mappy_2.h[ident] ~= nil) then 
    local ret = __deceptinfect_util_Util.mappy_2.h[ident];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    if (_G.CurTime() > ret) then 
      run();
      local this1 = __deceptinfect_util_Util.mappy_2;
      local value = _G.CurTime() + time;
      local _this = this1;
      if (value == nil) then 
        _this.h[ident] = __haxe_ds_IntMap.tnull;
      else
        _this.h[ident] = value;
      end;
    end;
  else
    run();
    local this2 = __deceptinfect_util_Util.mappy_2;
    local value1 = _G.CurTime() + time;
    local _this1 = this2;
    if (value1 == nil) then 
      _this1.h[ident] = __haxe_ds_IntMap.tnull;
    else
      _this1.h[ident] = value1;
    end;
  end;
end

__gmod_PairTools.new = {}
_hxClasses["gmod.PairTools"] = __gmod_PairTools
__gmod_PairTools.__name__ = "gmod.PairTools"
__gmod_PairTools.keyValueIterator = function(table) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(table);
  local next = _hx_1_p_next;
  local i = _hx_1_p_index;
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local _hx_2_res_index, _hx_2_res_value = next(table, i);
    i = _hx_2_res_index;
    do return _hx_o({__fields__={key=true,value=true},key=_hx_2_res_index,value=_hx_2_res_value}) end;
  end,hasNext=function(self) 
    do return _G.select(2, _G.next(table, i)) ~= nil end;
  end}) end;
end
__gmod_PairTools.iterator = function(table) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(table);
  local next = _hx_1_p_next;
  local i = _hx_1_p_index;
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local _hx_2_res_index, _hx_2_res_value = next(table, i);
    i = _hx_2_res_index;
    do return _hx_2_res_value end;
  end,hasNext=function(self) 
    do return _G.select(2, _G.next(table, i)) ~= nil end;
  end}) end;
end

__haxe_EntryPoint.new = {}
_hxClasses["haxe.EntryPoint"] = __haxe_EntryPoint
__haxe_EntryPoint.__name__ = "haxe.EntryPoint"
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (not (__haxe_EntryPoint.processEvents() < 0)) do 
  end;
end

__haxe_Json.new = {}
_hxClasses["haxe.Json"] = __haxe_Json
__haxe_Json.__name__ = "haxe.Json"
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_Log.new = {}
_hxClasses["haxe.Log"] = __haxe_Log
__haxe_Log.__name__ = "haxe.Log"
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v1 = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v1))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
_hxClasses["haxe.MainEvent"] = __haxe_MainEvent
__haxe_MainEvent.__name__ = "haxe.MainEvent"
__haxe_MainEvent.prototype = _hx_a();
__haxe_MainEvent.prototype.f= nil;
__haxe_MainEvent.prototype.prev= nil;
__haxe_MainEvent.prototype.next= nil;
__haxe_MainEvent.prototype.isBlocking= nil;
__haxe_MainEvent.prototype.nextRun= nil;
__haxe_MainEvent.prototype.priority= nil;
__haxe_MainEvent.prototype.delay = function(self,t) 
  self.nextRun = (function() 
    local _hx_1
    if (t == nil) then 
    _hx_1 = -_G.math.huge; else 
    _hx_1 = Sys.time() + t; end
    return _hx_1
  end )();
end
__haxe_MainEvent.prototype.stop = function(self) 
  if (self.f == nil) then 
    do return end;
  end;
  self.f = nil;
  self.nextRun = -_G.math.huge;
  if (self.prev == nil) then 
    __haxe_MainLoop.pending = self.next;
  else
    self.prev.next = self.next;
  end;
  if (self.next ~= nil) then 
    self.next.prev = self.prev;
  end;
end

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
_hxClasses["haxe.MainLoop"] = __haxe_MainLoop
__haxe_MainLoop.__name__ = "haxe.MainLoop"
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.add = function(f,priority) 
  if (priority == nil) then 
    priority = 0;
  end;
  if (f == nil) then 
    _G.error("Event function is null",0);
  end;
  local e = __haxe_MainEvent.new(f, priority);
  local head = __haxe_MainLoop.pending;
  if (head ~= nil) then 
    head.prev = e;
  end;
  e.next = head;
  __haxe_MainLoop.pending = e;
  do return e end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_Timer.new = function(time_ms) 
  local self = _hx_new(__haxe_Timer.prototype)
  __haxe_Timer.super(self,time_ms)
  return self
end
__haxe_Timer.super = function(self,time_ms) 
  local _gthis = self;
  local dt = time_ms / 1000;
  self.event = __haxe_MainLoop.add(function() 
    local _gthis1 = _gthis.event;
    _gthis1.nextRun = _gthis1.nextRun + dt;
    _gthis:run();
  end);
  self.event:delay(dt);
end
_hxClasses["haxe.Timer"] = __haxe_Timer
__haxe_Timer.__name__ = "haxe.Timer"
__haxe_Timer.delay = function(f,time_ms) 
  local t = __haxe_Timer.new(time_ms);
  t.run = function(self) 
    t:stop();
    f();
   end;
  do return t end;
end
__haxe_Timer.prototype = _hx_a();
__haxe_Timer.prototype.event= nil;
__haxe_Timer.prototype.stop = function(self) 
  if (self.event ~= nil) then 
    self.event:stop();
    self.event = nil;
  end;
end
__haxe_Timer.prototype.run = function(self) 
end

__haxe_Timer.prototype.__class__ =  __haxe_Timer

__haxe_ds_BalancedTree.new = function() 
  local self = _hx_new(__haxe_ds_BalancedTree.prototype)
  __haxe_ds_BalancedTree.super(self)
  return self
end
__haxe_ds_BalancedTree.super = function(self) 
end
_hxClasses["haxe.ds.BalancedTree"] = __haxe_ds_BalancedTree
__haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree"
__haxe_ds_BalancedTree.__interfaces__ = {__haxe_IMap}
__haxe_ds_BalancedTree.prototype = _hx_a();
__haxe_ds_BalancedTree.prototype.root= nil;
__haxe_ds_BalancedTree.prototype.set = function(self,key,value) 
  self.root = self:setLoop(key, value, self.root);
end
__haxe_ds_BalancedTree.prototype.get = function(self,key) 
  local node = self.root;
  while (node ~= nil) do 
    local c = self:compare(key, node.key);
    if (c == 0) then 
      do return node.value end;
    end;
    if (c < 0) then 
      node = node.left;
    else
      node = node.right;
    end;
  end;
  do return nil end
end
__haxe_ds_BalancedTree.prototype.iterator = function(self) 
  local ret = _hx_tab_array({}, 0);
  self:iteratorLoop(self.root, ret);
  local _gthis = ret;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
__haxe_ds_BalancedTree.prototype.keys = function(self) 
  local ret = _hx_tab_array({}, 0);
  self:keysLoop(self.root, ret);
  local _gthis = ret;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
__haxe_ds_BalancedTree.prototype.setLoop = function(self,k,v,node) 
  if (node == nil) then 
    do return __haxe_ds_TreeNode.new(nil, k, v, nil) end;
  end;
  local c = self:compare(k, node.key);
  if (c == 0) then 
    do return __haxe_ds_TreeNode.new(node.left, k, v, node.right, (function() 
      local _hx_1
      if (node == nil) then 
      _hx_1 = 0; else 
      _hx_1 = node._height; end
      return _hx_1
    end )()) end;
  else
    if (c < 0) then 
      do return self:balance(self:setLoop(k, v, node.left), node.key, node.value, node.right) end;
    else
      local nr = self:setLoop(k, v, node.right);
      do return self:balance(node.left, node.key, node.value, nr) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.iteratorLoop = function(self,node,acc) 
  if (node ~= nil) then 
    self:iteratorLoop(node.left, acc);
    acc:push(node.value);
    self:iteratorLoop(node.right, acc);
  end;
end
__haxe_ds_BalancedTree.prototype.keysLoop = function(self,node,acc) 
  if (node ~= nil) then 
    self:keysLoop(node.left, acc);
    acc:push(node.key);
    self:keysLoop(node.right, acc);
  end;
end
__haxe_ds_BalancedTree.prototype.balance = function(self,l,k,v,r) 
  local hl = (function() 
    local _hx_1
    if (l == nil) then 
    _hx_1 = 0; else 
    _hx_1 = l._height; end
    return _hx_1
  end )();
  local hr = (function() 
    local _hx_2
    if (r == nil) then 
    _hx_2 = 0; else 
    _hx_2 = r._height; end
    return _hx_2
  end )();
  if (hl > (hr + 2)) then 
    local _this = l.left;
    local _this1 = l.right;
    if ((function() 
      local _hx_3
      if (_this == nil) then 
      _hx_3 = 0; else 
      _hx_3 = _this._height; end
      return _hx_3
    end )() >= (function() 
      local _hx_4
      if (_this1 == nil) then 
      _hx_4 = 0; else 
      _hx_4 = _this1._height; end
      return _hx_4
    end )()) then 
      do return __haxe_ds_TreeNode.new(l.left, l.key, l.value, __haxe_ds_TreeNode.new(l.right, k, v, r)) end;
    else
      do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l.left, l.key, l.value, l.right.left), l.right.key, l.right.value, __haxe_ds_TreeNode.new(l.right.right, k, v, r)) end;
    end;
  else
    if (hr > (hl + 2)) then 
      local _this2 = r.right;
      local _this3 = r.left;
      if ((function() 
        local _hx_5
        if (_this2 == nil) then 
        _hx_5 = 0; else 
        _hx_5 = _this2._height; end
        return _hx_5
      end )() > (function() 
        local _hx_6
        if (_this3 == nil) then 
        _hx_6 = 0; else 
        _hx_6 = _this3._height; end
        return _hx_6
      end )()) then 
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left), r.key, r.value, r.right) end;
      else
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left.left), r.left.key, r.left.value, __haxe_ds_TreeNode.new(r.left.right, r.key, r.value, r.right)) end;
      end;
    else
      do return __haxe_ds_TreeNode.new(l, k, v, r, (function() 
        local _hx_7
        if (hl > hr) then 
        _hx_7 = hl; else 
        _hx_7 = hr; end
        return _hx_7
      end )() + 1) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.compare = function(self,k1,k2) 
  do return Reflect.compare(k1, k2) end
end

__haxe_ds_BalancedTree.prototype.__class__ =  __haxe_ds_BalancedTree

__haxe_ds_TreeNode.new = function(l,k,v,r,h) 
  local self = _hx_new(__haxe_ds_TreeNode.prototype)
  __haxe_ds_TreeNode.super(self,l,k,v,r,h)
  return self
end
__haxe_ds_TreeNode.super = function(self,l,k,v,r,h) 
  if (h == nil) then 
    h = -1;
  end;
  self.left = l;
  self.key = k;
  self.value = v;
  self.right = r;
  if (h == -1) then 
    local tmp;
    local _this = self.left;
    local _this1 = self.right;
    if ((function() 
      local _hx_1
      if (_this == nil) then 
      _hx_1 = 0; else 
      _hx_1 = _this._height; end
      return _hx_1
    end )() > (function() 
      local _hx_2
      if (_this1 == nil) then 
      _hx_2 = 0; else 
      _hx_2 = _this1._height; end
      return _hx_2
    end )()) then 
      local _this2 = self.left;
      tmp = (function() 
        local _hx_3
        if (_this2 == nil) then 
        _hx_3 = 0; else 
        _hx_3 = _this2._height; end
        return _hx_3
      end )();
    else
      local _this3 = self.right;
      tmp = (function() 
        local _hx_4
        if (_this3 == nil) then 
        _hx_4 = 0; else 
        _hx_4 = _this3._height; end
        return _hx_4
      end )();
    end;
    self._height = tmp + 1;
  else
    self._height = h;
  end;
end
_hxClasses["haxe.ds.TreeNode"] = __haxe_ds_TreeNode
__haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode"
__haxe_ds_TreeNode.prototype = _hx_a();
__haxe_ds_TreeNode.prototype.left= nil;
__haxe_ds_TreeNode.prototype.right= nil;
__haxe_ds_TreeNode.prototype.key= nil;
__haxe_ds_TreeNode.prototype.value= nil;
__haxe_ds_TreeNode.prototype._height= nil;

__haxe_ds_TreeNode.prototype.__class__ =  __haxe_ds_TreeNode

__haxe_ds_EnumValueMap.new = function() 
  local self = _hx_new(__haxe_ds_EnumValueMap.prototype)
  __haxe_ds_EnumValueMap.super(self)
  return self
end
__haxe_ds_EnumValueMap.super = function(self) 
  __haxe_ds_BalancedTree.super(self);
end
_hxClasses["haxe.ds.EnumValueMap"] = __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap"
__haxe_ds_EnumValueMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_EnumValueMap.prototype = _hx_a();
__haxe_ds_EnumValueMap.prototype.compare = function(self,k1,k2) 
  local d = k1[1] - k2[1];
  if (d ~= 0) then 
    do return d end;
  end;
  local p1 = k1:slice(2);
  local p2 = k2:slice(2);
  if ((p1.length == 0) and (p2.length == 0)) then 
    do return 0 end;
  end;
  do return self:compareArgs(p1, p2) end
end
__haxe_ds_EnumValueMap.prototype.compareArgs = function(self,a1,a2) 
  local ld = a1.length - a2.length;
  if (ld ~= 0) then 
    do return ld end;
  end;
  local _g = 0;
  local _g1 = a1.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local d = self:compareArg(a1[i], a2[i]);
    if (d ~= 0) then 
      do return d end;
    end;
  end;
  do return 0 end
end
__haxe_ds_EnumValueMap.prototype.compareArg = function(self,v1,v2) 
  if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)) then 
    do return self:compare(v1, v2) end;
  else
    if (__lua_Boot.__instanceof(v1, Array) and __lua_Boot.__instanceof(v2, Array)) then 
      do return self:compareArgs(v1, v2) end;
    else
      do return Reflect.compare(v1, v2) end;
    end;
  end;
end

__haxe_ds_EnumValueMap.prototype.__class__ =  __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__super__ = __haxe_ds_BalancedTree
setmetatable(__haxe_ds_EnumValueMap.prototype,{__index=__haxe_ds_BalancedTree.prototype})

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.IntMap"] = __haxe_ds_IntMap
__haxe_ds_IntMap.__name__ = "haxe.ds.IntMap"
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_a();
__haxe_ds_IntMap.prototype.h= nil;
__haxe_ds_IntMap.prototype.set = function(self,key,value) 
  if (value == nil) then 
    self.h[key] = __haxe_ds_IntMap.tnull;
  else
    self.h[key] = value;
  end;
end
__haxe_ds_IntMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_IntMap.prototype.remove = function(self,key) 
  if (self.h[key] == nil) then 
    do return false end;
  else
    self.h[key] = nil;
    do return true end;
  end;
end
__haxe_ds_IntMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end
__haxe_ds_IntMap.prototype.iterator = function(self) 
  local _gthis = self;
  local it = self:keys();
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return it:hasNext() end;
  end,next=function(self) 
    do return _gthis.h[it:next()] end;
  end}) end
end
__haxe_ds_IntMap.prototype.toString = function(self) 
  local s_b = ({});
  _G.table.insert(s_b, "{");
  local it = self:keys();
  while (it:hasNext()) do 
    local i = it:next();
    _G.table.insert(s_b, Std.string(i));
    _G.table.insert(s_b, " => ");
    local ret = self.h[i];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    _G.table.insert(s_b, Std.string(ret));
    if (it:hasNext()) then 
      _G.table.insert(s_b, ", ");
    end;
  end;
  _G.table.insert(s_b, "}");
  do return _G.table.concat(s_b) end
end

__haxe_ds_IntMap.prototype.__class__ =  __haxe_ds_IntMap
_hxClasses["haxe.ds.Option"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Some","None"},2)}
__haxe_ds_Option = _hxClasses["haxe.ds.Option"];
__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.StringMap"] = __haxe_ds_StringMap
__haxe_ds_StringMap.__name__ = "haxe.ds.StringMap"
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_a();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.set = function(self,key,value) 
  if (value == nil) then 
    self.h[key] = __haxe_ds_StringMap.tnull;
  else
    self.h[key] = value;
  end;
end
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end
__haxe_ds_StringMap.prototype.iterator = function(self) 
  local _gthis = self;
  local it = self:keys();
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return it:hasNext() end;
  end,next=function(self) 
    do return _gthis.h[it:next()] end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = _hx_funcToField(replacer);
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
_hxClasses["haxe.format.JsonPrinter"] = __haxe_format_JsonPrinter
__haxe_format_JsonPrinter.__name__ = "haxe.format.JsonPrinter"
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_a();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self:replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "null");
    _this.length = _this.length + #"null";
  elseif (tmp) == 1 then 
    local _this1 = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this1.b, str);
    _this1.length = _this1.length + #str;
  elseif (tmp) == 2 then 
    local v1 = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this2 = self.buf;
    local str1 = Std.string(v1);
    _G.table.insert(_this2.b, str1);
    _this2.length = _this2.length + #str1;
  elseif (tmp) == 3 then 
    local _this3 = self.buf;
    local str2 = Std.string(v);
    _G.table.insert(_this3.b, str2);
    _this3.length = _this3.length + #str2;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this4 = self.buf;
    _G.table.insert(_this4.b, "\"<fun>\"");
    _this4.length = _this4.length + #"\"<fun>\"";
  elseif (tmp) == 6 then 
    local _g2 = _g[2];
    if (_g2 == String) then 
      self:quote(v);
    else
      if (_g2 == Array) then 
        local v2 = v;
        local _this5 = self.buf;
        _G.table.insert(_this5.b, _G.string.char(91));
        _this5.length = _this5.length + 1;
        local len = v2.length;
        local last = len - 1;
        local _g1 = 0;
        while (_g1 < len) do 
          _g1 = _g1 + 1;
          local i = _g1 - 1;
          if (i > 0) then 
            local _this6 = self.buf;
            _G.table.insert(_this6.b, _G.string.char(44));
            _this6.length = _this6.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this7 = self.buf;
            _G.table.insert(_this7.b, _G.string.char(10));
            _this7.length = _this7.length + 1;
          end;
          if (self.pretty) then 
            local v3 = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this8 = self.buf;
            local str3 = Std.string(v3);
            _G.table.insert(_this8.b, str3);
            _this8.length = _this8.length + #str3;
          end;
          self:write(i, v2[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this9 = self.buf;
              _G.table.insert(_this9.b, _G.string.char(10));
              _this9.length = _this9.length + 1;
            end;
            if (self.pretty) then 
              local v4 = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this10 = self.buf;
              local str4 = Std.string(v4);
              _G.table.insert(_this10.b, str4);
              _this10.length = _this10.length + #str4;
            end;
          end;
        end;
        local _this11 = self.buf;
        _G.table.insert(_this11.b, _G.string.char(93));
        _this11.length = _this11.length + 1;
      else
        if (_g2 == __haxe_ds_StringMap) then 
          local v5 = v;
          local o = _hx_e();
          local k1 = v5:keys();
          while (k1:hasNext()) do 
            local k2 = k1:next();
            local ret = v5.h[k2];
            if (ret == __haxe_ds_StringMap.tnull) then 
              ret = nil;
            end;
            o[k2] = ret;
          end;
          local v6 = o;
          self:fieldsString(v6, Reflect.fields(v6));
        else
          if (_g2 == Date) then 
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local _this12 = self.buf;
    local str5 = Std.string(v[1]);
    _G.table.insert(_this12.b, str5);
    _this12.length = _this12.length + #str5;
  elseif (tmp) == 8 then 
    local _this13 = self.buf;
    _G.table.insert(_this13.b, "\"???\"");
    _this13.length = _this13.length + #"\"???\""; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  _this.length = _this.length + 1;
  local len = fields.length;
  local last = len - 1;
  local first = true;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < len) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (first) then 
      self.nind = self.nind + 1;
      first = false;
    else
      local _this1 = self.buf;
      _G.table.insert(_this1.b, _G.string.char(44));
      _this1.length = _this1.length + 1;
    end;
    if (self.pretty) then 
      local _this2 = self.buf;
      _G.table.insert(_this2.b, _G.string.char(10));
      _this2.length = _this2.length + 1;
    end;
    if (self.pretty) then 
      local v1 = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this3 = self.buf;
      local str = Std.string(v1);
      _G.table.insert(_this3.b, str);
      _this3.length = _this3.length + #str;
    end;
    self:quote(f);
    local _this4 = self.buf;
    _G.table.insert(_this4.b, _G.string.char(58));
    _this4.length = _this4.length + 1;
    if (self.pretty) then 
      local _this5 = self.buf;
      _G.table.insert(_this5.b, _G.string.char(32));
      _this5.length = _this5.length + 1;
    end;
    self:write(f, value);
    if (i == last) then 
      self.nind = self.nind - 1;
      if (self.pretty) then 
        local _this6 = self.buf;
        _G.table.insert(_this6.b, _G.string.char(10));
        _this6.length = _this6.length + 1;
      end;
      if (self.pretty) then 
        local v2 = StringTools.lpad("", self.indent, self.nind * #self.indent);
        local _this7 = self.buf;
        local str1 = Std.string(v2);
        _G.table.insert(_this7.b, str1);
        _this7.length = _this7.length + #str1;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this8 = self.buf;
  _G.table.insert(_this8.b, _G.string.char(125));
  _this8.length = _this8.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
  local i = 0;
  while (true) do 
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    if (c == nil) then 
      break;
    end;
    if (c) == 8 then 
      local _this1 = self.buf;
      _G.table.insert(_this1.b, "\\b");
      _this1.length = _this1.length + #"\\b";
    elseif (c) == 9 then 
      local _this2 = self.buf;
      _G.table.insert(_this2.b, "\\t");
      _this2.length = _this2.length + #"\\t";
    elseif (c) == 10 then 
      local _this3 = self.buf;
      _G.table.insert(_this3.b, "\\n");
      _this3.length = _this3.length + #"\\n";
    elseif (c) == 12 then 
      local _this4 = self.buf;
      _G.table.insert(_this4.b, "\\f");
      _this4.length = _this4.length + #"\\f";
    elseif (c) == 13 then 
      local _this5 = self.buf;
      _G.table.insert(_this5.b, "\\r");
      _this5.length = _this5.length + #"\\r";
    elseif (c) == 34 then 
      local _this6 = self.buf;
      _G.table.insert(_this6.b, "\\\"");
      _this6.length = _this6.length + #"\\\"";
    elseif (c) == 92 then 
      local _this7 = self.buf;
      _G.table.insert(_this7.b, "\\\\");
      _this7.length = _this7.length + #"\\\\";else
    local _this8 = self.buf;
    _G.table.insert(_this8.b, _G.string.char(c));
    _this8.length = _this8.length + 1; end;
  end;
  local _this9 = self.buf;
  _G.table.insert(_this9.b, _G.string.char(34));
  _this9.length = _this9.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__lua_Boot.new = {}
_hxClasses["lua.Boot"] = __lua_Boot
__lua_Boot.__name__ = "lua.Boot"
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      local x = o;
      do return (function() 
        local _hx_1
        if (x < __lua_Boot.Min_Int32) then 
        _hx_1 = __lua_Boot.Min_Int32; elseif (x > __lua_Boot.Max_Int32) then 
        _hx_1 = __lua_Boot.Max_Int32; else 
        _hx_1 = _G.math.floor(x); end
        return _hx_1
      end )() == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl2 = o.__class__;
        tmp = (function() 
          local _hx_2
          if (cl2 ~= nil) then 
          _hx_2 = cl2; else 
          _hx_2 = nil; end
          return _hx_2
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Class) then 
      _hx_3 = o.__name__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_4
      if (cl == Enum) then 
      _hx_4 = o.__ename__ ~= nil; else 
      _hx_4 = false; end
      return _hx_4
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end

__haxe_iterators_MapKeyValueIterator.new = function(map) 
  local self = _hx_new(__haxe_iterators_MapKeyValueIterator.prototype)
  __haxe_iterators_MapKeyValueIterator.super(self,map)
  return self
end
__haxe_iterators_MapKeyValueIterator.super = function(self,map) 
  self.map = map;
  self.keys = map:keys();
end
_hxClasses["haxe.iterators.MapKeyValueIterator"] = __haxe_iterators_MapKeyValueIterator
__haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator"
__haxe_iterators_MapKeyValueIterator.prototype = _hx_a();
__haxe_iterators_MapKeyValueIterator.prototype.map= nil;
__haxe_iterators_MapKeyValueIterator.prototype.keys= nil;
__haxe_iterators_MapKeyValueIterator.prototype.hasNext = function(self) 
  do return self.keys:hasNext() end
end
__haxe_iterators_MapKeyValueIterator.prototype.next = function(self) 
  local key = self.keys:next();
  do return _hx_o({__fields__={value=true,key=true},value=self.map:get(key),key=key}) end
end

__haxe_iterators_MapKeyValueIterator.prototype.__class__ =  __haxe_iterators_MapKeyValueIterator

__lua_UserData.new = {}
_hxClasses["lua.UserData"] = __lua_UserData
__lua_UserData.__name__ = "lua.UserData"

__lua_Thread.new = {}
_hxClasses["lua.Thread"] = __lua_Thread
__lua_Thread.__name__ = "lua.Thread"

__tink_core__Callback_Callback_Impl_.new = {}
_hxClasses["tink.core._Callback.Callback_Impl_"] = __tink_core__Callback_Callback_Impl_
__tink_core__Callback_Callback_Impl_.__name__ = "tink.core._Callback.Callback_Impl_"
__tink_core__Callback_Callback_Impl_.invoke = function(this1,data) 
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    this1(data);
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    local _e = this1;
    local f = function(data1) 
      __tink_core__Callback_Callback_Impl_.invoke(_e, data1);
    end;
    local data2 = data;
    __tink_core__Callback_Callback_Impl_.defer(function() 
      f(data2);
    end);
  end;
end
__tink_core__Callback_Callback_Impl_.defer = function(f) 
  __haxe_Timer.delay(f, 0);
end

__tink_core_LinkObject.new = {}
_hxClasses["tink.core.LinkObject"] = __tink_core_LinkObject
__tink_core_LinkObject.__name__ = "tink.core.LinkObject"

__tink_core__Callback_ListCell.new = function(cb,list) 
  local self = _hx_new(__tink_core__Callback_ListCell.prototype)
  __tink_core__Callback_ListCell.super(self,cb,list)
  return self
end
__tink_core__Callback_ListCell.super = function(self,cb,list) 
  if (cb == nil) then 
    _G.error("callback expected but null received",0);
  end;
  self.cb = cb;
  self.list = list;
end
_hxClasses["tink.core._Callback.ListCell"] = __tink_core__Callback_ListCell
__tink_core__Callback_ListCell.__name__ = "tink.core._Callback.ListCell"
__tink_core__Callback_ListCell.__interfaces__ = {__tink_core_LinkObject}
__tink_core__Callback_ListCell.prototype = _hx_a();
__tink_core__Callback_ListCell.prototype.cb= nil;
__tink_core__Callback_ListCell.prototype.list= nil;

__tink_core__Callback_ListCell.prototype.__class__ =  __tink_core__Callback_ListCell

__tink_core_CallbackList.new = function() 
  local self = _hx_new(__tink_core_CallbackList.prototype)
  __tink_core_CallbackList.super(self)
  return self
end
__tink_core_CallbackList.super = function(self) 
  self.busy = false;
  self.queue = _hx_tab_array({}, 0);
  self.used = 0;
  self.cells = _hx_tab_array({}, 0);
end
_hxClasses["tink.core.CallbackList"] = __tink_core_CallbackList
__tink_core_CallbackList.__name__ = "tink.core.CallbackList"
__tink_core_CallbackList.prototype = _hx_a();
__tink_core_CallbackList.prototype.cells= nil;
__tink_core_CallbackList.prototype.used= nil;
__tink_core_CallbackList.prototype.queue= nil;
__tink_core_CallbackList.prototype.busy= nil;
__tink_core_CallbackList.prototype.ondrain = function(self) 
end
__tink_core_CallbackList.prototype.invoke = function(self,data,destructive) 
  if (self.busy) then 
    local f = _hx_bind(self,self.invoke);
    local data1 = data;
    local destructive1 = destructive;
    local tmp = function() 
      f(data1, destructive1);
      do return end;
    end;
    self.queue:push(tmp);
  else
    self.busy = true;
    local length = self.cells.length;
    local _g = 0;
    while (_g < length) do 
      _g = _g + 1;
      local _this = self.cells[_g - 1];
      if (_this.list ~= nil) then 
        __tink_core__Callback_Callback_Impl_.invoke(_this.cb, data);
      end;
    end;
    self.busy = false;
    if (destructive) then 
      local added = self.cells.length - length;
      local _g2 = 0;
      while (_g2 < length) do 
        _g2 = _g2 + 1;
        local _this1 = self.cells[_g2 - 1];
        _this1.cb = nil;
        _this1.list = nil;
      end;
      local _g4 = 0;
      while (_g4 < added) do 
        _g4 = _g4 + 1;
        local i = _g4 - 1;
        self.cells[i] = self.cells[length + i];
      end;
      self:resize(added);
    else
      if (self.used < self.cells.length) then 
        self:compact();
      end;
    end;
    if (self.queue.length > 0) then 
      (self.queue:shift())();
    end;
  end;
end
__tink_core_CallbackList.prototype.compact = function(self) 
  if (self.busy) then 
    do return end;
  else
    if (self.used == 0) then 
      self:resize(0);
      self:ondrain();
    else
      local compacted = 0;
      local _g = 0;
      local _g1 = self.cells.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        local _g2 = self.cells[i];
        if (_g2.cb ~= nil) then 
          if (compacted ~= i) then 
            self.cells[compacted] = _g2;
          end;
          compacted = compacted + 1;
          if (compacted == self.used) then 
            break;
          end;
        end;
      end;
      self:resize(self.used);
    end;
  end;
end
__tink_core_CallbackList.prototype.resize = function(self,length) 
  self.cells:resize(length);
end
__tink_core_CallbackList.prototype.clear = function(self) 
  if (self.busy) then 
    self.queue:push(_hx_bind(self,self.clear));
  end;
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local cell = _g1[_g];
    _g = _g + 1;
    cell.cb = nil;
    cell.list = nil;
  end;
  self:resize(0);
end

__tink_core_CallbackList.prototype.__class__ =  __tink_core_CallbackList
_hxClasses["tink.core.Noise"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Noise"},1)}
__tink_core_Noise = _hxClasses["tink.core.Noise"];
__tink_core_Noise.Noise = _hx_tab_array({[0]="Noise",0,__enum__ = __tink_core_Noise},2)

_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __deceptinfect_DeceptInfect.hmm = 12;
  
  __deceptinfect_GameManager.state = __deceptinfect_GAME_STATE.WAIT;
  
  __deceptinfect_GameManager.lastTick = 0.0;
  
  __deceptinfect_GameManager.stateTrig = __tink_core_SignalTrigger.new();
  
  __deceptinfect_GameManager.net_gamestate = NETMESSAGE_gamestate.new();
  
  __deceptinfect_GameManager.net_cleanup = NETMESSAGE_di_cleanup.new();
  
  __deceptinfect_GameValues.MIN_PLAYERS = 3;
  
  __deceptinfect_GameValues.INF_INIT_MIN = 1.5;
  
  __deceptinfect_GameValues.INF_INIT_MAX = 7.5;
  
  __deceptinfect_GameValues.CONTAMINATE_WARNING_TIME = 4;
  
  __deceptinfect_GameValues.RADIATION_WARNING_TIME = 1.5;
  
  __deceptinfect_GameValues.MAX_INF_RATE = 12;
  
  __deceptinfect_GameValues.GAME_TIMER = 540;
  
  __deceptinfect_GameValues.GAME_TIMER_VARIANCE = 45;
  
  __deceptinfect_GameValues.EVAC_ARRIVAL = 25;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW = 0.75;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE = 1.6;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW_START = 0.4;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE_START = 0.25;
  
  __deceptinfect_GameValues.AVERAGE_RATE_SAMPLES = 15;
  
  __deceptinfect_GameValues.AVERAGE_RATE_TIME = 3;
  
  __deceptinfect_GameValues.MIN_BATTERY_TIME = 45;
  
  __deceptinfect_GameValues.MAX_BATTERY_TIME = 90;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_MODE = 0;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_DIMINISH_PERCENT = 0.75;
  
  __deceptinfect_GameValues.MAX_IDENT_DIST = 1000;
  
  __deceptinfect_GameValues.BATTERIES_SPAWNED = 2;
  
  __deceptinfect_GameValues.EVAC_INFECTION_RATE = 0.5;
  
  __deceptinfect_GameValues.BEGIN_EVAC_INF = 0.65;
  
  __deceptinfect_GameValues.BATTERIES_REQUIRED = 4;
  
  __deceptinfect_GameValues.GRAB_TIME = 6;
  
  __deceptinfect_GameValues.SETUP_TIME = 10;
  
  __deceptinfect_MapStorage.spawns = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    local this1 = _G.Vector(-20.135118, 293.638184, 62.682350);
    local this2 = _G.Vector(214.035873, 252.134552, 46.033661);
    local this3 = _G.Vector(45.967289, -942.858459, 64.031250);
    local this4 = _G.Vector(-4.848439, -1728.742920, 64.031250);
    local this5 = _G.Vector(-481.968323, -1022.401917, 64.031250);
    local this6 = _G.Vector(571.895020, -1031.322632, 64.031250);
    local this7 = _G.Vector(10.328067, -1039.059570, 64.031250);
    local this8 = _G.Vector(-64.220894, -989.030090, 60.787186);
    local this9 = _G.Vector(111.524712, -1094.413208, 110.729080);
    local this10 = _G.Vector(29.061092, 1006.951233, 93.697433);
    local value = _hx_o({__fields__={items=true,objectives=true,evacs=true,nests=true},items=_hx_tab_array({[0]=this1, this2}, 2),objectives=_hx_tab_array({[0]=this3, this4, this5, this6, this7}, 5),evacs=_hx_tab_array({[0]=_hx_o({__fields__={mins=true,maxs=true},mins=this8,maxs=this9})}, 1),nests=_hx_tab_array({[0]=this10}, 1)});
    if (value == nil) then 
      _g.h.mor_temple_v1 = __haxe_ds_StringMap.tnull;
    else
      _g.h.mor_temple_v1 = value;
    end;
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  __deceptinfect_Misc.roundModels = _hx_tab_array({[0]="models/player/mossman.mdl", "models/player/alyx.mdl", "models/player/barney.mdl", "models/player/breen.mdl", "models/player/Eli.mdl", "models/player/gman_high.mdl", "models/player/kleiner.mdl", "models/player/monk.mdl", "models/player/odessa.mdl", "models/player/Group03/Female_01.mdl", "models/player/Group03/Female_02.mdl", "models/player/Group03/Female_03.mdl", "models/player/Group03/Female_04.mdl", "models/player/Group03/Female_06.mdl", "models/player/Group03/Male_01.mdl", "models/player/Group03/Male_02.mdl", "models/player/Group03/Male_03.mdl", "models/player/Group03/Male_04.mdl", "models/player/Group03/Male_05.mdl", "models/player/Group03/Male_06.mdl", "models/player/Group03/Male_07.mdl", "models/player/Group03/Male_08.mdl", "models/player/Group03/Male_09.mdl"}, 23);
  
  __deceptinfect_Misc.roundWeapons = _hx_tab_array({[0]="weapon_mor_ump"}, 1);
  
  __deceptinfect_Misc.startingWeapons = _hx_tab_array({[0]="weapon_mor_p229"}, 1);
  
  __deceptinfect_Misc.infModel = "models/player/zombie_classic.mdl";
  
  __deceptinfect_Misc.deathSounds = (function() 
    local _hx_2
    
    local _g = __haxe_ds_EnumValueMap.new();
    
    _g:set(__deceptinfect_ModelType.ZOMBIE, _hx_tab_array({[0]="npc/zombie/zombie_die1.wav"}, 1));
    
    _g:set(__deceptinfect_ModelType.HUMAN_MALE, _hx_tab_array({[0]="vo/npc/barney/ba_pain06.wav", "vo/npc/male01/pain09.wav"}, 2));
    
    _hx_2 = _g;
    return _hx_2
  end )();
  
  __deceptinfect_PlayerManager.indexLookup = __haxe_ds_IntMap.new();
  
  __deceptinfect_client_GeigerSystem.net_geiger = NETMESSAGE_geiger.new();
  
  __deceptinfect_ecswip_ComponentManager.components = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_ComponentManager.componentSignals = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_ComponentManager.entities = 0;
  
  __deceptinfect_ecswip_ComponentManager.activeEntities = 0;
  
  __deceptinfect_ecswip_GrabSystem.net_grabupdate = NETMESSAGE_grabupdate.new();
  
  __deceptinfect_ecswip_GrabSystem.net_grabend = NETMESSAGE_grabend.new();
  
  __deceptinfect_ecswip_GrabSystem.grabindex = 0;
  
  __deceptinfect_ecswip_SignalStorage.entDamageTrigger = __tink_core_SignalTrigger.new();
  
  __deceptinfect_infection_InfectionSystem.net_inf = NETMESSAGE_di_infection.new();
  
  __deceptinfect_infection_InfectionSystem.net_infected = NETMESSAGE_di_infected.new();
  
  __deceptinfect_infection_InfectionSystem.averageInfection = 0.0;
  
  __deceptinfect_infection_InfectionSystem.infectionReport = 0.0;
  
  __deceptinfect_infection_RateSystem.nextAddRate = 0;
  
  __deceptinfect_radiation_RadiationSystem.radRateID = __deceptinfect_infection_RateSystem.getAddRateTicket();
  
  __deceptinfect_game_SpawnSystem.obj = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.item = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.nest = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.evac = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_EvacSystem.evac_state = NETMESSAGE_di_evac.new();
  
  __deceptinfect_game_RagdollSystem.statueinfo = NETMESSAGE_di_statinfo.new();
  
  __deceptinfect_infection_InfectionLookSystem.infectioninfo = NETMESSAGE_di_infinfo.new();
  
  __deceptinfect_ecswip_SystemManager.getSystems = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_SystemManager.runSystems = _hx_tab_array({[0]=__deceptinfect_infection_InfectionSystem, __deceptinfect_client_GeigerSystem, __deceptinfect_radiation_RadiationSystem, __deceptinfect_ecswip_GrabSystem, __deceptinfect_ecswip_HiddenHealthSystem, __deceptinfect_game_WinSystem, __deceptinfect_game_BatterySystem, __deceptinfect_game_SpawnSystem, __deceptinfect_statuses_WalkthroughSystem, __deceptinfect_game_NestSystem, __deceptinfect_game_EvacSystem, __deceptinfect_game_RagdollSystem, __deceptinfect_game_SlowMotionSystem, __deceptinfect_infection_InfectionLookSystem, __deceptinfect_radiation_ContaminationSystem, __deceptinfect_radiation_RadSourceSystem, __deceptinfect_game_LowHealthSystem}, 17);
  
  __deceptinfect_radiation_RadiationTypes.types = (function() 
    local _hx_3
    
    local _g = __haxe_ds_IntMap.new();
    
    local value = _hx_o({__fields__={type=true,lifetime=true,options=true},type=1,lifetime=__deceptinfect_radiation_RadLifetime.INFINITE,options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=6,radius=500}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=20,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.TYPE(0)}))});
    if (value == nil) then 
      _g.h[1] = __haxe_ds_IntMap.tnull;
    else
      _g.h[1] = value;
    end;
    
    local value1 = _hx_o({__fields__={type=true,lifetime=true,options=true},type=0,lifetime=__deceptinfect_radiation_RadLifetime.FINITE(10),options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=4,radius=300}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=20,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.MY_TYPE}))});
    if (value1 == nil) then 
      _g.h[0] = __haxe_ds_IntMap.tnull;
    else
      _g.h[0] = value1;
    end;
    
    local value2 = _hx_o({__fields__={type=true,lifetime=true,options=true},type=3,lifetime=__deceptinfect_radiation_RadLifetime.INFINITE,options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=5,radius=500}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=40,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.OVERRIDE_LIFETIME(__deceptinfect_radiation_RadLifetime.FINITE(10))}))});
    if (value2 == nil) then 
      _g.h[3] = __haxe_ds_IntMap.tnull;
    else
      _g.h[3] = value2;
    end;
    
    _hx_3 = _g;
    return _hx_3
  end )();
  
  __deceptinfect_util_Util.mappy_2 = __haxe_ds_IntMap.new();
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_IntMap.tnull = ({});
  
  __haxe_ds_StringMap.tnull = ({});
  
  __lua_Boot.Max_Int32 = 2147483647;
  
  __lua_Boot.Min_Int32 = -2147483648;
  
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
  __tink_core__Callback_Callback_Impl_.depth = 0;
  
  
  String.__name__ = "String";
  _hxClasses.Array = Array;
  Array.__name__ = "Array";
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_G.math.randomseed(_G.os.time());

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();

  Main.main();
  __haxe_EntryPoint.run();

return _hx_exports
