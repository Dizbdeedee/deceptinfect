-- Generated by Haxe 4.0.5
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
local Array = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__gmod_sent_ENT = _hx_e()
__gmod_sent_ENT_ANIM = _hx_e()
__deceptinfect_CustomEnt = _hx_e()
__gmod_hooks_Gm = _hx_e()
__deceptinfect_DeceptInfect = _hx_e()
__gmod__MultiReturnHelper_MultiReturnHelper_Impl_ = _hx_e()
__lua_Boot = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    ret:push(i1);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    local i1 = i:next();
    _G.table.insert(tbl, Std.string(i1));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Main.new = {}
Main.main = function() 
  local myEnt = ents.GetByIndex(0);
  local ents = ents.GetAll();
end

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local i = 0;
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (#delimiter > 0) then 
    _hx_1 = #delimiter; else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    if (x < __lua_Boot.Min_Int32) then 
      do return __lua_Boot.Min_Int32 end;
    else
      if (x > __lua_Boot.Max_Int32) then 
        do return __lua_Boot.Max_Int32 end;
      else
        do return _G.math.floor(x) end;
      end;
    end;
  end;
end

__gmod_sent_ENT.new = {}
__gmod_sent_ENT.prototype = _hx_a();
__gmod_sent_ENT.prototype.Initialize = function(self) 
end
__gmod_sent_ENT.prototype.AcceptInput = function(self,inputName,activator,caller,data) 
  do return nil end
end
__gmod_sent_ENT.prototype.KeyValue = function(self,key,value) 
  do return nil end
end
__gmod_sent_ENT.prototype.OnReloaded = function(self) 
end
__gmod_sent_ENT.prototype.OnRemove = function(self) 
end
__gmod_sent_ENT.prototype.OnRestore = function(self) 
end
__gmod_sent_ENT.prototype.StoreOutput = function(self,name,info) 
end
__gmod_sent_ENT.prototype.Think = function(self) 
  do return nil end
end
__gmod_sent_ENT.prototype.TriggerOutput = function(self,output,activator,data) 
end
__gmod_sent_ENT.prototype.CalcAbsolutePosition = function(self,pos,ang) 
  do return nil end
end
__gmod_sent_ENT.prototype.CanProperty = function(self,ply,property) 
  do return nil end
end
__gmod_sent_ENT.prototype.DoImpactEffect = function(self,tr,damageType) 
  do return nil end
end
__gmod_sent_ENT.prototype.GravGunPickupAllowed = function(self,ply) 
  do return nil end
end
__gmod_sent_ENT.prototype.GravGunPunt = function(self,ply) 
  do return nil end
end
__gmod_sent_ENT.prototype.HandleAnimEvent = function(self,event,eventTime,cycle,type,options) 
end
__gmod_sent_ENT.prototype.IsJumpLegal = function(self,startPos,apex,endPos) 
  do return nil end
end
__gmod_sent_ENT.prototype.OnDuplicated = function(self,entTable) 
end
__gmod_sent_ENT.prototype.OnEntityCopyTableFinish = function(self,data) 
end
__gmod_sent_ENT.prototype.PostEntityPaste = function(self,ply,ent,createdEntities) 
end
__gmod_sent_ENT.prototype.PreEntityCopy = function(self) 
end
__gmod_sent_ENT.prototype.SetAutomaticFrameAdvance = function(self,enable) 
end
__gmod_sent_ENT.prototype.SetupDataTables = function(self) 
end

__gmod_sent_ENT_ANIM.new = {}
__gmod_sent_ENT_ANIM.prototype = _hx_a();
__gmod_sent_ENT_ANIM.prototype.Blocked = function(self,other) 
end
__gmod_sent_ENT_ANIM.prototype.EndTouch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.OnTakeDamage = function(self,damage) 
end
__gmod_sent_ENT_ANIM.prototype.PhysicsCollide = function(self,colData,collider) 
end
__gmod_sent_ENT_ANIM.prototype.PhysicsSimulate = function(self,phys,deltaTime) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.PhysicsUpdate = function(self,phys) 
end
__gmod_sent_ENT_ANIM.prototype.StartTouch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.Touch = function(self,entity) 
end
__gmod_sent_ENT_ANIM.prototype.UpdateTransmitState = function(self) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.Use = function(self,activator,caller,useType,value) 
end
__gmod_sent_ENT_ANIM.__super__ = __gmod_sent_ENT
setmetatable(__gmod_sent_ENT_ANIM.prototype,{__index=__gmod_sent_ENT.prototype})

__deceptinfect_CustomEnt.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_CustomEnt.prototype)
  __deceptinfect_CustomEnt.super(self,curEnt)
  return self
end
__deceptinfect_CustomEnt.super = function(self,curEnt) 
  self["self"] = curEnt;
end
_hx_exports["CustomEnt"] = __deceptinfect_CustomEnt
__deceptinfect_CustomEnt.prototype = _hx_a();
__deceptinfect_CustomEnt.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_CustomEnt.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__gmod_hooks_Gm.new = {}
__gmod_hooks_Gm.prototype = _hx_a();
__gmod_hooks_Gm.prototype.PlayerConnect = function(self,name,ip) 
end
__gmod_hooks_Gm.prototype.IsSpawnpointSuitable = function(self,ply,spawnpoint,makeSuitable) 
  do return nil end
end
__gmod_hooks_Gm.prototype.LoadGModSave = function(self,data,map,timestamp) 
end
__gmod_hooks_Gm.prototype.ShowTeam = function(self,ply) 
end
__gmod_hooks_Gm.prototype.ShouldCollide = function(self,ent1,ent2) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerCanPickupItem = function(self,ply,item) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CreateEntityRagdoll = function(self,owner,ragdoll) 
end
__gmod_hooks_Gm.prototype.Saved = function(self) 
end
__gmod_hooks_Gm.prototype.AllowPlayerPickup = function(self,ply,ent) 
  do return nil end
end
__gmod_hooks_Gm.prototype.ScalePlayerDamage = function(self,ply,hitgroup,dmginfo) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerInitialSpawn = function(self,player,transition) 
end
__gmod_hooks_Gm.prototype.PlayerJoinTeam = function(self,ply,team) 
end
__gmod_hooks_Gm.prototype.OnPhysgunFreeze = function(self,weapon,physobj,ent,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerLoadout = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PreCleanupMap = function(self) 
end
__gmod_hooks_Gm.prototype.CreateTeams = function(self) 
end
__gmod_hooks_Gm.prototype.OnLuaError = function(self,error,realm,name,id) 
end
__gmod_hooks_Gm.prototype.GravGunOnDropped = function(self,ply,ent) 
end
__gmod_hooks_Gm.prototype.KeyPress = function(self,ply,key) 
end
__gmod_hooks_Gm.prototype.HandlePlayerVaulting = function(self,ply,velocity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerCanSeePlayersChat = function(self,text,teamOnly,listener,speaker) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerDeathThink = function(self,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.EntityKeyValue = function(self,ent,key,value) 
  do return nil end
end
__gmod_hooks_Gm.prototype.HandlePlayerLanding = function(self,ply,velocity,onGround) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerCanPickupWeapon = function(self,ply,wep) 
  do return nil end
end
__gmod_hooks_Gm.prototype.WorkshopEnd = function(self) 
end
__gmod_hooks_Gm.prototype.PostPlayerDeath = function(self,ply) 
end
__gmod_hooks_Gm.prototype.SetPlayerSpeed = function(self,ply,walkSpeed,runSpeed) 
end
__gmod_hooks_Gm.prototype.FinishMove = function(self,ply,mv) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CanPlayerSuicide = function(self,player) 
  do return nil end
end
__gmod_hooks_Gm.prototype.StartEntityDriving = function(self,ent,ply) 
end
__gmod_hooks_Gm.prototype.PlayerDeath = function(self,victim,inflictor,attacker) 
end
__gmod_hooks_Gm.prototype.PlayerCanHearPlayersVoice = function(self,listener,talker) 
  do return nil end
end
__gmod_hooks_Gm.prototype.OnPlayerChangedTeam = function(self,ply,oldTeam,newTeam) 
end
__gmod_hooks_Gm.prototype.HandlePlayerDriving = function(self,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerEnteredVehicle = function(self,ply,veh,role) 
end
__gmod_hooks_Gm.prototype.PlayerSilentDeath = function(self,ply) 
end
__gmod_hooks_Gm.prototype.OnDamagedByExplosion = function(self,ply,dmginfo) 
end
__gmod_hooks_Gm.prototype.PlayerSay = function(self,sender,text,teamChat) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PostCleanupMap = function(self) 
end
__gmod_hooks_Gm.prototype.MouthMoveAnimation = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerPostThink = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerNoClip = function(self,ply,desiredState) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerDriveAnimate = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerLeaveVehicle = function(self,ply,veh) 
end
__gmod_hooks_Gm.prototype.Restored = function(self) 
end
__gmod_hooks_Gm.prototype.EndEntityDriving = function(self,ent,ply) 
end
__gmod_hooks_Gm.prototype.ShowSpare2 = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerSelectTeamSpawn = function(self,team,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.NetworkIDValidated = function(self,name,steamID) 
end
__gmod_hooks_Gm.prototype.SetupMove = function(self,ply,mv,cmd) 
end
__gmod_hooks_Gm.prototype.PlayerButtonDown = function(self,ply,button) 
end
__gmod_hooks_Gm.prototype.DoAnimationEvent = function(self,ply,event,data) 
  do return nil end
end
__gmod_hooks_Gm.prototype.MenuStart = function(self) 
end
__gmod_hooks_Gm.prototype.StartGame = function(self) 
end
__gmod_hooks_Gm.prototype.PlayerButtonUp = function(self,ply,button) 
end
__gmod_hooks_Gm.prototype.WorkshopDownloadFile = function(self,id,imageID,title,size) 
end
__gmod_hooks_Gm.prototype.VariableEdited = function(self,ent,ply,key,val,editor) 
end
__gmod_hooks_Gm.prototype.PlayerSwitchFlashlight = function(self,ply,enabled) 
  do return nil end
end
__gmod_hooks_Gm.prototype.OnNPCKilled = function(self,npc,attacker,inflictor) 
end
__gmod_hooks_Gm.prototype.PlayerSpray = function(self,sprayer) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerFootstep = function(self,ply,pos,foot,sound,volume,filter) 
  do return nil end
end
__gmod_hooks_Gm.prototype.OnViewModelChanged = function(self,viewmodel,oldModel,newModel) 
end
__gmod_hooks_Gm.prototype.PropBreak = function(self,attacker,prop) 
end
__gmod_hooks_Gm.prototype.GetPreferredCarryAngles = function(self,ent) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CanPlayerUnfreeze = function(self,player,entity,phys) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PostGamemodeLoaded = function(self) 
end
__gmod_hooks_Gm.prototype.PhysgunDrop = function(self,ply,ent) 
end
__gmod_hooks_Gm.prototype.PlayerDeathSound = function(self) 
  do return nil end
end
__gmod_hooks_Gm.prototype.HandlePlayerSwimming = function(self,ply,velocity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CalcMainActivity = function(self,ply,vel) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerSetHandsModel = function(self,ply,ent) 
end
__gmod_hooks_Gm.prototype.OnGamemodeLoaded = function(self) 
end
__gmod_hooks_Gm.prototype.PlayerSpawn = function(self,player,transition) 
end
__gmod_hooks_Gm.prototype.GravGunPunt = function(self,ply,ent) 
  do return nil end
end
__gmod_hooks_Gm.prototype.GetFallDamage = function(self,ply,speed) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CanExitVehicle = function(self,veh,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.AcceptInput = function(self,ent,input,activator,caller,value) 
  do return nil end
end
__gmod_hooks_Gm.prototype.OnPhysgunPickup = function(self,ply,ent) 
end
__gmod_hooks_Gm.prototype.PhysgunPickup = function(self,player,entity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.ShowHelp = function(self,ply) 
end
__gmod_hooks_Gm.prototype.OnPlayerHitGround = function(self,player,inWater,onFloater,speed) 
  do return nil end
end
__gmod_hooks_Gm.prototype.GravGunOnPickedUp = function(self,ply,ent) 
end
__gmod_hooks_Gm.prototype.Move = function(self,ply,mv) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerTick = function(self,player,mv) 
end
__gmod_hooks_Gm.prototype.Initialize = function(self) 
end
__gmod_hooks_Gm.prototype.StartCommand = function(self,ply,ucmd) 
end
__gmod_hooks_Gm.prototype.PlayerCanJoinTeam = function(self,ply,team) 
  do return nil end
end
__gmod_hooks_Gm.prototype.CaptureVideo = function(self) 
end
__gmod_hooks_Gm.prototype.KeyRelease = function(self,ply,key) 
end
__gmod_hooks_Gm.prototype.PlayerFrozeObject = function(self,ply,ent,physobj) 
end
__gmod_hooks_Gm.prototype.CheckPassword = function(self,steamID64,ipAddress,svPassword,clPassword,name) 
  do return nil end
end
__gmod_hooks_Gm.prototype.ShowSpare1 = function(self,ply) 
end
__gmod_hooks_Gm.prototype.WorkshopDownloadProgress = function(self,id,imageID,title,downloaded,expected) 
end
__gmod_hooks_Gm.prototype.PlayerUnfrozeObject = function(self,ply,ent,physobj) 
end
__gmod_hooks_Gm.prototype.TranslateActivity = function(self,ply,act) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerShouldTaunt = function(self,ply,act) 
  do return nil end
end
__gmod_hooks_Gm.prototype.VehicleMove = function(self,ply,veh,mv) 
end
__gmod_hooks_Gm.prototype.GravGunPickupAllowed = function(self,ply,ent) 
  do return nil end
end
__gmod_hooks_Gm.prototype.ShutDown = function(self) 
end
__gmod_hooks_Gm.prototype.CanEditVariable = function(self,ent,ply,key,val,editor) 
  do return nil end
end
__gmod_hooks_Gm.prototype.EntityNetworkedVarChanged = function(self,ent,name,oldval,newval) 
end
__gmod_hooks_Gm.prototype.EntityFireBullets = function(self,ent,data) 
  do return nil end
end
__gmod_hooks_Gm.prototype.HandlePlayerJumping = function(self,ply,velocity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.Think = function(self) 
end
__gmod_hooks_Gm.prototype.DoPlayerDeath = function(self,ply,attacker,dmg) 
end
__gmod_hooks_Gm.prototype.EntityTakeDamage = function(self,target,dmg) 
  do return nil end
end
__gmod_hooks_Gm.prototype.ScaleNPCDamage = function(self,npc,hitgroup,dmginfo) 
end
__gmod_hooks_Gm.prototype.WeaponEquip = function(self,weapon,owner) 
end
__gmod_hooks_Gm.prototype.PreGamemodeLoaded = function(self) 
end
__gmod_hooks_Gm.prototype.WorkshopStart = function(self) 
end
__gmod_hooks_Gm.prototype.PlayerHurt = function(self,victim,attacker,healthRemaining,damageTaken) 
end
__gmod_hooks_Gm.prototype.WorkshopDownloadTotals = function(self,remain,total) 
end
__gmod_hooks_Gm.prototype.PlayerShouldTakeDamage = function(self,ply,attacker) 
  do return nil end
end
__gmod_hooks_Gm.prototype.Tick = function(self) 
end
__gmod_hooks_Gm.prototype.UpdateAnimation = function(self,ply,velocity,maxSeqGroundSpeed) 
end
__gmod_hooks_Gm.prototype.EntityEmitSound = function(self,data) 
  do return nil end
end
__gmod_hooks_Gm.prototype.GameContentChanged = function(self) 
end
__gmod_hooks_Gm.prototype.CanPlayerEnterVehicle = function(self,player,vehicle,role) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerSpawnAsSpectator = function(self,ply) 
end
__gmod_hooks_Gm.prototype.SetupPlayerVisibility = function(self,ply,viewEntity) 
end
__gmod_hooks_Gm.prototype.PlayerStartTaunt = function(self,ply,act,length) 
end
__gmod_hooks_Gm.prototype.PlayerTraceAttack = function(self,ply,dmginfo,dir,trace) 
  do return nil end
end
__gmod_hooks_Gm.prototype.GetGameDescription = function(self) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerSelectSpawn = function(self,ply,transition) 
  do return nil end
end
__gmod_hooks_Gm.prototype.InitPostEntity = function(self) 
end
__gmod_hooks_Gm.prototype.GrabEarAnimation = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerSetModel = function(self,ply) 
end
__gmod_hooks_Gm.prototype.PlayerDroppedWeapon = function(self,owner,wep) 
end
__gmod_hooks_Gm.prototype.WorkshopDownloadedFile = function(self,id,title) 
end
__gmod_hooks_Gm.prototype.PlayerRequestTeam = function(self,ply,team) 
end
__gmod_hooks_Gm.prototype.PlayerUse = function(self,ply,ent) 
  do return nil end
end
__gmod_hooks_Gm.prototype.HandlePlayerNoClipping = function(self,ply,velocity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.HandlePlayerDucking = function(self,ply,velocity) 
  do return nil end
end
__gmod_hooks_Gm.prototype.EntityRemoved = function(self,ent) 
end
__gmod_hooks_Gm.prototype.OnReloaded = function(self) 
end
__gmod_hooks_Gm.prototype.WorkshopSubscriptionsProgress = function(self,num,max) 
end
__gmod_hooks_Gm.prototype.OnEntityCreated = function(self,entity) 
end
__gmod_hooks_Gm.prototype.PlayerStepSoundTime = function(self,ply,type,walking) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerSwitchWeapon = function(self,player,oldWeapon,newWeapon) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerDisconnected = function(self,ply) 
end
__gmod_hooks_Gm.prototype.OnPhysgunReload = function(self,physgun,ply) 
  do return nil end
end
__gmod_hooks_Gm.prototype.PlayerAuthed = function(self,ply,steamid,uniqueid) 
end
__gmod_hooks_Gm.prototype.FindUseEntity = function(self,ply,defaultEnt) 
  do return nil end
end

__deceptinfect_DeceptInfect.new = function(_self) 
  local self = _hx_new(__deceptinfect_DeceptInfect.prototype)
  __deceptinfect_DeceptInfect.super(self,_self)
  return self
end
__deceptinfect_DeceptInfect.super = function(self,_self) 
  _self.IsSpawnpointSuitable = _hx_bind(self,self.IsSpawnpointSuitable);
end
__deceptinfect_DeceptInfect.initaliseGamemode = function() 
  local GM = GM;
  local inst = __deceptinfect_DeceptInfect.new(GM);
  __deceptinfect_DeceptInfect.GAMEMODE = inst;
  do return inst end;
end
__deceptinfect_DeceptInfect.prototype = _hx_a();
__deceptinfect_DeceptInfect.prototype.IsSpawnpointSuitable = function(self,ply,spawnpoint,makeSuitable) 
  local pos = spawnpoint:GetPos();
  do return true end
end
__deceptinfect_DeceptInfect.__super__ = __gmod_hooks_Gm
setmetatable(__deceptinfect_DeceptInfect.prototype,{__index=__gmod_hooks_Gm.prototype})

__gmod__MultiReturnHelper_MultiReturnHelper_Impl_.new = {}
__gmod__MultiReturnHelper_MultiReturnHelper_Impl_._new = function(under) 
  local this1 = under;
  do return this1 end;
end
__gmod__MultiReturnHelper_MultiReturnHelper_Impl_.multiReturn = function(rtns) 
  local this1 = _hx_table.unpack(rtns);
  do return this1 end;
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  if (#s >= 5) then 
    do return "<...>" end;
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (#s > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(__lua_Boot.__string_rec(o[f1], Std.string(s) .. Std.string("\t"))));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __gmod_sent_ENT.BASE = "base_entity";
  
  __gmod_sent_ENT_ANIM.TYPE = "anim";
  
  __lua_Boot.Max_Int32 = 2147483647;
  
  __lua_Boot.Min_Int32 = -2147483648;
  
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
Main.main()
return _hx_exports
