-- Generated by Haxe 4.0.5
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

_G.require = function() end
local Sys = {time = function() end}
local _hx_exports = _hx_exports or {}
local Array = _hx_e()
local IntIterator = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local NETMESSAGECL_di_testnet = _hx_e()
__gmod_I_NET = _hx_e()
local NETMESSAGE_di_cleanup = _hx_e()
local NETMESSAGE_di_evac = _hx_e()
local NETMESSAGE_di_infected = _hx_e()
local NETMESSAGE_di_infection = _hx_e()
local NETMESSAGE_di_infinfo = _hx_e()
local NETMESSAGE_di_raginfo = _hx_e()
local NETMESSAGE_di_statinfo = _hx_e()
local NETMESSAGE_gamestate = _hx_e()
local NETMESSAGE_geiger = _hx_e()
local NETMESSAGE_grabend = _hx_e()
local NETMESSAGE_grabupdate = _hx_e()
local NETMESSAGE_statue = _hx_e()
__gmod_PanelHelper = _hx_e()
local PanelHelper_Panel = _hx_e()
local PanelHelper_EditablePanel = _hx_e()
local PanelHelper_DFrame = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local Type = _hx_e()
__gmod_hooks_Gm = _hx_e()
__gmod_gamemode_BuildOverrides = _hx_e()
__deceptinfect_DeceptInfect = _hx_e()
__enumExtractor_EnumExtractor = _hx_e()
__deceptinfect_GAME_STATE = _hx_e()
__tink_core_SignalObject = _hx_e()
__tink_core_SignalTrigger = _hx_e()
__deceptinfect_GameManager = _hx_e()
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_ = _hx_e()
__deceptinfect_GameValues = _hx_e()
__deceptinfect_MapStorage = _hx_e()
__deceptinfect_Misc = _hx_e()
__deceptinfect_PlayerManager = _hx_e()
__gmod_swep_SWEP = _hx_e()
__gmod_swep_SwepBuild = _hx_e()
__deceptinfect_Weapon_di_scan = _hx_e()
__deceptinfect_ecswip_Component = _hx_e()
__deceptinfect_ecswip_System = _hx_e()
__deceptinfect_client_ClientOverrides = _hx_e()
__deceptinfect_client_GeigerSystem = _hx_e()
__deceptinfect_client__Hud_Axis = _hx_e()
__deceptinfect_client_Hud = _hx_e()
__deceptinfect_client_PVS = _hx_e()
__deceptinfect_client_SabotagePanel = _hx_e()
__haxe_IMap = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__deceptinfect_ecswip_ComponentManager = _hx_e()
__deceptinfect_ecswip_ComponentState = _hx_e()
__deceptinfect_ecswip_GEntityComponent = _hx_e()
__deceptinfect_ecswip_GrabDraw = _hx_e()
__deceptinfect_ecswip_GrabSystem = _hx_e()
__deceptinfect_ecswip_HiddenHealthSystem = _hx_e()
__deceptinfect_ecswip_PlayerComponent = _hx_e()
__deceptinfect_ecswip_SignalStorage = _hx_e()
__deceptinfect_infection_InfectionSystem = _hx_e()
__deceptinfect_ecswip_VirtualPosition = _hx_e()
__deceptinfect_radiation_RadiationSystem = _hx_e()
__deceptinfect_game_WinSystem = _hx_e()
__deceptinfect_game_BatterySystem = _hx_e()
__deceptinfect_game_SpawnPointTable = _hx_e()
__deceptinfect_game_SpawnSystem = _hx_e()
__deceptinfect_statuses_WalkthroughSystem = _hx_e()
__deceptinfect_game_NestSystem = _hx_e()
__deceptinfect_game_EvacSystem = _hx_e()
__deceptinfect_game_RagdollSystem = _hx_e()
__deceptinfect_game_SlowMotionSystem = _hx_e()
__deceptinfect_infection_InfectionLookSystem = _hx_e()
__deceptinfect_radiation_ContaminationSystem = _hx_e()
__deceptinfect_radiation_RadSourceSystem = _hx_e()
__deceptinfect_game_LowHealthSystem = _hx_e()
__deceptinfect_ecswip_SystemManager = _hx_e()
__deceptinfect_ecswip_ChooseVirPos = _hx_e()
__gmod_sent_ENT = _hx_e()
__gmod_sent_ENT_ANIM = _hx_e()
__deceptinfect_ents_Di_battery = _hx_e()
__deceptinfect_ents_Di_charger = _hx_e()
__gmod_sent_ENT_BRUSH = _hx_e()
__deceptinfect_ents_Di_evac_zone = _hx_e()
__deceptinfect_ents_Di_flare = _hx_e()
__deceptinfect_ents_Di_nest = _hx_e()
__deceptinfect_ents_Di_ragdoll = _hx_e()
__deceptinfect_game_CleanupEnt = _hx_e()
__deceptinfect_game_ClientWeaponStatue = _hx_e()
__deceptinfect_game_KeepRestart = _hx_e()
__deceptinfect_game_RagInfo = _hx_e()
__deceptinfect_game_Ragdoll = _hx_e()
__deceptinfect_game_Spawn = _hx_e()
__deceptinfect_game_BoundsSpawn = _hx_e()
__deceptinfect_game_StatInfo = _hx_e()
__deceptinfect_game_Statue = _hx_e()
__deceptinfect_infection_InfectedComponent = _hx_e()
__deceptinfect_infection_InfectionComponent = _hx_e()
__deceptinfect_infection_INF_STATE = _hx_e()
__deceptinfect_util_EntityExt = _hx_e()
__deceptinfect_util_ValidID = _hx_e()
__deceptinfect_util_MinMaxTools = _hx_e()
__deceptinfect_util_Util = _hx_e()
__gmod_PairTools = _hx_e()
__gmod_PanelBuild = _hx_e()
__gmod_PanelHelper_2 = _hx_e()
__gmod_PanelHelper_3 = _hx_e()
__gmod_MyShittyClass = _hx_e()
local __lua_Boot = _hx_e()
__haxe_EntryPoint = _hx_e()
__haxe_Log = _hx_e()
__haxe_MainEvent = _hx_e()
__haxe_MainLoop = _hx_e()
__haxe_Timer = _hx_e()
__haxe_ds_BalancedTree = _hx_e()
__haxe_ds_TreeNode = _hx_e()
__haxe_ds_EnumValueMap = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_ds_Option = _hx_e()
__haxe_ds_StringMap = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__lua_lib_luasocket_Socket = _G.require("socket")
__tink_core__Callback_Callback_Impl_ = _hx_e()
__tink_core_LinkObject = _hx_e()
__tink_core__Callback_ListCell = _hx_e()
__tink_core_CallbackList = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
_hxClasses["Array"] = Array
Array.__name__ = true
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    _g:push(i1);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    _G.table.insert(tbl, Std.string(i:next()));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

IntIterator.new = function(min,max) 
  local self = _hx_new(IntIterator.prototype)
  IntIterator.super(self,min,max)
  return self
end
IntIterator.super = function(self,min,max) 
  self.min = min;
  self.max = max;
end
_hxClasses["IntIterator"] = IntIterator
IntIterator.__name__ = true
IntIterator.prototype = _hx_a();
IntIterator.prototype.hasNext = function(self) 
  do return self.min < self.max end
end
IntIterator.prototype.next = function(self) 
  do return (function() 
  local _hx_obj = self;
  local _hx_fld = 'min';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)() end
end

IntIterator.prototype.__class__ =  IntIterator

Main.new = {}
_hxClasses["Main"] = Main
Main.__name__ = true
Main.main = function() 
  __deceptinfect_DeceptInfect.new();
  local ply = __gmod_PairTools.iterator(_G.player.GetAll());
  while (ply:hasNext()) do 
    local x = __deceptinfect_ecswip_PlayerComponent.new(ply:next());
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(x.player);
  end;
  _G.file.CreateDir("deceptinfect");
  _G.game.CleanUpMap();
  __deceptinfect_ecswip_SignalStorage.initEvents();
  __deceptinfect_GameManager.init();
  local _g = 0;
  local _g1 = __deceptinfect_Misc.roundModels;
  while (_g < _g1.length) do 
    local model = _g1[_g];
    _g = _g + 1;
    _G.util.PrecacheModel(model);
  end;
  __deceptinfect_Misc.hmm();
  __deceptinfect_game_SpawnSystem.generateSpawns();
  _G.util.PrecacheModel(__deceptinfect_Misc.infModel);
  __deceptinfect_client_ClientOverrides.new();
  __deceptinfect_client_SabotagePanel.register();
  __haxe_Log.trace("looool!!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=61,className="Main",methodName="main"}));
  __deceptinfect_ecswip_SystemManager.initAllSystems();
  _G.math.randomseed(_G.RealTime());
end

Math.new = {}
_hxClasses["Math"] = Math
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

NETMESSAGECL_di_testnet.new = function() 
  local self = _hx_new(NETMESSAGECL_di_testnet.prototype)
  NETMESSAGECL_di_testnet.super(self)
  return self
end
NETMESSAGECL_di_testnet.super = function(self) 
end
_hxClasses["NETMESSAGECL_di_testnet"] = NETMESSAGECL_di_testnet
NETMESSAGECL_di_testnet.__name__ = true
NETMESSAGECL_di_testnet.prototype = _hx_a();
NETMESSAGECL_di_testnet.prototype.send = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_testnet", unreliable);
  _G.net.WriteString(data.name);
  _G.net.SendToServer();
end

NETMESSAGECL_di_testnet.prototype.__class__ =  NETMESSAGECL_di_testnet

__gmod_I_NET.new = {}
_hxClasses["gmod.I_NET"] = __gmod_I_NET
__gmod_I_NET.__name__ = true

NETMESSAGE_di_cleanup.new = function() 
  local self = _hx_new(NETMESSAGE_di_cleanup.prototype)
  NETMESSAGE_di_cleanup.super(self)
  return self
end
NETMESSAGE_di_cleanup.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_cleanup", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_cleanup"] = NETMESSAGE_di_cleanup
NETMESSAGE_di_cleanup.__name__ = true
NETMESSAGE_di_cleanup.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_cleanup.prototype = _hx_a();
NETMESSAGE_di_cleanup.prototype.receive = function(self) 
  self.signalTrigger.handlers:invoke(_hx_e());
end

NETMESSAGE_di_cleanup.prototype.__class__ =  NETMESSAGE_di_cleanup

NETMESSAGE_di_evac.new = function() 
  local self = _hx_new(NETMESSAGE_di_evac.prototype)
  NETMESSAGE_di_evac.super(self)
  return self
end
NETMESSAGE_di_evac.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_evac", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_evac"] = NETMESSAGE_di_evac
NETMESSAGE_di_evac.__name__ = true
NETMESSAGE_di_evac.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_evac.prototype = _hx_a();
NETMESSAGE_di_evac.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={state=true,time=true},state=_G.net.ReadInt(32),time=_G.net.ReadFloat()});
  _this.handlers:invoke(event);
end

NETMESSAGE_di_evac.prototype.__class__ =  NETMESSAGE_di_evac

NETMESSAGE_di_infected.new = function() 
  local self = _hx_new(NETMESSAGE_di_infected.prototype)
  NETMESSAGE_di_infected.super(self)
  return self
end
NETMESSAGE_di_infected.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_infected", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_infected"] = NETMESSAGE_di_infected
NETMESSAGE_di_infected.__name__ = true
NETMESSAGE_di_infected.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infected.prototype = _hx_a();
NETMESSAGE_di_infected.prototype.receive = function(self) 
  self.signalTrigger.handlers:invoke(_hx_e());
end

NETMESSAGE_di_infected.prototype.__class__ =  NETMESSAGE_di_infected

NETMESSAGE_di_infection.new = function() 
  local self = _hx_new(NETMESSAGE_di_infection.prototype)
  NETMESSAGE_di_infection.super(self)
  return self
end
NETMESSAGE_di_infection.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_infection", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_infection"] = NETMESSAGE_di_infection
NETMESSAGE_di_infection.__name__ = true
NETMESSAGE_di_infection.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infection.prototype = _hx_a();
NETMESSAGE_di_infection.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={infection=true},infection=_G.net.ReadFloat()});
  _this.handlers:invoke(event);
end

NETMESSAGE_di_infection.prototype.__class__ =  NETMESSAGE_di_infection

NETMESSAGE_di_infinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_infinfo.prototype)
  NETMESSAGE_di_infinfo.super(self)
  return self
end
NETMESSAGE_di_infinfo.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_infinfo", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_infinfo"] = NETMESSAGE_di_infinfo
NETMESSAGE_di_infinfo.__name__ = true
NETMESSAGE_di_infinfo.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_infinfo.prototype = _hx_a();
NETMESSAGE_di_infinfo.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={inf=true,isinfected=true,target=true},inf=_G.net.ReadFloat(),isinfected=_G.net.ReadBool(),target=_G.net.ReadEntity()});
  _this.handlers:invoke(event);
end

NETMESSAGE_di_infinfo.prototype.__class__ =  NETMESSAGE_di_infinfo

NETMESSAGE_di_raginfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_raginfo.prototype)
  NETMESSAGE_di_raginfo.super(self)
  return self
end
NETMESSAGE_di_raginfo.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_raginfo", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_raginfo"] = NETMESSAGE_di_raginfo
NETMESSAGE_di_raginfo.__name__ = true
NETMESSAGE_di_raginfo.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_raginfo.prototype = _hx_a();
NETMESSAGE_di_raginfo.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={attacker=true,cause=true,inf=true,name=true,rag=true},attacker=_G.net.ReadString(),cause=_G.net.ReadInt(32),inf=_G.net.ReadFloat(),name=_G.net.ReadString(),rag=_G.net.ReadEntity()});
  _this.handlers:invoke(event);
end

NETMESSAGE_di_raginfo.prototype.__class__ =  NETMESSAGE_di_raginfo

NETMESSAGE_di_statinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_statinfo.prototype)
  NETMESSAGE_di_statinfo.super(self)
  return self
end
NETMESSAGE_di_statinfo.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("di_statinfo", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_di_statinfo"] = NETMESSAGE_di_statinfo
NETMESSAGE_di_statinfo.__name__ = true
NETMESSAGE_di_statinfo.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_di_statinfo.prototype = _hx_a();
NETMESSAGE_di_statinfo.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={health=true,inf=true,name=true,stat=true},health=_G.net.ReadFloat(),inf=_G.net.ReadFloat(),name=_G.net.ReadString(),stat=_G.net.ReadEntity()});
  _this.handlers:invoke(event);
end

NETMESSAGE_di_statinfo.prototype.__class__ =  NETMESSAGE_di_statinfo

NETMESSAGE_gamestate.new = function() 
  local self = _hx_new(NETMESSAGE_gamestate.prototype)
  NETMESSAGE_gamestate.super(self)
  return self
end
NETMESSAGE_gamestate.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("gamestate", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_gamestate"] = NETMESSAGE_gamestate
NETMESSAGE_gamestate.__name__ = true
NETMESSAGE_gamestate.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_gamestate.prototype = _hx_a();
NETMESSAGE_gamestate.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={state=true,time=true},state=_G.net.ReadInt(32),time=_G.net.ReadFloat()});
  _this.handlers:invoke(event);
end

NETMESSAGE_gamestate.prototype.__class__ =  NETMESSAGE_gamestate

NETMESSAGE_geiger.new = function() 
  local self = _hx_new(NETMESSAGE_geiger.prototype)
  NETMESSAGE_geiger.super(self)
  return self
end
NETMESSAGE_geiger.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("geiger", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_geiger"] = NETMESSAGE_geiger
NETMESSAGE_geiger.__name__ = true
NETMESSAGE_geiger.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_geiger.prototype = _hx_a();
NETMESSAGE_geiger.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={geiger=true},geiger=_G.net.ReadFloat()});
  _this.handlers:invoke(event);
end

NETMESSAGE_geiger.prototype.__class__ =  NETMESSAGE_geiger

NETMESSAGE_grabend.new = function() 
  local self = _hx_new(NETMESSAGE_grabend.prototype)
  NETMESSAGE_grabend.super(self)
  return self
end
NETMESSAGE_grabend.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("grabend", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_grabend"] = NETMESSAGE_grabend
NETMESSAGE_grabend.__name__ = true
NETMESSAGE_grabend.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_grabend.prototype = _hx_a();
NETMESSAGE_grabend.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={index=true},index=_G.net.ReadInt(32)});
  _this.handlers:invoke(event);
end

NETMESSAGE_grabend.prototype.__class__ =  NETMESSAGE_grabend

NETMESSAGE_grabupdate.new = function() 
  local self = _hx_new(NETMESSAGE_grabupdate.prototype)
  NETMESSAGE_grabupdate.super(self)
  return self
end
NETMESSAGE_grabupdate.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("grabupdate", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_grabupdate"] = NETMESSAGE_grabupdate
NETMESSAGE_grabupdate.__name__ = true
NETMESSAGE_grabupdate.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_grabupdate.prototype = _hx_a();
NETMESSAGE_grabupdate.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={ent=true,ent2=true,index=true},ent=_G.net.ReadEntity(),ent2=_G.net.ReadEntity(),index=_G.net.ReadInt(32)});
  _this.handlers:invoke(event);
end

NETMESSAGE_grabupdate.prototype.__class__ =  NETMESSAGE_grabupdate

NETMESSAGE_statue.new = function() 
  local self = _hx_new(NETMESSAGE_statue.prototype)
  NETMESSAGE_statue.super(self)
  return self
end
NETMESSAGE_statue.super = function(self) 
  self.signalTrigger = __tink_core_SignalTrigger.new();
  self.signal = self.signalTrigger;
  _G.net.Receive("statue", _hx_bind(self,self.receive));
end
_hxClasses["NETMESSAGE_statue"] = NETMESSAGE_statue
NETMESSAGE_statue.__name__ = true
NETMESSAGE_statue.__interfaces__ = {__gmod_I_NET}
NETMESSAGE_statue.prototype = _hx_a();
NETMESSAGE_statue.prototype.receive = function(self) 
  local _this = self.signalTrigger;
  local event = _hx_o({__fields__={playerangle=true,playerbones=true,playermodel=true,playerpos=true,weaponmodel=true},playerangle=_G.net.ReadTable(),playerbones=_G.net.ReadTable(),playermodel=_G.net.ReadString(),playerpos=_G.net.ReadVector(),weaponmodel=_G.net.ReadString()});
  _this.handlers:invoke(event);
end

NETMESSAGE_statue.prototype.__class__ =  NETMESSAGE_statue

__gmod_PanelHelper.new = function(x) 
  local self = _hx_new(__gmod_PanelHelper.prototype)
  __gmod_PanelHelper.super(self,x)
  return self
end
__gmod_PanelHelper.super = function(self,x) 
  self["self"] = x;
end
_hxClasses["gmod.PanelHelper"] = __gmod_PanelHelper
__gmod_PanelHelper.__name__ = true
__gmod_PanelHelper.prototype = _hx_a();

__gmod_PanelHelper.prototype.__class__ =  __gmod_PanelHelper

PanelHelper_Panel.new = function(x) 
  local self = _hx_new(PanelHelper_Panel.prototype)
  PanelHelper_Panel.super(self,x)
  return self
end
PanelHelper_Panel.super = function(self,x) 
  __gmod_PanelHelper.super(self,x);
end
_hxClasses["PanelHelper_Panel"] = PanelHelper_Panel
PanelHelper_Panel.__name__ = true
PanelHelper_Panel.prototype = _hx_a();

PanelHelper_Panel.prototype.__class__ =  PanelHelper_Panel
PanelHelper_Panel.__super__ = __gmod_PanelHelper
setmetatable(PanelHelper_Panel.prototype,{__index=__gmod_PanelHelper.prototype})

PanelHelper_EditablePanel.new = function(x) 
  local self = _hx_new(PanelHelper_EditablePanel.prototype)
  PanelHelper_EditablePanel.super(self,x)
  return self
end
PanelHelper_EditablePanel.super = function(self,x) 
  PanelHelper_Panel.super(self,x);
end
_hxClasses["PanelHelper_EditablePanel"] = PanelHelper_EditablePanel
PanelHelper_EditablePanel.__name__ = true
PanelHelper_EditablePanel.prototype = _hx_a();

PanelHelper_EditablePanel.prototype.__class__ =  PanelHelper_EditablePanel
PanelHelper_EditablePanel.__super__ = PanelHelper_Panel
setmetatable(PanelHelper_EditablePanel.prototype,{__index=PanelHelper_Panel.prototype})

PanelHelper_DFrame.new = function(x) 
  local self = _hx_new(PanelHelper_DFrame.prototype)
  PanelHelper_DFrame.super(self,x)
  return self
end
PanelHelper_DFrame.super = function(self,x) 
  PanelHelper_EditablePanel.super(self,x);
end
_hxClasses["PanelHelper_DFrame"] = PanelHelper_DFrame
PanelHelper_DFrame.__name__ = true
PanelHelper_DFrame.prototype = _hx_a();

PanelHelper_DFrame.prototype.__class__ =  PanelHelper_DFrame
PanelHelper_DFrame.__super__ = PanelHelper_EditablePanel
setmetatable(PanelHelper_DFrame.prototype,{__index=PanelHelper_EditablePanel.prototype})

Reflect.new = {}
_hxClasses["Reflect"] = Reflect
Reflect.__name__ = true
Reflect.compare = function(a,b) 
  if (a == b) then 
    do return 0 end;
  else
    if (a == nil) then 
      do return -1 end;
    else
      if (b == nil) then 
        do return 1 end;
      else
        if (a > b) then 
          do return 1 end;
        else
          do return -1 end;
        end;
      end;
    end;
  end;
end
Reflect.isEnumValue = function(v) 
  if ((v ~= nil) and __lua_Boot.__instanceof(v, _G.table)) then 
    do return v.__enum__ ~= nil end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
_hxClasses["String"] = String
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
_hxClasses["Std"] = Std
Std.__name__ = true
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    if (x < __lua_Boot.Min_Int32) then 
      do return __lua_Boot.Min_Int32 end;
    else
      if (x > __lua_Boot.Max_Int32) then 
        do return __lua_Boot.Max_Int32 end;
      else
        do return _G.math.floor(x) end;
      end;
    end;
  end;
end

Type.new = {}
_hxClasses["Type"] = Type
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o1 = o;
  if (__lua_Boot.__instanceof(o1, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o1, String)) then 
      do return String end;
    else
      local cl = o1.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.resolveClass = function(name) 
  local cl = _hxClasses[name];
  local tmp;
  if (cl ~= nil) then 
    local o = cl;
    tmp = not ((function() 
      local _hx_1
      if (_G.type(o) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = o.__name__; end
      return _hx_1
    end )());
  else
    tmp = true;
  end;
  if (tmp) then 
    do return nil end;
  end;
  do return cl end;
end
Type.createInstance = function(cl,args) 
  do return cl.new(_hx_table.unpack(args, 0)) end;
end

__gmod_hooks_Gm.new = {}
_hxClasses["gmod.hooks.Gm"] = __gmod_hooks_Gm
__gmod_hooks_Gm.__name__ = true
__gmod_hooks_Gm.prototype = _hx_a();
__gmod_hooks_Gm.prototype.postIntialize = function(self) 
end

__gmod_hooks_Gm.prototype.__class__ =  __gmod_hooks_Gm

__gmod_gamemode_BuildOverrides.new = {}
_hxClasses["gmod.gamemode.BuildOverrides"] = __gmod_gamemode_BuildOverrides
__gmod_gamemode_BuildOverrides.__name__ = true

__deceptinfect_DeceptInfect.new = function() 
  local self = _hx_new(__deceptinfect_DeceptInfect.prototype)
  __deceptinfect_DeceptInfect.super(self)
  return self
end
__deceptinfect_DeceptInfect.super = function(self) 
  self.underperforming = false;
  self.timestart = 0;
  GM.CreateClientsideRagdoll = function(GM,...) return self:CreateClientsideRagdoll(...) end;
  GM.Think = function(GM,...) return self:Think(...) end;
  GM.OnEntityCreated = function(GM,...) return self:OnEntityCreated(...) end;
  GM.EntityRemoved = function(GM,...) return self:EntityRemoved(...) end;
  self["self"] = GM;
  __deceptinfect_DeceptInfect.instance = self;
  self:postIntialize();
end
_hxClasses["deceptinfect.DeceptInfect"] = __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__name__ = true
__deceptinfect_DeceptInfect.prototype = _hx_a();
__deceptinfect_DeceptInfect.prototype.CreateClientsideRagdoll = function(self,entity,ragdoll) 
  ragdoll:SetNoDraw(true);
end
__deceptinfect_DeceptInfect.prototype.Think = function(self) 
  __deceptinfect_ecswip_SystemManager.runAllSystems();
end
__deceptinfect_DeceptInfect.prototype.checkPerformance = function(self) 
  if ((_G.FrameTime() > 0.016666666666667) and not self.underperforming) then 
    __haxe_Log.trace("Server underperforming! ", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=72,className="deceptinfect.DeceptInfect",methodName="checkPerformance"}));
    self.underperforming = true;
  else
    if (self.underperforming) then 
      __haxe_Log.trace("Server recovered", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=75,className="deceptinfect.DeceptInfect",methodName="checkPerformance"}));
      self.underperforming = false;
    end;
  end;
end
__deceptinfect_DeceptInfect.prototype.OnEntityCreated = function(self,entity) 
  if (entity:IsPlayer()) then 
    local x = __deceptinfect_ecswip_PlayerComponent.new(entity);
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(x.player);
  end;
end
__deceptinfect_DeceptInfect.prototype.EntityRemoved = function(self,ent) 
  if (ent:IsPlayer()) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(ent.id);
    do return end;
  end;
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(_g1[2]);
  end;
end

__deceptinfect_DeceptInfect.prototype.__class__ =  __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__super__ = __gmod_hooks_Gm
setmetatable(__deceptinfect_DeceptInfect.prototype,{__index=__gmod_hooks_Gm.prototype})

__enumExtractor_EnumExtractor.new = {}
_hxClasses["enumExtractor.EnumExtractor"] = __enumExtractor_EnumExtractor
__enumExtractor_EnumExtractor.__name__ = true
_hxClasses["deceptinfect.GAME_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WAIT","SETTING_UP","PLAYING","ENDING"},4)}
__deceptinfect_GAME_STATE = _hxClasses["deceptinfect.GAME_STATE"];
__deceptinfect_GAME_STATE.WAIT = _hx_tab_array({[0]="WAIT",0,__enum__ = __deceptinfect_GAME_STATE},2)

__deceptinfect_GAME_STATE.SETTING_UP = _hx_tab_array({[0]="SETTING_UP",1,__enum__ = __deceptinfect_GAME_STATE},2)

__deceptinfect_GAME_STATE.PLAYING = _hx_tab_array({[0]="PLAYING",2,__enum__ = __deceptinfect_GAME_STATE},2)

__deceptinfect_GAME_STATE.ENDING = _hx_tab_array({[0]="ENDING",3,__enum__ = __deceptinfect_GAME_STATE},2)


__tink_core_SignalObject.new = {}
_hxClasses["tink.core.SignalObject"] = __tink_core_SignalObject
__tink_core_SignalObject.__name__ = true
__tink_core_SignalObject.prototype = _hx_a();

__tink_core_SignalObject.prototype.__class__ =  __tink_core_SignalObject

__tink_core_SignalTrigger.new = function() 
  local self = _hx_new(__tink_core_SignalTrigger.prototype)
  __tink_core_SignalTrigger.super(self)
  return self
end
__tink_core_SignalTrigger.super = function(self) 
  self.handlers = __tink_core_CallbackList.new();
end
_hxClasses["tink.core.SignalTrigger"] = __tink_core_SignalTrigger
__tink_core_SignalTrigger.__name__ = true
__tink_core_SignalTrigger.__interfaces__ = {__tink_core_SignalObject}
__tink_core_SignalTrigger.prototype = _hx_a();
__tink_core_SignalTrigger.prototype.handle = function(self,cb) 
  local _this = self.handlers;
  local node = __tink_core__Callback_ListCell.new(cb, _this);
  _this.cells:push(node);
  _this.used = _this.used + 1;
  do return node end
end

__tink_core_SignalTrigger.prototype.__class__ =  __tink_core_SignalTrigger

__deceptinfect_GameManager.new = {}
_hxClasses["deceptinfect.GameManager"] = __deceptinfect_GameManager
__deceptinfect_GameManager.__name__ = true
__deceptinfect_GameManager.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_GameManager.init = function() 
  __deceptinfect_GameManager.net_gamestate.signal:handle(__deceptinfect_GameManager.gameStateChanged);
  __deceptinfect_GameManager.net_cleanup.signal:handle(__tink_core__Callback_Callback_Impl_.fromNiladic(__deceptinfect_GameManager.cleanup));
end
__deceptinfect_GameManager.cleanup = function() 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    if (__deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_KeepRestart)[ent1][1] ~= 1) then 
      __deceptinfect_ecswip_ComponentManager.removeEntity(ent1);
    end;
  end;
  __deceptinfect_GameManager.stateTrig.handlers:clear();
  __deceptinfect_ecswip_SystemManager.initAllSystems();
end
__deceptinfect_GameManager.gameStateChanged = function(x) 
  __haxe_Log.trace(Std.string("game state changed ") .. Std.string(Std.string(x)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=325,className="deceptinfect.GameManager",methodName="gameStateChanged"}));
  __deceptinfect_GameManager.state = __deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.toGAME_STATE(x.state);
  local _g = x.state;
  if (_g) == 0 then 
  elseif (_g) == 2 then else end;
end

__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.new = {}
_hxClasses["deceptinfect._GameManager.Net_GAME_STATE_VAL_Impl_"] = __deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.__name__ = true
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.toGAME_STATE = function(this1) 
  if (this1) == 0 then 
    do return __deceptinfect_GAME_STATE.WAIT end;
  elseif (this1) == 1 then 
    do return __deceptinfect_GAME_STATE.SETTING_UP end;
  elseif (this1) == 2 then 
    do return __deceptinfect_GAME_STATE.PLAYING end;
  elseif (this1) == 3 then 
    do return __deceptinfect_GAME_STATE.ENDING end;else
  _G.error("Unhandled net game state conversion",0); end;
end

__deceptinfect_GameValues.new = {}
_hx_exports["GameValues"] = __deceptinfect_GameValues
_hxClasses["deceptinfect.GameValues"] = __deceptinfect_GameValues
__deceptinfect_GameValues.__name__ = true

__deceptinfect_MapStorage.new = {}
_hxClasses["deceptinfect.MapStorage"] = __deceptinfect_MapStorage
__deceptinfect_MapStorage.__name__ = true

__deceptinfect_Misc.new = {}
_hxClasses["deceptinfect.Misc"] = __deceptinfect_Misc
__deceptinfect_Misc.__name__ = true
__deceptinfect_Misc.hmm = function() 
  __deceptinfect_Misc.net_testcl:send(_hx_o({__fields__={name=true},name="lol!!"}));
end

__deceptinfect_PlayerManager.new = {}
_hxClasses["deceptinfect.PlayerManager"] = __deceptinfect_PlayerManager
__deceptinfect_PlayerManager.__name__ = true
__deceptinfect_PlayerManager.addID = function(ent,id) 
  local this1 = __deceptinfect_PlayerManager.indexLookup;
  local key = ent:EntIndex();
  local _this = this1;
  if (id == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = id;
  end;
end
__deceptinfect_PlayerManager.getLocalPlayerID = function() 
  local _g = _G.LocalPlayer().id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  local tmp = _g1[1];
  if (tmp) == 0 then 
    do return _g1[2] end;
  elseif (tmp) == 1 then 
    _G.error("Local player has no id...",0); end;
end

__gmod_swep_SWEP.new = {}
_hxClasses["gmod.swep.SWEP"] = __gmod_swep_SWEP
__gmod_swep_SWEP.__name__ = true
__gmod_swep_SWEP.prototype = _hx_a();
__gmod_swep_SWEP.prototype.PostDrawViewModel = function(self,vm,weapon,ply) 
end
__gmod_swep_SWEP.prototype.Deploy = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.GetViewModelPosition = function(self,EyePos,EyeAng) 
  do return nil end
end
__gmod_swep_SWEP.prototype.TakePrimaryAmmo = function(self,amount) 
end
__gmod_swep_SWEP.prototype.PreDrawViewModel = function(self,vm,weapon,ply) 
end
__gmod_swep_SWEP.prototype.CanSecondaryAttack = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.DrawHUD = function(self) 
end
__gmod_swep_SWEP.prototype.SecondaryAttack = function(self) 
end
__gmod_swep_SWEP.prototype.DrawWeaponSelection = function(self,x,y,width,height,alpha) 
end
__gmod_swep_SWEP.prototype.PrintWeaponInfo = function(self,x,y,alpha) 
end
__gmod_swep_SWEP.prototype.DoImpactEffect = function(self,tr,damageType) 
  do return nil end
end
__gmod_swep_SWEP.prototype.TranslateFOV = function(self,fov) 
  do return nil end
end
__gmod_swep_SWEP.prototype.RenderScreen = function(self) 
end
__gmod_swep_SWEP.prototype.HUDShouldDraw = function(self,element) 
  do return nil end
end
__gmod_swep_SWEP.prototype.DrawWorldModelTranslucent = function(self) 
end
__gmod_swep_SWEP.prototype.Ammo2 = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.ShootEffects = function(self) 
end
__gmod_swep_SWEP.prototype.TakeSecondaryAmmo = function(self,amount) 
end
__gmod_swep_SWEP.prototype.CanPrimaryAttack = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.Reload = function(self) 
end
__gmod_swep_SWEP.prototype.ShootBullet = function(self,damage,num_bullets,aimcone,ammo_type,force,tracer) 
end
__gmod_swep_SWEP.prototype.AdjustMouseSensitivity = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.CustomAmmoDisplay = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.OnRemove = function(self) 
end
__gmod_swep_SWEP.prototype.OwnerChanged = function(self) 
end
__gmod_swep_SWEP.prototype.Initialize = function(self) 
end
__gmod_swep_SWEP.prototype.CalcViewModelView = function(self,ViewModel,OldEyePos,OldEyeAng,EyePos,EyeAng) 
  do return nil end
end
__gmod_swep_SWEP.prototype.GetTracerOrigin = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.CalcView = function(self,ply,pos,ang,fov) 
  do return nil end
end
__gmod_swep_SWEP.prototype.TranslateActivity = function(self,act) 
  do return nil end
end
__gmod_swep_SWEP.prototype.Holster = function(self,weapon) 
  do return nil end
end
__gmod_swep_SWEP.prototype.SetDeploySpeed = function(self,speed) 
end
__gmod_swep_SWEP.prototype.Think = function(self) 
end
__gmod_swep_SWEP.prototype.FireAnimationEvent = function(self,pos,ang,event,options) 
  do return nil end
end
__gmod_swep_SWEP.prototype.DrawWorldModel = function(self) 
end
__gmod_swep_SWEP.prototype.SetupDataTables = function(self) 
end
__gmod_swep_SWEP.prototype.PrimaryAttack = function(self) 
end
__gmod_swep_SWEP.prototype.ViewModelDrawn = function(self,ViewModel) 
end
__gmod_swep_SWEP.prototype.Ammo1 = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.DoDrawCrosshair = function(self,x,y) 
  do return nil end
end
__gmod_swep_SWEP.prototype.ShouldDrawViewModel = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.OnRestore = function(self) 
end
__gmod_swep_SWEP.prototype.OnReloaded = function(self) 
end
__gmod_swep_SWEP.prototype.FreezeMovement = function(self) 
  do return nil end
end
__gmod_swep_SWEP.prototype.SetWeaponHoldType = function(self,name) 
end
__gmod_swep_SWEP.prototype.DrawHUDBackground = function(self) 
end

__gmod_swep_SWEP.prototype.__class__ =  __gmod_swep_SWEP

__gmod_swep_SwepBuild.new = {}
_hxClasses["gmod.swep.SwepBuild"] = __gmod_swep_SwepBuild
__gmod_swep_SwepBuild.__name__ = true
__gmod_swep_SwepBuild.prototype = _hx_a();

__gmod_swep_SwepBuild.prototype.__class__ =  __gmod_swep_SwepBuild

__deceptinfect_Weapon_di_scan.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_Weapon_di_scan.prototype)
  __deceptinfect_Weapon_di_scan.super(self,curEnt)
  return self
end
__deceptinfect_Weapon_di_scan.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Primary=true},Primary=_hx_o({__fields__={DefaultClip=true,ClipSize=true,Automatic=true,Ammo=true},DefaultClip=-1,ClipSize=-1,Automatic=false,Ammo="SMG1"})});
  self["self"] = curEnt;
end
_hx_exports["weapon_di_scan"] = __deceptinfect_Weapon_di_scan
_hxClasses["deceptinfect.Weapon_di_scan"] = __deceptinfect_Weapon_di_scan
__deceptinfect_Weapon_di_scan.__name__ = true
__deceptinfect_Weapon_di_scan.__interfaces__ = {__gmod_swep_SwepBuild}
__deceptinfect_Weapon_di_scan.prototype = _hx_a();
__deceptinfect_Weapon_di_scan.prototype.Initialize = function(self) 
  __haxe_Log.trace("big weapon!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Weapon_di_scan.hx",lineNumber=18,className="deceptinfect.Weapon_di_scan",methodName="Initialize"}));
end

__deceptinfect_Weapon_di_scan.prototype.__class__ =  __deceptinfect_Weapon_di_scan
__deceptinfect_Weapon_di_scan.__super__ = __gmod_swep_SWEP
setmetatable(__deceptinfect_Weapon_di_scan.prototype,{__index=__gmod_swep_SWEP.prototype})

__deceptinfect_ecswip_Component.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_Component.prototype)
  __deceptinfect_ecswip_Component.super(self)
  return self
end
__deceptinfect_ecswip_Component.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.Component"] = __deceptinfect_ecswip_Component
__deceptinfect_ecswip_Component.__name__ = true
__deceptinfect_ecswip_Component.prototype = _hx_a();

__deceptinfect_ecswip_Component.prototype.__class__ =  __deceptinfect_ecswip_Component

__deceptinfect_ecswip_System.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_System.prototype)
  __deceptinfect_ecswip_System.super(self)
  return self
end
__deceptinfect_ecswip_System.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.System"] = __deceptinfect_ecswip_System
__deceptinfect_ecswip_System.__name__ = true
__deceptinfect_ecswip_System.prototype = _hx_a();
__deceptinfect_ecswip_System.prototype.init_client = function(self) 
end
__deceptinfect_ecswip_System.prototype.run_client = function(self) 
end
__deceptinfect_ecswip_System.prototype.init = function(self) 
  self:init_client();
end
__deceptinfect_ecswip_System.prototype.run = function(self) 
  self:run_client();
end

__deceptinfect_ecswip_System.prototype.__class__ =  __deceptinfect_ecswip_System

__deceptinfect_client_ClientOverrides.new = function() 
  local self = _hx_new(__deceptinfect_client_ClientOverrides.prototype)
  __deceptinfect_client_ClientOverrides.super(self)
  return self
end
__deceptinfect_client_ClientOverrides.super = function(self) 
  GM.HUDPaint = function(GM,...) return self:HUDPaint(...) end;
  GM.NotifyShouldTransmit = function(GM,...) return self:NotifyShouldTransmit(...) end;
  GM.PlayerButtonDown = function(GM,...) return self:PlayerButtonDown(...) end;
  GM.PreDrawOpaqueRenderables = function(GM,...) return self:PreDrawOpaqueRenderables(...) end;
  GM.postIntialize = function(GM,...) return self:postIntialize(...) end;
  GM.HUDDrawScoreBoard = function(GM,...) return self:HUDDrawScoreBoard(...) end;
  GM.HUDShouldDraw = function(GM,...) return self:HUDShouldDraw(...) end;
  self["self"] = GM;
  __deceptinfect_client_ClientOverrides.instance = self;
  self:postIntialize();
end
_hxClasses["deceptinfect.client.ClientOverrides"] = __deceptinfect_client_ClientOverrides
__deceptinfect_client_ClientOverrides.__name__ = true
__deceptinfect_client_ClientOverrides.prototype = _hx_a();
__deceptinfect_client_ClientOverrides.prototype.HUDPaint = function(self) 
  __deceptinfect_client_Hud.paint();
end
__deceptinfect_client_ClientOverrides.prototype.NotifyShouldTransmit = function(self,ent,shouldtransmit) 
  local key = ent:EntIndex();
  local _this = __deceptinfect_client_PVS.pvs;
  if (shouldtransmit == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = shouldtransmit;
  end;
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_RagdollSystem):pvsChange(ent, shouldtransmit);
end
__deceptinfect_client_ClientOverrides.prototype.PlayerButtonDown = function(self,ply,button) 
  if (button == _G.KEY_L) then 
    local sab = __deceptinfect_client_SabotagePanel.get_inst();
    if (sab:IsVisible()) then 
      sab:SetVisible(false);
    else
      sab:SetVisible(true);
    end;
  end;
end
__deceptinfect_client_ClientOverrides.prototype.PreDrawOpaqueRenderables = function(self,isDrawingDepth,isDrawSkybox) 
  __deceptinfect_ecswip_GrabSystem.drawCylinders();
  do return nil end
end
__deceptinfect_client_ClientOverrides.prototype.postIntialize = function(self) 
  local entity = __gmod_PairTools.iterator(_G.ents.GetAll());
  while (entity:hasNext()) do 
    local key = entity:next():EntIndex();
    __deceptinfect_client_PVS.pvs.h[key] = true;
  end;
end
__deceptinfect_client_ClientOverrides.prototype.HUDDrawScoreBoard = function(self) 
  do return end
end
__deceptinfect_client_ClientOverrides.prototype.HUDShouldDraw = function(self,name) 
  if (name == "CHudDamageIndicator") then 
    do return false end;
  else
    do return true end;
  end;
end

__deceptinfect_client_ClientOverrides.prototype.__class__ =  __deceptinfect_client_ClientOverrides
__deceptinfect_client_ClientOverrides.__super__ = __gmod_hooks_Gm
setmetatable(__deceptinfect_client_ClientOverrides.prototype,{__index=__gmod_hooks_Gm.prototype})

__deceptinfect_client_GeigerSystem.new = function() 
  local self = _hx_new(__deceptinfect_client_GeigerSystem.prototype)
  __deceptinfect_client_GeigerSystem.super(self)
  return self
end
__deceptinfect_client_GeigerSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hx_exports["geiger"] = __deceptinfect_client_GeigerSystem
_hxClasses["deceptinfect.client.GeigerSystem"] = __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__name__ = true
__deceptinfect_client_GeigerSystem.geigerThink = function() 
  if ((_G.CurTime() > __deceptinfect_client_GeigerSystem.playTime) and (__deceptinfect_client_GeigerSystem.geiger > 0.016)) then 
    local x = __deceptinfect_client_GeigerSystem.geiger;
    local choice = (function() 
      local _hx_1
      if (x < 0.2) then 
      _hx_1 = __deceptinfect_client_GeigerSystem.sounds[0]; else 
      _hx_1 = __deceptinfect_client_GeigerSystem.sounds[_G.math.random(0, 2)]; end
      return _hx_1
    end )();
    local this1 = _G.Vector(0, 0, 0);
    _G.EmitSound(choice, this1, -2, _G.CHAN_STATIC, 0.5);
    local mintime = _G.SoundDuration(__deceptinfect_client_GeigerSystem.sounds[0]) * 0.75;
    local exponent = (0.5 * _G.math.pow(__deceptinfect_client_GeigerSystem.geiger, -0.5)) - 0.5;
    local random = math.random(0.5,1.1);
    local maxtime = 3;
    __deceptinfect_client_GeigerSystem.playTime = _G.math.min((_G.CurTime() + mintime) + (exponent * random), _G.CurTime() + maxtime);
  end;
end
__deceptinfect_client_GeigerSystem.prototype = _hx_a();
__deceptinfect_client_GeigerSystem.prototype.init_client = function(self) 
  __deceptinfect_client_GeigerSystem.net_geiger.signal:handle(function(data) 
    __deceptinfect_client_GeigerSystem.geiger = data.geiger;
  end);
end
__deceptinfect_client_GeigerSystem.prototype.run_client = function(self) 
  __deceptinfect_client_GeigerSystem.geigerThink();
end

__deceptinfect_client_GeigerSystem.prototype.__class__ =  __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_client_GeigerSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})
_hxClasses["deceptinfect.client._Hud.Axis"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="X","Y"},2)}
__deceptinfect_client__Hud_Axis = _hxClasses["deceptinfect.client._Hud.Axis"];
__deceptinfect_client__Hud_Axis.X = _hx_tab_array({[0]="X",0,__enum__ = __deceptinfect_client__Hud_Axis},2)

__deceptinfect_client__Hud_Axis.Y = _hx_tab_array({[0]="Y",1,__enum__ = __deceptinfect_client__Hud_Axis},2)


__deceptinfect_client_Hud.new = {}
_hxClasses["deceptinfect.client.Hud"] = __deceptinfect_client_Hud
__deceptinfect_client_Hud.__name__ = true
__deceptinfect_client_Hud.CSS = function(axis,req) 
  local map = __deceptinfect_client_Hud.cache:get(axis);
  if (map.h[req] == nil) then 
    local multiplier = __deceptinfect_client_Hud.axisToMultiplier(axis);
    local result = _G.math.floor((req / __deceptinfect_client_Hud.baseReso:get(axis)) * multiplier);
    if (result == nil) then 
      map.h[req] = __haxe_ds_IntMap.tnull;
    else
      map.h[req] = result;
    end;
  end;
  local ret = map.h[req];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end;
end
__deceptinfect_client_Hud.axisToMultiplier = function(axis) 
  local tmp = axis[1];
  if (tmp) == 0 then 
    do return _G.ScrW() end;
  elseif (tmp) == 1 then 
    do return _G.ScrH() end; end;
end
__deceptinfect_client_Hud.paint = function() 
  __deceptinfect_client_Hud.targetID();
  __deceptinfect_client_Hud.infectionMeter();
end
__deceptinfect_client_Hud.targetID = function() 
  local target = _G.LocalPlayer():GetEyeTrace().Entity;
  if (not _G.IsValid(target) or not target:IsPlayer()) then 
    do return end;
  end;
  _G.surface.SetTextPos(__deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, 0), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 250));
  _G.surface.SetFont("TargetID");
  _G.surface.DrawText(target:Name());
  local _g = target.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local _hx_tmp = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[_g1[2]];
    if (_hx_tmp[1] == 1) then 
      _G.surface.SetTextPos(__deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, 0), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 300));
      _G.surface.SetFont("TargetID");
      _G.surface.DrawText(_G.string.format("Infection: %6.2f%%", _hx_tmp[2]:getInfValue()));
    end;
  end;
end
__deceptinfect_client_Hud.infectionMeter = function() 
  local inf;
  local _g = __deceptinfect_GameManager.state;
  local _g1 = _G.LocalPlayer().id;
  local _g11 = (function() 
    local _hx_1
    if (_g1 == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g1); end
    return _hx_1
  end )();
  if (_g11[1] == 0) then 
    local _hx_tmp = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[_g11[2]];
    if (_hx_tmp[1] == 1) then 
      if (_g[1] == 2) then 
        inf = _hx_tmp[2];
      else
        do return end;
      end;
    else
      do return end;
    end;
  else
    do return end;
  end;
  _G.surface.SetDrawColor(180, 180, 180, 255);
  _G.surface.DrawRect(__deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, 750), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 825), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, 300), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 30));
  if (inf:getInfValue() < 70) then 
    _G.surface.SetDrawColor(0, 0, 255, 255);
  else
    if (inf:getInfValue() < 90) then 
      _G.surface.SetDrawColor(255, 165, 0, 255);
    else
      if (inf:getInfValue() < 100) then 
        _G.surface.SetDrawColor(255, 0, 0, 255);
      else
        _G.surface.SetDrawColor(128, 0, 128, 255);
      end;
    end;
  end;
  _G.surface.DrawRect(__deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, 750), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 825), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.X, _G.math.floor(3 * inf:getInfValue())), __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 30));
  _G.surface.SetFont("DermaLarge");
  _G.surface.SetTextColor(255, 255, 255);
  _G.surface.SetTextPos(0, __deceptinfect_client_Hud.CSS(__deceptinfect_client__Hud_Axis.Y, 600));
  _G.surface.DrawText(_G.string.format("Infection: %6.3f%% ", inf:getInfValue()));
end

__deceptinfect_client_PVS.new = {}
_hxClasses["deceptinfect.client.PVS"] = __deceptinfect_client_PVS
__deceptinfect_client_PVS.__name__ = true

__deceptinfect_client_SabotagePanel.new = function(x) 
  local self = _hx_new(__deceptinfect_client_SabotagePanel.prototype)
  __deceptinfect_client_SabotagePanel.super(self,x)
  return self
end
__deceptinfect_client_SabotagePanel.super = function(self,x) 
  PanelHelper_DFrame.super(self,x);
end
_hxClasses["deceptinfect.client.SabotagePanel"] = __deceptinfect_client_SabotagePanel
__deceptinfect_client_SabotagePanel.__name__ = true
__deceptinfect_client_SabotagePanel.get_inst = function() 
  if (__deceptinfect_client_SabotagePanel.inst == nil) then 
    __deceptinfect_client_SabotagePanel.inst = _G.vgui.Create("SabotagePanel");
  end;
  do return __deceptinfect_client_SabotagePanel.inst end;
end
__deceptinfect_client_SabotagePanel.register = function() 
  local PANEL = ({});
  PANEL.Init = function(dis,...) dis._gHaxeBurrow = __deceptinfect_client_SabotagePanel.new(dis) dis._gHaxeBurrow:Init(...) end;
  _G.vgui.Register("SabotagePanel", PANEL, "DFrame");
end
__deceptinfect_client_SabotagePanel.prototype = _hx_a();
__deceptinfect_client_SabotagePanel.prototype.Init = function(self) 
  __haxe_Log.trace("Panel created", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/client/SabotagePanel.hx",lineNumber=22,className="deceptinfect.client.SabotagePanel",methodName="Init"}));
  self["self"]:SetPos(960., 540.);
  self["self"]:SetSize(600, 400);
  self["self"]:SetTitle("Sabotage");
  self["self"]:MouseCapture(true);
  self["self"]:SetVisible(false);
  self["self"]:SetDraggable(true);
  self["self"]:ShowCloseButton(true);
end

__deceptinfect_client_SabotagePanel.prototype.__class__ =  __deceptinfect_client_SabotagePanel
__deceptinfect_client_SabotagePanel.__super__ = PanelHelper_DFrame
setmetatable(__deceptinfect_client_SabotagePanel.prototype,{__index=PanelHelper_DFrame.prototype})

__haxe_IMap.new = {}
_hxClasses["haxe.IMap"] = __haxe_IMap
__haxe_IMap.__name__ = true

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
_hxClasses["haxe.ds.ObjectMap"] = __haxe_ds_ObjectMap
__haxe_ds_ObjectMap.__name__ = true
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_a();
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end
__haxe_ds_ObjectMap.prototype.iterator = function(self) 
  local _gthis = self;
  local itr = self:keys();
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(_,...) return _hx_bind(itr,itr.hasNext)(...) end,next=function(self) 
    do return _gthis.h[itr:next()] end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__deceptinfect_ecswip_ComponentManager.new = {}
_hxClasses["deceptinfect.ecswip.ComponentManager"] = __deceptinfect_ecswip_ComponentManager
__deceptinfect_ecswip_ComponentManager.__name__ = true
__deceptinfect_ecswip_ComponentManager.addGEnt = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addEntity();
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_GEntityComponent.new(x), id);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(x)), id);
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.getOrAdd = function(id,cls,args) 
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(cls)[id];
  local tmp = _g[1];
  if (tmp) == 0 then 
    if (args == nil) then 
      args = _hx_tab_array({}, 0);
    end;
    local inst = Type.createInstance(cls, args);
    __deceptinfect_ecswip_ComponentManager.addComponent(inst, id);
    do return inst end;
  elseif (tmp) == 1 then 
    do return _g[2] end; end;
end
__deceptinfect_ecswip_ComponentManager.addPlayer = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_PlayerComponent.new(x), id);
  __deceptinfect_PlayerManager.addID(x, id);
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.addComponent = function(x,to) 
  local cls = Type.getClass(x);
  local comparray = __deceptinfect_ecswip_ComponentManager.lazyInit(cls);
  if (__deceptinfect_ecswip_ComponentManager.componentSignals.k[cls] ~= nil) then 
    __deceptinfect_ecswip_ComponentManager.componentSignals.h[cls].handlers:invoke(_hx_o({__fields__={ent=true,comp=true},ent=to,comp=x}));
  end;
  comparray[to] = __deceptinfect_ecswip_ComponentState.Comp(x);
end
__deceptinfect_ecswip_ComponentManager.lazyInit = function(x) 
  local comparray = __deceptinfect_ecswip_ComponentManager.components.h[x];
  if (comparray == nil) then 
    comparray = _hx_tab_array({}, 0);
    local _this = __deceptinfect_ecswip_ComponentManager.components;
    _this.h[x] = comparray;
    _this.k[x] = true;
    local entity = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
    while (entity:hasNext()) do 
      comparray[entity:next()] = __deceptinfect_ecswip_ComponentState.NONE;
    end;
  end;
  do return comparray end;
end
__deceptinfect_ecswip_ComponentManager.removeEntity = function(x) 
  local component = __deceptinfect_ecswip_ComponentManager.components:iterator();
  while (component:hasNext()) do 
    component:next()[x] = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities - 1;
end
__deceptinfect_ecswip_ComponentManager.addToAllCompArrays = function() 
  local compArray = __deceptinfect_ecswip_ComponentManager.components:iterator();
  while (compArray:hasNext()) do 
    compArray:next():push(__deceptinfect_ecswip_ComponentState.NONE);
  end;
end
__deceptinfect_ecswip_ComponentManager.addEntity = function() 
  __deceptinfect_ecswip_ComponentManager.entities = __deceptinfect_ecswip_ComponentManager.entities + 1;
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities + 1;
  __deceptinfect_ecswip_ComponentManager.addToAllCompArrays();
  do return __deceptinfect_ecswip_ComponentManager.entities - 1 end;
end
_hxClasses["deceptinfect.ecswip.ComponentState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NONE","Comp"},2)}
__deceptinfect_ecswip_ComponentState = _hxClasses["deceptinfect.ecswip.ComponentState"];
__deceptinfect_ecswip_ComponentState.NONE = _hx_tab_array({[0]="NONE",0,__enum__ = __deceptinfect_ecswip_ComponentState},2)

__deceptinfect_ecswip_ComponentState.Comp = function(comp) local _x = _hx_tab_array({[0]="Comp",1,comp,__enum__=__deceptinfect_ecswip_ComponentState}, 3); return _x; end 

__deceptinfect_ecswip_GEntityComponent.new = function(e) 
  local self = _hx_new(__deceptinfect_ecswip_GEntityComponent.prototype)
  __deceptinfect_ecswip_GEntityComponent.super(self,e)
  return self
end
__deceptinfect_ecswip_GEntityComponent.super = function(self,e) 
  __deceptinfect_ecswip_Component.super(self);
  self.entity = e;
end
_hxClasses["deceptinfect.ecswip.GEntityComponent"] = __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__name__ = true
__deceptinfect_ecswip_GEntityComponent.prototype = _hx_a();

__deceptinfect_ecswip_GEntityComponent.prototype.__class__ =  __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GEntityComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_GrabDraw.new = function(ent1,ent2) 
  local self = _hx_new(__deceptinfect_ecswip_GrabDraw.prototype)
  __deceptinfect_ecswip_GrabDraw.super(self,ent1,ent2)
  return self
end
__deceptinfect_ecswip_GrabDraw.super = function(self,ent1,ent2) 
  __deceptinfect_ecswip_Component.super(self);
  self.ent1 = ent1;
  self.ent2 = ent2;
end
_hxClasses["deceptinfect.ecswip.GrabDraw"] = __deceptinfect_ecswip_GrabDraw
__deceptinfect_ecswip_GrabDraw.__name__ = true
__deceptinfect_ecswip_GrabDraw.prototype = _hx_a();

__deceptinfect_ecswip_GrabDraw.prototype.__class__ =  __deceptinfect_ecswip_GrabDraw
__deceptinfect_ecswip_GrabDraw.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GrabDraw.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_GrabSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_GrabSystem.prototype)
  __deceptinfect_ecswip_GrabSystem.super(self)
  return self
end
__deceptinfect_ecswip_GrabSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.ecswip.GrabSystem"] = __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__name__ = true
__deceptinfect_ecswip_GrabSystem.updateSig = function(data) 
  if (__deceptinfect_ecswip_GrabSystem.activeDraws.h[data.index] == nil) then 
    __haxe_Log.trace(Std.string("activated grab ") .. Std.string(data.index), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=39,className="deceptinfect.ecswip.GrabSystem",methodName="updateSig"}));
    local draw = __deceptinfect_ecswip_ComponentManager.addEntity();
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_GrabDraw.new(data.ent, data.ent2), draw);
    local key = data.index;
    local _this = __deceptinfect_ecswip_GrabSystem.activeDraws;
    if (draw == nil) then 
      _this.h[key] = __haxe_ds_IntMap.tnull;
    else
      _this.h[key] = draw;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.remove = function(data) 
  __haxe_Log.trace(Std.string("delete grab ") .. Std.string(data.index), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=47,className="deceptinfect.ecswip.GrabSystem",methodName="remove"}));
  if (__deceptinfect_ecswip_GrabSystem.activeDraws.h[data.index] ~= nil) then 
    local ret = __deceptinfect_ecswip_GrabSystem.activeDraws.h[data.index];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    __deceptinfect_ecswip_ComponentManager.removeEntity(ret);
  else
    __deceptinfect_ecswip_GrabSystem.activeDraws.h[data.index] = __haxe_ds_IntMap.tnull;
  end;
end
__deceptinfect_ecswip_GrabSystem.drawCylinders = function() 
  local ent = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent:hasNext()) do 
    local ent1 = ent:next();
    local _g1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GrabDraw)[ent1];
    if (_g1[1] == 1) then 
      local _g2 = _g1[2];
      local tmp;
      local key = _g2.ent1:EntIndex();
      local ret = __deceptinfect_client_PVS.pvs.h[key];
      if (ret == __haxe_ds_IntMap.tnull) then 
        ret = nil;
      end;
      if (not ret) then 
        local key1 = _g2.ent2:EntIndex();
        local ret1 = __deceptinfect_client_PVS.pvs.h[key1];
        if (ret1 == __haxe_ds_IntMap.tnull) then 
          ret1 = nil;
        end;
        tmp = ret1;
      else
        tmp = true;
      end;
      if (tmp) then 
        local posProduce = _g2.ent1:GetPos();
        local posVic = _g2.ent2:GetPos();
        _G.render.SetMaterial(__deceptinfect_ecswip_GrabSystem.hycord);
        _G.render.DrawBeam(posProduce, posVic, 24, 0, 1, _hx_o({__fields__={r=true,g=true,b=true,a=true},r=128,g=0,b=255,a=255}));
      else
        __deceptinfect_ecswip_ComponentManager.removeEntity(ent1);
      end;
    end;
  end;
  do return nil end;
end
__deceptinfect_ecswip_GrabSystem.prototype = _hx_a();
__deceptinfect_ecswip_GrabSystem.prototype.init_client = function(self) 
  __deceptinfect_ecswip_GrabSystem.net_grabupdate.signal:handle(__deceptinfect_ecswip_GrabSystem.updateSig);
  __deceptinfect_ecswip_GrabSystem.net_grabend.signal:handle(__deceptinfect_ecswip_GrabSystem.remove);
end

__deceptinfect_ecswip_GrabSystem.prototype.__class__ =  __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_ecswip_GrabSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_HiddenHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_HiddenHealthSystem.prototype)
  __deceptinfect_ecswip_HiddenHealthSystem.super(self)
  return self
end
__deceptinfect_ecswip_HiddenHealthSystem.super = function(self) 
  __deceptinfect_client_GeigerSystem.super(self);
end
_hxClasses["deceptinfect.ecswip.HiddenHealthSystem"] = __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__name__ = true
__deceptinfect_ecswip_HiddenHealthSystem.prototype = _hx_a();

__deceptinfect_ecswip_HiddenHealthSystem.prototype.__class__ =  __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__super__ = __deceptinfect_client_GeigerSystem
setmetatable(__deceptinfect_ecswip_HiddenHealthSystem.prototype,{__index=__deceptinfect_client_GeigerSystem.prototype})

__deceptinfect_ecswip_PlayerComponent.new = function(x) 
  local self = _hx_new(__deceptinfect_ecswip_PlayerComponent.prototype)
  __deceptinfect_ecswip_PlayerComponent.super(self,x)
  return self
end
__deceptinfect_ecswip_PlayerComponent.super = function(self,x) 
  __deceptinfect_ecswip_Component.super(self);
  self.player = x;
end
_hxClasses["deceptinfect.ecswip.PlayerComponent"] = __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__name__ = true
__deceptinfect_ecswip_PlayerComponent.prototype = _hx_a();

__deceptinfect_ecswip_PlayerComponent.prototype.__class__ =  __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_PlayerComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_SignalStorage.new = {}
_hxClasses["deceptinfect.ecswip.SignalStorage"] = __deceptinfect_ecswip_SignalStorage
__deceptinfect_ecswip_SignalStorage.__name__ = true
__deceptinfect_ecswip_SignalStorage.initEvents = function() 
  __deceptinfect_ecswip_SignalStorage.entDamage = __deceptinfect_ecswip_SignalStorage.entDamageTrigger;
  __deceptinfect_ecswip_SignalStorage.onInfected = __deceptinfect_ecswip_SignalStorage.onInfectedTrigger;
end

__deceptinfect_infection_InfectionSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionSystem.prototype)
  __deceptinfect_infection_InfectionSystem.super(self)
  return self
end
__deceptinfect_infection_InfectionSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.InfectionSystem"] = __deceptinfect_infection_InfectionSystem
__deceptinfect_infection_InfectionSystem.__name__ = true
__deceptinfect_infection_InfectionSystem.prototype = _hx_a();
__deceptinfect_infection_InfectionSystem.prototype.init_client = function(self) 
  __deceptinfect_infection_InfectionSystem.net_inf.signal:handle(_hx_bind(self,self.recvInfection));
  __deceptinfect_infection_InfectionSystem.net_infected.signal:handle(_hx_bind(self,self.onInfectedCl));
end
__deceptinfect_infection_InfectionSystem.prototype.onInfectedCl = function(self,data) 
  __haxe_Log.trace("Recieved infected data", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=32,className="deceptinfect.infection.InfectionSystem",methodName="onInfectedCl"}));
  local this1 = __deceptinfect_PlayerManager.getLocalPlayerID();
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[this1];
  if (_g[1] == 1) then 
    local _g1 = _g[2];
    _g1:set_infection(__deceptinfect_infection_INF_STATE.INFECTED);
    local this2 = __deceptinfect_PlayerManager.getLocalPlayerID();
    __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_infection_InfectedComponent.new(), this2);
    __haxe_Log.trace(_g1, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=37,className="deceptinfect.infection.InfectionSystem",methodName="onInfectedCl"}));
  else
    __haxe_Log.trace("no...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=39,className="deceptinfect.infection.InfectionSystem",methodName="onInfectedCl"}));
    local c_inf = __deceptinfect_infection_InfectionComponent.new();
    __deceptinfect_ecswip_ComponentManager.addComponent(c_inf, __deceptinfect_PlayerManager.getLocalPlayerID());
    c_inf:set_infection(__deceptinfect_infection_INF_STATE.INFECTED);
  end;
end
__deceptinfect_infection_InfectionSystem.prototype.recvInfection = function(self,data) 
  local this1 = __deceptinfect_PlayerManager.getLocalPlayerID();
  local _g = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_infection_InfectionComponent)[this1];
  if (_g[1] == 1) then 
    local _g1 = _g[2].infection;
    if (_g1[1] == 0) then 
      _g1[2][0] = data.infection;
    end;
  else
    __haxe_Log.trace("nu shit", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/InfectionSystem.hx",lineNumber=62,className="deceptinfect.infection.InfectionSystem",methodName="recvInfection"}));
    local c_inf = __deceptinfect_infection_InfectionComponent.new();
    __deceptinfect_ecswip_ComponentManager.addComponent(c_inf, __deceptinfect_PlayerManager.getLocalPlayerID());
    local v = data.infection;
    local ret = ({length = 1});
    ret[0] = v;
    c_inf:set_infection(__deceptinfect_infection_INF_STATE.NOT_INFECTED(ret));
  end;
end

__deceptinfect_infection_InfectionSystem.prototype.__class__ =  __deceptinfect_infection_InfectionSystem
__deceptinfect_infection_InfectionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_InfectionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_VirtualPosition.new = function(choice) 
  local self = _hx_new(__deceptinfect_ecswip_VirtualPosition.prototype)
  __deceptinfect_ecswip_VirtualPosition.super(self,choice)
  return self
end
__deceptinfect_ecswip_VirtualPosition.super = function(self,choice) 
  __deceptinfect_ecswip_Component.super(self);
  local tmp = choice[1];
  if (tmp) == 0 then 
    self.ent = choice[2];
  elseif (tmp) == 1 then 
    self:set_pos(choice[2]);
    self:set_ang(choice[3]); end;
end
_hxClasses["deceptinfect.ecswip.VirtualPosition"] = __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__name__ = true
__deceptinfect_ecswip_VirtualPosition.prototype = _hx_a();
__deceptinfect_ecswip_VirtualPosition.prototype.set_pos = function(self,set) 
  if (self.ent == nil) then 
    self.pos = set do return self.pos end;
  else
    self.ent:SetPos(set);
    do return set end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.set_ang = function(self,set) 
  if (self.ent == nil) then 
    self.ang = set do return self.ang end;
  else
    self.ent:SetAngles(set);
    do return set end;
  end;
end

__deceptinfect_ecswip_VirtualPosition.prototype.__class__ =  __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_VirtualPosition.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_RadiationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadiationSystem.prototype)
  __deceptinfect_radiation_RadiationSystem.super(self)
  return self
end
__deceptinfect_radiation_RadiationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadiationSystem"] = __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__name__ = true
__deceptinfect_radiation_RadiationSystem.testRadiation = function(vec) 
  local ent = __deceptinfect_ecswip_ComponentManager.addEntity();
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.REAL(vec, _G.Angle(0, 0, 0))), ent);
end
_hx_exports["testRadiation"] = __deceptinfect_radiation_RadiationSystem.testRadiation
__deceptinfect_radiation_RadiationSystem.prototype = _hx_a();

__deceptinfect_radiation_RadiationSystem.prototype.__class__ =  __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadiationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_WinSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_WinSystem.prototype)
  __deceptinfect_game_WinSystem.super(self)
  return self
end
__deceptinfect_game_WinSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.WinSystem"] = __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__name__ = true
__deceptinfect_game_WinSystem.prototype = _hx_a();

__deceptinfect_game_WinSystem.prototype.__class__ =  __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_WinSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_BatterySystem.new = function() 
  local self = _hx_new(__deceptinfect_game_BatterySystem.prototype)
  __deceptinfect_game_BatterySystem.super(self)
  return self
end
__deceptinfect_game_BatterySystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.BatterySystem"] = __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__name__ = true
__deceptinfect_game_BatterySystem.prototype = _hx_a();

__deceptinfect_game_BatterySystem.prototype.__class__ =  __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_BatterySystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SpawnPointTable.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnPointTable.prototype)
  __deceptinfect_game_SpawnPointTable.super(self)
  return self
end
__deceptinfect_game_SpawnPointTable.super = function(self) 
  self.spawns = _hx_tab_array({}, 0);
end
_hxClasses["deceptinfect.game.SpawnPointTable"] = __deceptinfect_game_SpawnPointTable
__deceptinfect_game_SpawnPointTable.__name__ = true
__deceptinfect_game_SpawnPointTable.prototype = _hx_a();
__deceptinfect_game_SpawnPointTable.prototype.generateSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local point = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_Spawn.new(self, point));
  end;
  local _g1 = 0;
  local _g2 = self.spawns;
  while (_g1 < _g2.length) do 
    local spawn = _g2[_g1];
    _g1 = _g1 + 1;
    local _g11 = 0;
    local _g21 = self.spawns;
    while (_g11 < _g21.length) do 
      local spawn2 = _g21[_g11];
      _g11 = _g11 + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end
__deceptinfect_game_SpawnPointTable.prototype.generateBoundSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local minmax = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_BoundsSpawn.new(self, __deceptinfect_util_MinMaxTools.getCenter(minmax), minmax));
  end;
  local _g1 = 0;
  local _g2 = self.spawns;
  while (_g1 < _g2.length) do 
    local spawn = _g2[_g1];
    _g1 = _g1 + 1;
    local _g11 = 0;
    local _g21 = self.spawns;
    while (_g11 < _g21.length) do 
      local spawn2 = _g21[_g11];
      _g11 = _g11 + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end

__deceptinfect_game_SpawnPointTable.prototype.__class__ =  __deceptinfect_game_SpawnPointTable

__deceptinfect_game_SpawnSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnSystem.prototype)
  __deceptinfect_game_SpawnSystem.super(self)
  return self
end
__deceptinfect_game_SpawnSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.SpawnSystem"] = __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__name__ = true
__deceptinfect_game_SpawnSystem.generateSpawns = function() 
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.obj:generateSpawns(ret.objectives);
  local this11 = __deceptinfect_MapStorage.spawns;
  local key1 = _G.game.GetMap();
  local ret1 = this11.h[key1];
  if (ret1 == __haxe_ds_StringMap.tnull) then 
    ret1 = nil;
  end;
  __deceptinfect_game_SpawnSystem.item:generateSpawns(ret1.items);
  local this12 = __deceptinfect_MapStorage.spawns;
  local key2 = _G.game.GetMap();
  local ret2 = this12.h[key2];
  if (ret2 == __haxe_ds_StringMap.tnull) then 
    ret2 = nil;
  end;
  __deceptinfect_game_SpawnSystem.nest:generateSpawns(ret2.nests);
  local this13 = __deceptinfect_MapStorage.spawns;
  local key3 = _G.game.GetMap();
  local ret3 = this13.h[key3];
  if (ret3 == __haxe_ds_StringMap.tnull) then 
    ret3 = nil;
  end;
  __deceptinfect_game_SpawnSystem.evac:generateBoundSpawns(ret3.evacs);
end
__deceptinfect_game_SpawnSystem.prototype = _hx_a();

__deceptinfect_game_SpawnSystem.prototype.__class__ =  __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SpawnSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_statuses_WalkthroughSystem.new = function() 
  local self = _hx_new(__deceptinfect_statuses_WalkthroughSystem.prototype)
  __deceptinfect_statuses_WalkthroughSystem.super(self)
  return self
end
__deceptinfect_statuses_WalkthroughSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.statuses.WalkthroughSystem"] = __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__name__ = true
__deceptinfect_statuses_WalkthroughSystem.prototype = _hx_a();

__deceptinfect_statuses_WalkthroughSystem.prototype.__class__ =  __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_statuses_WalkthroughSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_NestSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_NestSystem.prototype)
  __deceptinfect_game_NestSystem.super(self)
  return self
end
__deceptinfect_game_NestSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.NestSystem"] = __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__name__ = true
__deceptinfect_game_NestSystem.prototype = _hx_a();

__deceptinfect_game_NestSystem.prototype.__class__ =  __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_NestSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_EvacSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_EvacSystem.prototype)
  __deceptinfect_game_EvacSystem.super(self)
  return self
end
__deceptinfect_game_EvacSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.EvacSystem"] = __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__name__ = true
__deceptinfect_game_EvacSystem.prototype = _hx_a();
__deceptinfect_game_EvacSystem.prototype.init_client = function(self) 
  __deceptinfect_game_EvacSystem.evac_state.signal:handle(_hx_bind(self,self.changeEvacState));
end
__deceptinfect_game_EvacSystem.prototype.changeEvacState = function(self,x) 
  local _g1 = x.time;
  local _g = x.state;
  if (_g) == 0 then 
  elseif (_g) == 1 then 
  elseif (_g) == 2 then 
    local t = _g1;
    __deceptinfect_util_Util.printTimer("BOOOGA", 3, function() 
      __haxe_Log.trace(Std.string("leaving!!..") .. Std.string(t), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=34,className="deceptinfect.game.EvacSystem",methodName="changeEvacState"}));
      do return end;
    end);else
  __deceptinfect_util_Util.printTimer("oogieboogie", 5, function() 
    __haxe_Log.trace("Invalid state for hud...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=36,className="deceptinfect.game.EvacSystem",methodName="changeEvacState"}));
    do return end;
  end); end;
end

__deceptinfect_game_EvacSystem.prototype.__class__ =  __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_EvacSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_RagdollSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_RagdollSystem.prototype)
  __deceptinfect_game_RagdollSystem.super(self)
  return self
end
__deceptinfect_game_RagdollSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.RagdollSystem"] = __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__name__ = true
__deceptinfect_game_RagdollSystem.prototype = _hx_a();
__deceptinfect_game_RagdollSystem.prototype.init_client = function(self) 
  __deceptinfect_game_RagdollSystem.statue.signal:handle(_hx_bind(self,self.newStatue));
  __deceptinfect_game_RagdollSystem.raginfo.signal:handle(_hx_bind(self,self.recvraginfo));
  __deceptinfect_game_RagdollSystem.statueinfo.signal:handle(_hx_bind(self,self.recvstatinfo));
end
__deceptinfect_game_RagdollSystem.prototype.recvraginfo = function(self,x) 
  local c_raginfo;
  local x1 = x.rag;
  local _g;
  if (_G.IsValid(x1)) then 
    local _g1 = x1.id;
    _g = (function() 
      local _hx_1
      if (_g1 == nil) then 
      _hx_1 = __haxe_ds_Option.None; else 
      _hx_1 = __haxe_ds_Option.Some(_g1); end
      return _hx_1
    end )();
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local args = nil;
    c_raginfo = __deceptinfect_ecswip_ComponentManager.getOrAdd(_g[2], __deceptinfect_game_RagInfo, args);
  else
    if (_G.IsValid(x.rag)) then 
      local x2 = x.rag;
      x2.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x2);
      local c_rag = __deceptinfect_game_RagInfo.new();
      __deceptinfect_ecswip_ComponentManager.addComponent(c_rag, x2.id);
      c_raginfo = c_rag;
    else
      do return end;
    end;
  end;
  c_raginfo.inf = _hx_funcToField(x.inf);
  c_raginfo.name = _hx_funcToField(x.name);
  c_raginfo.attacker = _hx_funcToField(x.attacker);
end
__deceptinfect_game_RagdollSystem.prototype.recvstatinfo = function(self,x) 
  local c_statinfo;
  local _g = __deceptinfect_util_EntityExt.validID2(x.stat);
  local c_statinfo1 = _g[1];
  if (c_statinfo1) == 0 then 
    local args = nil;
    c_statinfo = __deceptinfect_ecswip_ComponentManager.getOrAdd(_g[2], __deceptinfect_game_StatInfo, args);
  elseif (c_statinfo1) == 1 then 
    local x1 = x.stat;
    x1.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x1);
    local c_stat = __deceptinfect_game_StatInfo.new();
    __deceptinfect_ecswip_ComponentManager.addComponent(c_stat, x1.id);
    c_statinfo = c_stat;
  elseif (c_statinfo1) == 2 then 
    do return end; end;
  c_statinfo.health = _hx_funcToField(x.health);
  c_statinfo.inf = _hx_funcToField(x.inf);
  c_statinfo.name = _hx_funcToField(x.name);
end
__deceptinfect_game_RagdollSystem.prototype.pvsChange = function(self,ent,shouldTransmit) 
  local _g = ent.id;
  local _g1 = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g1[1] == 0) then 
    local _g11 = _g1[2];
    local _g2 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_Statue)[_g11];
    local _g12 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent)[_g11];
    if (_g12[1] == 1) then 
      if (_g2[1] == 1) then 
        local _g3 = _g2[2];
        local _hx_tmp;
        _hx_tmp = _g12[2].entity;
        __haxe_Log.trace("THing changed", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=117,className="deceptinfect.game.RagdollSystem",methodName="pvsChange"}));
        if (shouldTransmit) then 
          _g3.weapon:SetParent();
          _g3.weapon:SetParent(_hx_tmp);
        end;
      end;
    end;
  end;
end
__deceptinfect_game_RagdollSystem.prototype.newStatue = function(self,x) 
  local rag = _G.ClientsideModel(x.playermodel);
  local wep = _G.ClientsideModel(x.weaponmodel);
  rag:SetPos(x.playerpos);
  rag:AddCallback("BuildBonePositions", function(rag1,numbones) 
    local _g = 0;
    local _g1 = numbones;
    while (_g < _g1) do 
      _g = _g + 1;
      local boneid = _g - 1;
      if (x.playerbones[boneid] == nil) then 
        local this1 = rag1:GetBonePosition(boneid);
        local otherVec = rag1:GetBonePosition(0);
        local offset = this1 - otherVec;
        local this11 = x.playerbones[0];
        rag1:SetBonePosition(boneid, this11 + offset, _G.Angle(0, 0, 0));
      end;
    end;
    local done_h = ({});
    local _g2 = __gmod_PairTools.keyValueIterator(x.playerbones);
    while (_g2:hasNext()) do 
      local _g3 = _g2:next();
      local boneid1 = _g3.key;
      local ang = x.playerangle[boneid1];
      done_h[boneid1] = true;
      rag1:SetBonePosition(boneid1, _g3.value, ang);
    end;
  end);
  wep:SetupBones();
  wep:AddEffects(_G.EF_BONEMERGE);
  wep:AddEffects(_G.EF_BONEMERGE_FASTCULL);
  wep:SetParent(rag);
end
__deceptinfect_game_RagdollSystem.prototype.run_client = function(self) 
  local rag = __gmod_PairTools.iterator(_G.ents.GetAll());
  while (rag:hasNext()) do 
    local rag1 = rag:next();
    local mdl = rag1:GetNWString("showwep");
    if (((mdl ~= nil) and (mdl ~= "")) and (rag1.showwep == nil)) then 
      local this1 = rag1;
      rag1.id = __deceptinfect_ecswip_ComponentManager.addGEnt(this1);
      local _rag = this1;
      local c_stat = __deceptinfect_game_Statue.new();
      __deceptinfect_ecswip_ComponentManager.addComponent(c_stat, _rag.id);
      __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_KeepRestart.new(), _rag.id);
      __haxe_Log.trace(mdl, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=179,className="deceptinfect.game.RagdollSystem",methodName="run_client"}));
      rag1.showwep = true;
      local x = _G.ClientsideModel(mdl);
      local this2 = x;
      x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(this2);
      local ent = this2;
      local c_wep = __deceptinfect_game_ClientWeaponStatue.new();
      c_wep.parent = rag1;
      __deceptinfect_ecswip_ComponentManager.addComponent(c_wep, ent.id);
      __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_KeepRestart.new(), ent.id);
      ent:SetupBones();
      ent:AddEffects(_G.EF_BONEMERGE);
      ent:AddEffects(_G.EF_BONEMERGE_FASTCULL);
      ent:SetParent(rag1);
      c_stat.weapon = ent;
    end;
  end;
  local ent1 = IntIterator.new(0, __deceptinfect_ecswip_ComponentManager.entities);
  while (ent1:hasNext()) do 
    local ent2 = ent1:next();
    local comparray = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_game_ClientWeaponStatue);
    local _g1 = comparray[ent2];
    local comparray1 = __deceptinfect_ecswip_ComponentManager.lazyInit(__deceptinfect_ecswip_GEntityComponent);
    local _g2 = comparray1[ent2];
    if (_g2[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g2[2].entity;
        local gent = _hx_tmp;
        local c_stat1 = _g1[2];
        if (not _G.IsValid(c_stat1.parent)) then 
          gent:Remove();
        end;
      end;
    end;
  end;
end

__deceptinfect_game_RagdollSystem.prototype.__class__ =  __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_RagdollSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SlowMotionSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SlowMotionSystem.prototype)
  __deceptinfect_game_SlowMotionSystem.super(self)
  return self
end
__deceptinfect_game_SlowMotionSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.SlowMotionSystem"] = __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__name__ = true
__deceptinfect_game_SlowMotionSystem.prototype = _hx_a();

__deceptinfect_game_SlowMotionSystem.prototype.__class__ =  __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SlowMotionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_infection_InfectionLookSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionLookSystem.prototype)
  __deceptinfect_infection_InfectionLookSystem.super(self)
  return self
end
__deceptinfect_infection_InfectionLookSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.InfectionLookSystem"] = __deceptinfect_infection_InfectionLookSystem
__deceptinfect_infection_InfectionLookSystem.__name__ = true
__deceptinfect_infection_InfectionLookSystem.prototype = _hx_a();
__deceptinfect_infection_InfectionLookSystem.prototype.init_client = function(self) 
  __deceptinfect_infection_InfectionLookSystem.infectioninfo.signal:handle(_hx_bind(self,self.recvInfectionInfo));
end
__deceptinfect_infection_InfectionLookSystem.prototype.recvInfectionInfo = function(self,x) 
  local args = nil;
  local c_inf = __deceptinfect_ecswip_ComponentManager.getOrAdd(x.target.id, __deceptinfect_infection_InfectionComponent, args);
  if (x.isinfected) then 
    c_inf:set_infection(__deceptinfect_infection_INF_STATE.INFECTED);
  else
    local v = x.inf;
    local ret = ({length = 1});
    ret[0] = v;
    c_inf:set_infection(__deceptinfect_infection_INF_STATE.NOT_INFECTED(ret));
  end;
end

__deceptinfect_infection_InfectionLookSystem.prototype.__class__ =  __deceptinfect_infection_InfectionLookSystem
__deceptinfect_infection_InfectionLookSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_InfectionLookSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_ContaminationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_ContaminationSystem.prototype)
  __deceptinfect_radiation_ContaminationSystem.super(self)
  return self
end
__deceptinfect_radiation_ContaminationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.ContaminationSystem"] = __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__name__ = true
__deceptinfect_radiation_ContaminationSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_radiation_ContaminationSystem.prototype = _hx_a();

__deceptinfect_radiation_ContaminationSystem.prototype.__class__ =  __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_ContaminationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_RadSourceSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadSourceSystem.prototype)
  __deceptinfect_radiation_RadSourceSystem.super(self)
  return self
end
__deceptinfect_radiation_RadSourceSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadSourceSystem"] = __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__name__ = true
__deceptinfect_radiation_RadSourceSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_radiation_RadSourceSystem.prototype = _hx_a();

__deceptinfect_radiation_RadSourceSystem.prototype.__class__ =  __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadSourceSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_LowHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_LowHealthSystem.prototype)
  __deceptinfect_game_LowHealthSystem.super(self)
  return self
end
__deceptinfect_game_LowHealthSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.LowHealthSystem"] = __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__name__ = true
__deceptinfect_game_LowHealthSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_game_LowHealthSystem.prototype = _hx_a();

__deceptinfect_game_LowHealthSystem.prototype.__class__ =  __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_LowHealthSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_SystemManager.new = {}
_hxClasses["deceptinfect.ecswip.SystemManager"] = __deceptinfect_ecswip_SystemManager
__deceptinfect_ecswip_SystemManager.__name__ = true
__deceptinfect_ecswip_SystemManager.make = function() 
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_infection_InfectionSystem;
  _this.h[key] = __deceptinfect_infection_InfectionSystem.new();
  _this.k[key] = true;
  local _this1 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key1 = __deceptinfect_client_GeigerSystem;
  _this1.h[key1] = __deceptinfect_client_GeigerSystem.new();
  _this1.k[key1] = true;
  local _this2 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key2 = __deceptinfect_radiation_RadiationSystem;
  _this2.h[key2] = __deceptinfect_radiation_RadiationSystem.new();
  _this2.k[key2] = true;
  local _this3 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key3 = __deceptinfect_ecswip_GrabSystem;
  _this3.h[key3] = __deceptinfect_ecswip_GrabSystem.new();
  _this3.k[key3] = true;
  local _this4 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key4 = __deceptinfect_ecswip_HiddenHealthSystem;
  _this4.h[key4] = __deceptinfect_ecswip_HiddenHealthSystem.new();
  _this4.k[key4] = true;
  local _this5 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key5 = __deceptinfect_game_WinSystem;
  _this5.h[key5] = __deceptinfect_game_WinSystem.new();
  _this5.k[key5] = true;
  local _this6 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key6 = __deceptinfect_game_BatterySystem;
  _this6.h[key6] = __deceptinfect_game_BatterySystem.new();
  _this6.k[key6] = true;
  local _this7 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key7 = __deceptinfect_game_SpawnSystem;
  _this7.h[key7] = __deceptinfect_game_SpawnSystem.new();
  _this7.k[key7] = true;
  local _this8 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key8 = __deceptinfect_statuses_WalkthroughSystem;
  _this8.h[key8] = __deceptinfect_statuses_WalkthroughSystem.new();
  _this8.k[key8] = true;
  local _this9 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key9 = __deceptinfect_game_NestSystem;
  _this9.h[key9] = __deceptinfect_game_NestSystem.new();
  _this9.k[key9] = true;
  local _this10 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key10 = __deceptinfect_game_EvacSystem;
  _this10.h[key10] = __deceptinfect_game_EvacSystem.new();
  _this10.k[key10] = true;
  local _this11 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key11 = __deceptinfect_game_RagdollSystem;
  _this11.h[key11] = __deceptinfect_game_RagdollSystem.new();
  _this11.k[key11] = true;
  local _this12 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key12 = __deceptinfect_game_SlowMotionSystem;
  _this12.h[key12] = __deceptinfect_game_SlowMotionSystem.new();
  _this12.k[key12] = true;
  local _this13 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key13 = __deceptinfect_infection_InfectionLookSystem;
  _this13.h[key13] = __deceptinfect_infection_InfectionLookSystem.new();
  _this13.k[key13] = true;
  local _this14 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key14 = __deceptinfect_radiation_ContaminationSystem;
  _this14.h[key14] = __deceptinfect_radiation_ContaminationSystem.new();
  _this14.k[key14] = true;
  local _this15 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key15 = __deceptinfect_radiation_RadSourceSystem;
  _this15.h[key15] = __deceptinfect_radiation_RadSourceSystem.new();
  _this15.k[key15] = true;
  local _this16 = __deceptinfect_ecswip_SystemManager.getSystems;
  local key16 = __deceptinfect_game_LowHealthSystem;
  _this16.h[key16] = __deceptinfect_game_LowHealthSystem.new();
  _this16.k[key16] = true;
end
__deceptinfect_ecswip_SystemManager.getSystem = function(cls) 
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[cls] end;
end
__deceptinfect_ecswip_SystemManager.getSystemExp = function(name) 
  local key = Type.resolveClass(name);
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[key] end;
end
_hx_exports["getSystem"] = __deceptinfect_ecswip_SystemManager.getSystemExp
__deceptinfect_ecswip_SystemManager.runAllSystems = function() 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:run();
  end;
end
__deceptinfect_ecswip_SystemManager.initAllSystems = function() 
  __deceptinfect_ecswip_SystemManager.make();
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:init();
  end;
end
_hxClasses["deceptinfect.ecswip.ChooseVirPos"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ENT","REAL"},2)}
__deceptinfect_ecswip_ChooseVirPos = _hxClasses["deceptinfect.ecswip.ChooseVirPos"];
__deceptinfect_ecswip_ChooseVirPos.ENT = function(x) local _x = _hx_tab_array({[0]="ENT",0,x,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 3); return _x; end 
__deceptinfect_ecswip_ChooseVirPos.REAL = function(vec,ang) local _x = _hx_tab_array({[0]="REAL",1,vec,ang,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 4); return _x; end 

__gmod_sent_ENT.new = {}
_hxClasses["gmod.sent.ENT"] = __gmod_sent_ENT
__gmod_sent_ENT.__name__ = true
__gmod_sent_ENT.prototype = _hx_a();
__gmod_sent_ENT.prototype.Initialize = function(self) 
end
__gmod_sent_ENT.prototype.OnReloaded = function(self) 
end
__gmod_sent_ENT.prototype.OnRemove = function(self) 
end
__gmod_sent_ENT.prototype.OnRestore = function(self) 
end
__gmod_sent_ENT.prototype.Think = function(self) 
  do return nil end
end
__gmod_sent_ENT.prototype.CalcAbsolutePosition = function(self,pos,ang) 
  do return nil end
end
__gmod_sent_ENT.prototype.CanProperty = function(self,ply,property) 
  do return nil end
end
__gmod_sent_ENT.prototype.DoImpactEffect = function(self,tr,damageType) 
  do return nil end
end
__gmod_sent_ENT.prototype.FireAnimationEvent = function(self,pos,ang,event,name) 
  do return nil end
end
__gmod_sent_ENT.prototype.GetRenderMesh = function(self) 
  do return nil end
end
__gmod_sent_ENT.prototype.GravGunPunt = function(self,ply) 
  do return nil end
end
__gmod_sent_ENT.prototype.RenderOverride = function(self) 
end
__gmod_sent_ENT.prototype.SetAutomaticFrameAdvance = function(self,enable) 
end
__gmod_sent_ENT.prototype.SetupDataTables = function(self) 
end

__gmod_sent_ENT.prototype.__class__ =  __gmod_sent_ENT

__gmod_sent_ENT_ANIM.new = function() 
  local self = _hx_new(__gmod_sent_ENT_ANIM.prototype)
  __gmod_sent_ENT_ANIM.super(self)
  return self
end
__gmod_sent_ENT_ANIM.super = function(self) 
  self.TYPE = "anim";
end
_hxClasses["gmod.sent.ENT_ANIM"] = __gmod_sent_ENT_ANIM
__gmod_sent_ENT_ANIM.__name__ = true
__gmod_sent_ENT_ANIM.prototype = _hx_a();
__gmod_sent_ENT_ANIM.prototype.Draw = function(self,flags) 
end
__gmod_sent_ENT_ANIM.prototype.DrawTranslucent = function(self,flags) 
end
__gmod_sent_ENT_ANIM.prototype.ImpactTrace = function(self,traceResult,damageType,customImpactName) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.PhysicsSimulate = function(self,phys,deltaTime) 
  do return nil end
end
__gmod_sent_ENT_ANIM.prototype.PhysicsUpdate = function(self,phys) 
end
__gmod_sent_ENT_ANIM.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return nil end
end

__gmod_sent_ENT_ANIM.prototype.__class__ =  __gmod_sent_ENT_ANIM
__gmod_sent_ENT_ANIM.__super__ = __gmod_sent_ENT
setmetatable(__gmod_sent_ENT_ANIM.prototype,{__index=__gmod_sent_ENT.prototype})

__deceptinfect_ents_Di_battery.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_battery.prototype)
  __deceptinfect_ents_Di_battery.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_battery.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_battery"] = __deceptinfect_ents_Di_battery
_hxClasses["deceptinfect.ents.Di_battery"] = __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__name__ = true
__deceptinfect_ents_Di_battery.prototype = _hx_a();
__deceptinfect_ents_Di_battery.prototype.Draw = function(self,flags) 
  self["self"]:DrawModel();
end

__deceptinfect_ents_Di_battery.prototype.__class__ =  __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_battery.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_charger.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_charger.prototype)
  __deceptinfect_ents_Di_charger.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_charger.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_charger"] = __deceptinfect_ents_Di_charger
_hxClasses["deceptinfect.ents.Di_charger"] = __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__name__ = true
__deceptinfect_ents_Di_charger.prototype = _hx_a();
__deceptinfect_ents_Di_charger.prototype.Draw = function(self,flags) 
  self["self"]:DrawModel();
end

__deceptinfect_ents_Di_charger.prototype.__class__ =  __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_charger.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__gmod_sent_ENT_BRUSH.new = function() 
  local self = _hx_new(__gmod_sent_ENT_BRUSH.prototype)
  __gmod_sent_ENT_BRUSH.super(self)
  return self
end
__gmod_sent_ENT_BRUSH.super = function(self) 
  self.TYPE = "brush";
end
_hxClasses["gmod.sent.ENT_BRUSH"] = __gmod_sent_ENT_BRUSH
__gmod_sent_ENT_BRUSH.__name__ = true
__gmod_sent_ENT_BRUSH.prototype = _hx_a();
__gmod_sent_ENT_BRUSH.prototype.StartTouch = function(self,ent) 
end
__gmod_sent_ENT_BRUSH.prototype.EndTouch = function(self,ent) 
end
__gmod_sent_ENT_BRUSH.prototype.Touch = function(self,ent) 
end

__gmod_sent_ENT_BRUSH.prototype.__class__ =  __gmod_sent_ENT_BRUSH
__gmod_sent_ENT_BRUSH.__super__ = __gmod_sent_ENT
setmetatable(__gmod_sent_ENT_BRUSH.prototype,{__index=__gmod_sent_ENT.prototype})

__deceptinfect_ents_Di_evac_zone.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_evac_zone.prototype)
  __deceptinfect_ents_Di_evac_zone.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_evac_zone.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_brush"});
  __gmod_sent_ENT_BRUSH.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
_hxClasses["deceptinfect.ents.Di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__name__ = true
__deceptinfect_ents_Di_evac_zone.prototype = _hx_a();

__deceptinfect_ents_Di_evac_zone.prototype.__class__ =  __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__super__ = __gmod_sent_ENT_BRUSH
setmetatable(__deceptinfect_ents_Di_evac_zone.prototype,{__index=__gmod_sent_ENT_BRUSH.prototype})

__deceptinfect_ents_Di_flare.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_flare.prototype)
  __deceptinfect_ents_Di_flare.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_flare.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_flare"] = __deceptinfect_ents_Di_flare
_hxClasses["deceptinfect.ents.Di_flare"] = __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__name__ = true
__deceptinfect_ents_Di_flare.prototype = _hx_a();
__deceptinfect_ents_Di_flare.prototype.Draw = function(self,flags) 
  self["self"]:DrawModel();
end

__deceptinfect_ents_Di_flare.prototype.__class__ =  __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_flare.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_nest.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_nest.prototype)
  __deceptinfect_ents_Di_nest.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_nest.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_nest"] = __deceptinfect_ents_Di_nest
_hxClasses["deceptinfect.ents.Di_nest"] = __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__name__ = true
__deceptinfect_ents_Di_nest.prototype = _hx_a();
__deceptinfect_ents_Di_nest.prototype.Draw = function(self,flags) 
  self["self"]:DrawModel();
end
__deceptinfect_ents_Di_nest.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return _hx_o({__fields__={HitPos=true,Fraction=true},HitPos=startpos,Fraction=0}) end
end

__deceptinfect_ents_Di_nest.prototype.__class__ =  __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_nest.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_ents_Di_ragdoll.new = function(curEnt) 
  local self = _hx_new(__deceptinfect_ents_Di_ragdoll.prototype)
  __deceptinfect_ents_Di_ragdoll.super(self,curEnt)
  return self
end
__deceptinfect_ents_Di_ragdoll.super = function(self,curEnt) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  __gmod_sent_ENT_ANIM.super(self);
  self["self"] = curEnt;
end
_hx_exports["di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
_hxClasses["deceptinfect.ents.Di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__name__ = true
__deceptinfect_ents_Di_ragdoll.prototype = _hx_a();
__deceptinfect_ents_Di_ragdoll.prototype.Initialize = function(self) 
  self["self"]:SetModel(self.owner:GetModel());
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_Ragdoll.new(), self.id);
  __deceptinfect_ecswip_ComponentManager.addComponent(__deceptinfect_game_CleanupEnt.new(), self.id);
end

__deceptinfect_ents_Di_ragdoll.prototype.__class__ =  __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__super__ = __gmod_sent_ENT_ANIM
setmetatable(__deceptinfect_ents_Di_ragdoll.prototype,{__index=__gmod_sent_ENT_ANIM.prototype})

__deceptinfect_game_CleanupEnt.new = function() 
  local self = _hx_new(__deceptinfect_game_CleanupEnt.prototype)
  __deceptinfect_game_CleanupEnt.super(self)
  return self
end
__deceptinfect_game_CleanupEnt.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.CleanupEnt"] = __deceptinfect_game_CleanupEnt
__deceptinfect_game_CleanupEnt.__name__ = true
__deceptinfect_game_CleanupEnt.prototype = _hx_a();

__deceptinfect_game_CleanupEnt.prototype.__class__ =  __deceptinfect_game_CleanupEnt
__deceptinfect_game_CleanupEnt.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_CleanupEnt.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_ClientWeaponStatue.new = function() 
  local self = _hx_new(__deceptinfect_game_ClientWeaponStatue.prototype)
  __deceptinfect_game_ClientWeaponStatue.super(self)
  return self
end
__deceptinfect_game_ClientWeaponStatue.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.ClientWeaponStatue"] = __deceptinfect_game_ClientWeaponStatue
__deceptinfect_game_ClientWeaponStatue.__name__ = true
__deceptinfect_game_ClientWeaponStatue.prototype = _hx_a();

__deceptinfect_game_ClientWeaponStatue.prototype.__class__ =  __deceptinfect_game_ClientWeaponStatue
__deceptinfect_game_ClientWeaponStatue.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_ClientWeaponStatue.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_KeepRestart.new = function() 
  local self = _hx_new(__deceptinfect_game_KeepRestart.prototype)
  __deceptinfect_game_KeepRestart.super(self)
  return self
end
__deceptinfect_game_KeepRestart.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.KeepRestart"] = __deceptinfect_game_KeepRestart
__deceptinfect_game_KeepRestart.__name__ = true
__deceptinfect_game_KeepRestart.prototype = _hx_a();

__deceptinfect_game_KeepRestart.prototype.__class__ =  __deceptinfect_game_KeepRestart
__deceptinfect_game_KeepRestart.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_KeepRestart.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_RagInfo.new = function() 
  local self = _hx_new(__deceptinfect_game_RagInfo.prototype)
  __deceptinfect_game_RagInfo.super(self)
  return self
end
__deceptinfect_game_RagInfo.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.RagInfo"] = __deceptinfect_game_RagInfo
__deceptinfect_game_RagInfo.__name__ = true
__deceptinfect_game_RagInfo.prototype = _hx_a();

__deceptinfect_game_RagInfo.prototype.__class__ =  __deceptinfect_game_RagInfo
__deceptinfect_game_RagInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_RagInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_Ragdoll.new = function() 
  local self = _hx_new(__deceptinfect_game_Ragdoll.prototype)
  __deceptinfect_game_Ragdoll.super(self)
  return self
end
__deceptinfect_game_Ragdoll.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.Ragdoll"] = __deceptinfect_game_Ragdoll
__deceptinfect_game_Ragdoll.__name__ = true
__deceptinfect_game_Ragdoll.prototype = _hx_a();

__deceptinfect_game_Ragdoll.prototype.__class__ =  __deceptinfect_game_Ragdoll
__deceptinfect_game_Ragdoll.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_Ragdoll.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_Spawn.new = function(parent,vec) 
  local self = _hx_new(__deceptinfect_game_Spawn.prototype)
  __deceptinfect_game_Spawn.super(self,parent,vec)
  return self
end
__deceptinfect_game_Spawn.super = function(self,parent,vec) 
  self.distOrder = _hx_tab_array({}, 0);
  self.distStore = __haxe_ds_IntMap.new();
  self.vec = vec;
  self.parent = parent;
  self.id = parent.spawns.length;
end
_hxClasses["deceptinfect.game.Spawn"] = __deceptinfect_game_Spawn
__deceptinfect_game_Spawn.__name__ = true
__deceptinfect_game_Spawn.prototype = _hx_a();
__deceptinfect_game_Spawn.prototype.calculateDist = function(self,other) 
  local dist = self.vec:DistToSqr(other.vec);
  local key = other.id;
  local _this = self.distStore;
  if (dist == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = dist;
  end;
  local tmp;
  if (self.maxdistID ~= nil) then 
    local ret = self.distStore.h[self.maxdistID];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    tmp = dist > ret;
  else
    tmp = true;
  end;
  if (tmp) then 
    self.maxdistID = other.id;
  end;
  local tmp1;
  if (self.mindistID ~= nil) then 
    local ret1 = self.distStore.h[self.mindistID];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    tmp1 = dist < ret1;
  else
    tmp1 = true;
  end;
  if (tmp1) then 
    self.mindistID = other.id;
  end;
  self:insertNewSortedDist(other);
end
__deceptinfect_game_Spawn.prototype.insertNewSortedDist = function(self,other) 
  local i = 0;
  local insert = self.distOrder.length - 1;
  local _g = 0;
  local _g1 = self.distOrder;
  while (_g < _g1.length) do 
    local spawnid = _g1[_g];
    _g = _g + 1;
    local ret = self.distStore.h[spawnid];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local ret1 = self.distStore.h[other.id];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    if (ret > ret1) then 
      insert = i;
      break;
    end;
    i = i + 1;
  end;
  self.distOrder[insert] = other.id;
end

__deceptinfect_game_Spawn.prototype.__class__ =  __deceptinfect_game_Spawn

__deceptinfect_game_BoundsSpawn.new = function(parent,vec,bounds) 
  local self = _hx_new(__deceptinfect_game_BoundsSpawn.prototype)
  __deceptinfect_game_BoundsSpawn.super(self,parent,vec,bounds)
  return self
end
__deceptinfect_game_BoundsSpawn.super = function(self,parent,vec,bounds) 
  __deceptinfect_game_Spawn.super(self,parent,vec);
  self.bounds = bounds;
end
_hxClasses["deceptinfect.game.BoundsSpawn"] = __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__name__ = true
__deceptinfect_game_BoundsSpawn.prototype = _hx_a();

__deceptinfect_game_BoundsSpawn.prototype.__class__ =  __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__super__ = __deceptinfect_game_Spawn
setmetatable(__deceptinfect_game_BoundsSpawn.prototype,{__index=__deceptinfect_game_Spawn.prototype})

__deceptinfect_game_StatInfo.new = function() 
  local self = _hx_new(__deceptinfect_game_StatInfo.prototype)
  __deceptinfect_game_StatInfo.super(self)
  return self
end
__deceptinfect_game_StatInfo.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.StatInfo"] = __deceptinfect_game_StatInfo
__deceptinfect_game_StatInfo.__name__ = true
__deceptinfect_game_StatInfo.prototype = _hx_a();

__deceptinfect_game_StatInfo.prototype.__class__ =  __deceptinfect_game_StatInfo
__deceptinfect_game_StatInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_StatInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_Statue.new = function() 
  local self = _hx_new(__deceptinfect_game_Statue.prototype)
  __deceptinfect_game_Statue.super(self)
  return self
end
__deceptinfect_game_Statue.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.Statue"] = __deceptinfect_game_Statue
__deceptinfect_game_Statue.__name__ = true
__deceptinfect_game_Statue.prototype = _hx_a();

__deceptinfect_game_Statue.prototype.__class__ =  __deceptinfect_game_Statue
__deceptinfect_game_Statue.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_Statue.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectedComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectedComponent.prototype)
  __deceptinfect_infection_InfectedComponent.super(self)
  return self
end
__deceptinfect_infection_InfectedComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectedComponent"] = __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__name__ = true
__deceptinfect_infection_InfectedComponent.prototype = _hx_a();

__deceptinfect_infection_InfectedComponent.prototype.__class__ =  __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectedComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectionComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionComponent.prototype)
  __deceptinfect_infection_InfectionComponent.super(self)
  return self
end
__deceptinfect_infection_InfectionComponent.super = function(self) 
  local ret = ({length = 1});
  ret[0] = 0.0;
  self.infection = __deceptinfect_infection_INF_STATE.NOT_INFECTED(ret);
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectionComponent"] = __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__name__ = true
__deceptinfect_infection_InfectionComponent.prototype = _hx_a();
__deceptinfect_infection_InfectionComponent.prototype.getInfValue = function(self) 
  local _g = self.infection;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return _g[2][0] end;
  elseif (tmp) == 1 then 
    do return 100 end; end;
end
__deceptinfect_infection_InfectionComponent.prototype.set_infection = function(self,x) 
  self.infection = x do return self.infection end
end

__deceptinfect_infection_InfectionComponent.prototype.__class__ =  __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectionComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.infection.INF_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_INFECTED","INFECTED"},2)}
__deceptinfect_infection_INF_STATE = _hxClasses["deceptinfect.infection.INF_STATE"];
__deceptinfect_infection_INF_STATE.NOT_INFECTED = function(inf) local _x = _hx_tab_array({[0]="NOT_INFECTED",0,inf,__enum__=__deceptinfect_infection_INF_STATE}, 3); return _x; end 
__deceptinfect_infection_INF_STATE.INFECTED = _hx_tab_array({[0]="INFECTED",1,__enum__ = __deceptinfect_infection_INF_STATE},2)


__deceptinfect_util_EntityExt.new = {}
_hxClasses["deceptinfect.util.EntityExt"] = __deceptinfect_util_EntityExt
__deceptinfect_util_EntityExt.__name__ = true
__deceptinfect_util_EntityExt.validID2 = function(x) 
  if (_G.IsValid(x)) then 
    local _g = x.id;
    if (_g == nil) then 
      do return __deceptinfect_util_ValidID.NO_ID end;
    else
      do return __deceptinfect_util_ValidID.HAS_ID(_g) end;
    end;
  else
    do return __deceptinfect_util_ValidID.INVALID end;
  end;
end
_hxClasses["deceptinfect.util.ValidID"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HAS_ID","NO_ID","INVALID"},3)}
__deceptinfect_util_ValidID = _hxClasses["deceptinfect.util.ValidID"];
__deceptinfect_util_ValidID.HAS_ID = function(id) local _x = _hx_tab_array({[0]="HAS_ID",0,id,__enum__=__deceptinfect_util_ValidID}, 3); return _x; end 
__deceptinfect_util_ValidID.NO_ID = _hx_tab_array({[0]="NO_ID",1,__enum__ = __deceptinfect_util_ValidID},2)

__deceptinfect_util_ValidID.INVALID = _hx_tab_array({[0]="INVALID",2,__enum__ = __deceptinfect_util_ValidID},2)


__deceptinfect_util_MinMaxTools.new = {}
_hxClasses["deceptinfect.util.MinMaxTools"] = __deceptinfect_util_MinMaxTools
__deceptinfect_util_MinMaxTools.__name__ = true
__deceptinfect_util_MinMaxTools.getCenter = function(x) 
  local this1 = x.maxs;
  local otherVec = x.mins;
  local this11 = this1 - otherVec;
  local this12 = this11 / 2;
  local otherVec1 = x.mins;
  do return this12 + otherVec1 end;
end

__deceptinfect_util_Util.new = {}
_hxClasses["deceptinfect.util.Util"] = __deceptinfect_util_Util
__deceptinfect_util_Util.__name__ = true
__deceptinfect_util_Util.printTimer = function(string,time,run) 
  if (__deceptinfect_util_Util.mappy.h[string] ~= nil) then 
    local ret = __deceptinfect_util_Util.mappy.h[string];
    if (ret == __haxe_ds_StringMap.tnull) then 
      ret = nil;
    end;
    if (_G.CurTime() > ret) then 
      run();
      local this1 = __deceptinfect_util_Util.mappy;
      local value = _G.CurTime() + time;
      local _this = this1;
      if (value == nil) then 
        _this.h[string] = __haxe_ds_StringMap.tnull;
      else
        _this.h[string] = value;
      end;
    end;
  else
    run();
    local this11 = __deceptinfect_util_Util.mappy;
    local value1 = _G.CurTime() + time;
    local _this1 = this11;
    if (value1 == nil) then 
      _this1.h[string] = __haxe_ds_StringMap.tnull;
    else
      _this1.h[string] = value1;
    end;
  end;
end

__gmod_PairTools.new = {}
_hxClasses["gmod.PairTools"] = __gmod_PairTools
__gmod_PairTools.__name__ = true
__gmod_PairTools.keyValueIterator = function(table) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(table);
  local next = _hx_1_p_next;
  local i = _hx_1_p_index;
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local _hx_2_res_index, _hx_2_res_value = next(table, i);
    i = _hx_2_res_index;
    do return _hx_o({__fields__={key=true,value=true},key=_hx_2_res_index,value=_hx_2_res_value}) end;
  end,hasNext=function(self) 
    do return _G.select(2, _G.next(table, i)) ~= nil end;
  end}) end;
end
__gmod_PairTools.iterator = function(table) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(table);
  local next = _hx_1_p_next;
  local i = _hx_1_p_index;
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local _hx_2_res_index, _hx_2_res_value = next(table, i);
    i = _hx_2_res_index;
    do return _hx_2_res_value end;
  end,hasNext=function(self) 
    do return _G.select(2, _G.next(table, i)) ~= nil end;
  end}) end;
end

__gmod_PanelBuild.new = {}
_hxClasses["gmod.PanelBuild"] = __gmod_PanelBuild
__gmod_PanelBuild.__name__ = true

__gmod_PanelHelper_2.new = function(x) 
  local self = _hx_new(__gmod_PanelHelper_2.prototype)
  __gmod_PanelHelper_2.super(self,x)
  return self
end
__gmod_PanelHelper_2.super = function(self,x) 
  __gmod_PanelHelper.super(self,x);
end
_hxClasses["gmod.PanelHelper_2"] = __gmod_PanelHelper_2
__gmod_PanelHelper_2.__name__ = true
__gmod_PanelHelper_2.prototype = _hx_a();

__gmod_PanelHelper_2.prototype.__class__ =  __gmod_PanelHelper_2
__gmod_PanelHelper_2.__super__ = __gmod_PanelHelper
setmetatable(__gmod_PanelHelper_2.prototype,{__index=__gmod_PanelHelper.prototype})

__gmod_PanelHelper_3.new = function(x) 
  local self = _hx_new(__gmod_PanelHelper_3.prototype)
  __gmod_PanelHelper_3.super(self,x)
  return self
end
__gmod_PanelHelper_3.super = function(self,x) 
  __gmod_PanelHelper_2.super(self,x);
end
_hxClasses["gmod.PanelHelper_3"] = __gmod_PanelHelper_3
__gmod_PanelHelper_3.__name__ = true
__gmod_PanelHelper_3.prototype = _hx_a();

__gmod_PanelHelper_3.prototype.__class__ =  __gmod_PanelHelper_3
__gmod_PanelHelper_3.__super__ = __gmod_PanelHelper_2
setmetatable(__gmod_PanelHelper_3.prototype,{__index=__gmod_PanelHelper_2.prototype})

__gmod_MyShittyClass.new = function(x) 
  local self = _hx_new(__gmod_MyShittyClass.prototype)
  __gmod_MyShittyClass.super(self,x)
  return self
end
__gmod_MyShittyClass.super = function(self,x) 
  __gmod_PanelHelper_2.super(self,x);
end
_hxClasses["gmod.MyShittyClass"] = __gmod_MyShittyClass
__gmod_MyShittyClass.__name__ = true
__gmod_MyShittyClass.prototype = _hx_a();

__gmod_MyShittyClass.prototype.__class__ =  __gmod_MyShittyClass
__gmod_MyShittyClass.__super__ = __gmod_PanelHelper_2
setmetatable(__gmod_MyShittyClass.prototype,{__index=__gmod_PanelHelper_2.prototype})

__lua_Boot.new = {}
_hxClasses["__lua_Boot"] = __lua_Boot
__lua_Boot.__name__ = true
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  if (#s >= 5) then 
    do return "<...>" end;
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (#s > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(__lua_Boot.__string_rec(o[f1], Std.string(s) .. Std.string("\t"))));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  if (_G.TypeID(o) == _G.TYPE_NONE) then 
    _G.error("Invalid type",0);
  else
    do return tostring(o) end;
  end; end;
end

__haxe_EntryPoint.new = {}
_hxClasses["haxe.EntryPoint"] = __haxe_EntryPoint
__haxe_EntryPoint.__name__ = true
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (not (__haxe_EntryPoint.processEvents() < 0)) do 
  end;
end

__haxe_Log.new = {}
_hxClasses["haxe.Log"] = __haxe_Log
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v1 = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v1))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
_hxClasses["haxe.MainEvent"] = __haxe_MainEvent
__haxe_MainEvent.__name__ = true
__haxe_MainEvent.prototype = _hx_a();
__haxe_MainEvent.prototype.delay = function(self,t) 
  self.nextRun = (function() 
    local _hx_1
    if (t == nil) then 
    _hx_1 = -_G.math.huge; else 
    _hx_1 = Sys.time() + t; end
    return _hx_1
  end )();
end
__haxe_MainEvent.prototype.stop = function(self) 
  if (self.f == nil) then 
    do return end;
  end;
  self.f = nil;
  self.nextRun = -_G.math.huge;
  if (self.prev == nil) then 
    __haxe_MainLoop.pending = self.next;
  else
    self.prev.next = self.next;
  end;
  if (self.next ~= nil) then 
    self.next.prev = self.prev;
  end;
end

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
_hxClasses["haxe.MainLoop"] = __haxe_MainLoop
__haxe_MainLoop.__name__ = true
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.add = function(f,priority) 
  if (priority == nil) then 
    priority = 0;
  end;
  if (f == nil) then 
    _G.error("Event function is null",0);
  end;
  local e = __haxe_MainEvent.new(f, priority);
  local head = __haxe_MainLoop.pending;
  if (head ~= nil) then 
    head.prev = e;
  end;
  e.next = head;
  __haxe_MainLoop.pending = e;
  do return e end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_Timer.new = function(time_ms) 
  local self = _hx_new(__haxe_Timer.prototype)
  __haxe_Timer.super(self,time_ms)
  return self
end
__haxe_Timer.super = function(self,time_ms) 
  local _gthis = self;
  local dt = time_ms / 1000;
  self.event = __haxe_MainLoop.add(function() 
    local _gthis1 = _gthis.event;
    _gthis1.nextRun = _gthis1.nextRun + dt;
    _gthis:run();
  end);
  self.event:delay(dt);
end
_hxClasses["haxe.Timer"] = __haxe_Timer
__haxe_Timer.__name__ = true
__haxe_Timer.delay = function(f,time_ms) 
  local t = __haxe_Timer.new(time_ms);
  t.run = function(self) 
    t:stop();
    f();
   end;
  do return t end;
end
__haxe_Timer.prototype = _hx_a();
__haxe_Timer.prototype.stop = function(self) 
  if (self.event ~= nil) then 
    self.event:stop();
    self.event = nil;
  end;
end
__haxe_Timer.prototype.run = function(self) 
end

__haxe_Timer.prototype.__class__ =  __haxe_Timer

__haxe_ds_BalancedTree.new = function() 
  local self = _hx_new(__haxe_ds_BalancedTree.prototype)
  __haxe_ds_BalancedTree.super(self)
  return self
end
__haxe_ds_BalancedTree.super = function(self) 
end
_hxClasses["haxe.ds.BalancedTree"] = __haxe_ds_BalancedTree
__haxe_ds_BalancedTree.__name__ = true
__haxe_ds_BalancedTree.__interfaces__ = {__haxe_IMap}
__haxe_ds_BalancedTree.prototype = _hx_a();
__haxe_ds_BalancedTree.prototype.set = function(self,key,value) 
  self.root = self:setLoop(key, value, self.root);
end
__haxe_ds_BalancedTree.prototype.get = function(self,key) 
  local node = self.root;
  while (node ~= nil) do 
    local c = self:compare(key, node.key);
    if (c == 0) then 
      do return node.value end;
    end;
    if (c < 0) then 
      node = node.left;
    else
      node = node.right;
    end;
  end;
  do return nil end
end
__haxe_ds_BalancedTree.prototype.setLoop = function(self,k,v,node) 
  if (node == nil) then 
    do return __haxe_ds_TreeNode.new(nil, k, v, nil) end;
  end;
  local c = self:compare(k, node.key);
  if (c == 0) then 
    do return __haxe_ds_TreeNode.new(node.left, k, v, node.right, (function() 
      local _hx_1
      if (node == nil) then 
      _hx_1 = 0; else 
      _hx_1 = node._height; end
      return _hx_1
    end )()) end;
  else
    if (c < 0) then 
      do return self:balance(self:setLoop(k, v, node.left), node.key, node.value, node.right) end;
    else
      local nr = self:setLoop(k, v, node.right);
      do return self:balance(node.left, node.key, node.value, nr) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.balance = function(self,l,k,v,r) 
  local hl = (function() 
    local _hx_1
    if (l == nil) then 
    _hx_1 = 0; else 
    _hx_1 = l._height; end
    return _hx_1
  end )();
  local hr = (function() 
    local _hx_2
    if (r == nil) then 
    _hx_2 = 0; else 
    _hx_2 = r._height; end
    return _hx_2
  end )();
  if (hl > (hr + 2)) then 
    local _this = l.left;
    local _this1 = l.right;
    if ((function() 
      local _hx_3
      if (_this == nil) then 
      _hx_3 = 0; else 
      _hx_3 = _this._height; end
      return _hx_3
    end )() >= (function() 
      local _hx_4
      if (_this1 == nil) then 
      _hx_4 = 0; else 
      _hx_4 = _this1._height; end
      return _hx_4
    end )()) then 
      do return __haxe_ds_TreeNode.new(l.left, l.key, l.value, __haxe_ds_TreeNode.new(l.right, k, v, r)) end;
    else
      do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l.left, l.key, l.value, l.right.left), l.right.key, l.right.value, __haxe_ds_TreeNode.new(l.right.right, k, v, r)) end;
    end;
  else
    if (hr > (hl + 2)) then 
      local _this2 = r.right;
      local _this3 = r.left;
      if ((function() 
        local _hx_5
        if (_this2 == nil) then 
        _hx_5 = 0; else 
        _hx_5 = _this2._height; end
        return _hx_5
      end )() > (function() 
        local _hx_6
        if (_this3 == nil) then 
        _hx_6 = 0; else 
        _hx_6 = _this3._height; end
        return _hx_6
      end )()) then 
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left), r.key, r.value, r.right) end;
      else
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left.left), r.left.key, r.left.value, __haxe_ds_TreeNode.new(r.left.right, r.key, r.value, r.right)) end;
      end;
    else
      do return __haxe_ds_TreeNode.new(l, k, v, r, (function() 
        local _hx_7
        if (hl > hr) then 
        _hx_7 = hl; else 
        _hx_7 = hr; end
        return _hx_7
      end )() + 1) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.compare = function(self,k1,k2) 
  do return Reflect.compare(k1, k2) end
end

__haxe_ds_BalancedTree.prototype.__class__ =  __haxe_ds_BalancedTree

__haxe_ds_TreeNode.new = function(l,k,v,r,h) 
  local self = _hx_new(__haxe_ds_TreeNode.prototype)
  __haxe_ds_TreeNode.super(self,l,k,v,r,h)
  return self
end
__haxe_ds_TreeNode.super = function(self,l,k,v,r,h) 
  if (h == nil) then 
    h = -1;
  end;
  self.left = l;
  self.key = k;
  self.value = v;
  self.right = r;
  if (h == -1) then 
    local tmp;
    local _this = self.left;
    local _this1 = self.right;
    if ((function() 
      local _hx_1
      if (_this == nil) then 
      _hx_1 = 0; else 
      _hx_1 = _this._height; end
      return _hx_1
    end )() > (function() 
      local _hx_2
      if (_this1 == nil) then 
      _hx_2 = 0; else 
      _hx_2 = _this1._height; end
      return _hx_2
    end )()) then 
      local _this2 = self.left;
      tmp = (function() 
        local _hx_3
        if (_this2 == nil) then 
        _hx_3 = 0; else 
        _hx_3 = _this2._height; end
        return _hx_3
      end )();
    else
      local _this3 = self.right;
      tmp = (function() 
        local _hx_4
        if (_this3 == nil) then 
        _hx_4 = 0; else 
        _hx_4 = _this3._height; end
        return _hx_4
      end )();
    end;
    self._height = tmp + 1;
  else
    self._height = h;
  end;
end
_hxClasses["haxe.ds.TreeNode"] = __haxe_ds_TreeNode
__haxe_ds_TreeNode.__name__ = true
__haxe_ds_TreeNode.prototype = _hx_a();

__haxe_ds_TreeNode.prototype.__class__ =  __haxe_ds_TreeNode

__haxe_ds_EnumValueMap.new = function() 
  local self = _hx_new(__haxe_ds_EnumValueMap.prototype)
  __haxe_ds_EnumValueMap.super(self)
  return self
end
__haxe_ds_EnumValueMap.super = function(self) 
  __haxe_ds_BalancedTree.super(self);
end
_hxClasses["haxe.ds.EnumValueMap"] = __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__name__ = true
__haxe_ds_EnumValueMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_EnumValueMap.prototype = _hx_a();
__haxe_ds_EnumValueMap.prototype.compare = function(self,k1,k2) 
  local d = k1[1] - k2[1];
  if (d ~= 0) then 
    do return d end;
  end;
  local p1 = k1:slice(2);
  local p2 = k2:slice(2);
  if ((p1.length == 0) and (p2.length == 0)) then 
    do return 0 end;
  end;
  do return self:compareArgs(p1, p2) end
end
__haxe_ds_EnumValueMap.prototype.compareArgs = function(self,a1,a2) 
  local ld = a1.length - a2.length;
  if (ld ~= 0) then 
    do return ld end;
  end;
  local _g = 0;
  local _g1 = a1.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local d = self:compareArg(a1[i], a2[i]);
    if (d ~= 0) then 
      do return d end;
    end;
  end;
  do return 0 end
end
__haxe_ds_EnumValueMap.prototype.compareArg = function(self,v1,v2) 
  if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)) then 
    do return self:compare(v1, v2) end;
  else
    if (__lua_Boot.__instanceof(v1, Array) and __lua_Boot.__instanceof(v2, Array)) then 
      do return self:compareArgs(v1, v2) end;
    else
      do return Reflect.compare(v1, v2) end;
    end;
  end;
end

__haxe_ds_EnumValueMap.prototype.__class__ =  __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__super__ = __haxe_ds_BalancedTree
setmetatable(__haxe_ds_EnumValueMap.prototype,{__index=__haxe_ds_BalancedTree.prototype})

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.IntMap"] = __haxe_ds_IntMap
__haxe_ds_IntMap.__name__ = true
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_a();

__haxe_ds_IntMap.prototype.__class__ =  __haxe_ds_IntMap
_hxClasses["haxe.ds.Option"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Some","None"},2)}
__haxe_ds_Option = _hxClasses["haxe.ds.Option"];
__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.StringMap"] = __haxe_ds_StringMap
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_a();

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__lua_Boot.new = {}
_hxClasses["lua.Boot"] = __lua_Boot
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      local x = o;
      do return (function() 
        local _hx_1
        if (x < __lua_Boot.Min_Int32) then 
        _hx_1 = __lua_Boot.Min_Int32; elseif (x > __lua_Boot.Max_Int32) then 
        _hx_1 = __lua_Boot.Max_Int32; else 
        _hx_1 = _G.math.floor(x); end
        return _hx_1
      end )() == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl2 = o.__class__;
        tmp = (function() 
          local _hx_2
          if (cl2 ~= nil) then 
          _hx_2 = cl2; else 
          _hx_2 = nil; end
          return _hx_2
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Class) then 
      _hx_3 = o.__name__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_4
      if (cl == Enum) then 
      _hx_4 = o.__ename__ ~= nil; else 
      _hx_4 = false; end
      return _hx_4
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end

__lua_UserData.new = {}
_hxClasses["lua.UserData"] = __lua_UserData
__lua_UserData.__name__ = true

__lua_Thread.new = {}
_hxClasses["lua.Thread"] = __lua_Thread
__lua_Thread.__name__ = true

__tink_core__Callback_Callback_Impl_.new = {}
_hxClasses["tink.core._Callback.Callback_Impl_"] = __tink_core__Callback_Callback_Impl_
__tink_core__Callback_Callback_Impl_.__name__ = true
__tink_core__Callback_Callback_Impl_.invoke = function(this1,data) 
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    this1(data);
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    local _e = this1;
    local f = function(data1) 
      __tink_core__Callback_Callback_Impl_.invoke(_e, data1);
    end;
    local data2 = data;
    __tink_core__Callback_Callback_Impl_.defer(function() 
      f(data2);
    end);
  end;
end
__tink_core__Callback_Callback_Impl_.fromNiladic = function(f) 
  do return function(_) 
    f();
  end end;
end
__tink_core__Callback_Callback_Impl_.defer = function(f) 
  __haxe_Timer.delay(f, 0);
end

__tink_core_LinkObject.new = {}
_hxClasses["tink.core.LinkObject"] = __tink_core_LinkObject
__tink_core_LinkObject.__name__ = true

__tink_core__Callback_ListCell.new = function(cb,list) 
  local self = _hx_new(__tink_core__Callback_ListCell.prototype)
  __tink_core__Callback_ListCell.super(self,cb,list)
  return self
end
__tink_core__Callback_ListCell.super = function(self,cb,list) 
  if (cb == nil) then 
    _G.error("callback expected but null received",0);
  end;
  self.cb = cb;
  self.list = list;
end
_hxClasses["tink.core._Callback.ListCell"] = __tink_core__Callback_ListCell
__tink_core__Callback_ListCell.__name__ = true
__tink_core__Callback_ListCell.__interfaces__ = {__tink_core_LinkObject}
__tink_core__Callback_ListCell.prototype = _hx_a();

__tink_core__Callback_ListCell.prototype.__class__ =  __tink_core__Callback_ListCell

__tink_core_CallbackList.new = function() 
  local self = _hx_new(__tink_core_CallbackList.prototype)
  __tink_core_CallbackList.super(self)
  return self
end
__tink_core_CallbackList.super = function(self) 
  self.busy = false;
  self.queue = _hx_tab_array({}, 0);
  self.used = 0;
  self.cells = _hx_tab_array({}, 0);
end
_hxClasses["tink.core.CallbackList"] = __tink_core_CallbackList
__tink_core_CallbackList.__name__ = true
__tink_core_CallbackList.prototype = _hx_a();
__tink_core_CallbackList.prototype.ondrain = function(self) 
end
__tink_core_CallbackList.prototype.invoke = function(self,data,destructive) 
  if (self.busy) then 
    local f = _hx_bind(self,self.invoke);
    local data1 = data;
    local destructive1 = destructive;
    local tmp = function() 
      f(data1, destructive1);
      do return end;
    end;
    self.queue:push(tmp);
  else
    self.busy = true;
    local length = self.cells.length;
    local _g = 0;
    while (_g < length) do 
      _g = _g + 1;
      local _this = self.cells[_g - 1];
      if (_this.list ~= nil) then 
        __tink_core__Callback_Callback_Impl_.invoke(_this.cb, data);
      end;
    end;
    self.busy = false;
    if (destructive) then 
      local added = self.cells.length - length;
      local _g2 = 0;
      while (_g2 < length) do 
        _g2 = _g2 + 1;
        local _this1 = self.cells[_g2 - 1];
        _this1.cb = nil;
        _this1.list = nil;
      end;
      local _g4 = 0;
      while (_g4 < added) do 
        _g4 = _g4 + 1;
        local i = _g4 - 1;
        self.cells[i] = self.cells[length + i];
      end;
      self:resize(added);
    else
      if (self.used < self.cells.length) then 
        self:compact();
      end;
    end;
    if (self.queue.length > 0) then 
      (self.queue:shift())();
    end;
  end;
end
__tink_core_CallbackList.prototype.compact = function(self) 
  if (self.busy) then 
    do return end;
  else
    if (self.used == 0) then 
      self:resize(0);
      self:ondrain();
    else
      local compacted = 0;
      local _g = 0;
      local _g1 = self.cells.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        local _g2 = self.cells[i];
        if (_g2.cb ~= nil) then 
          if (compacted ~= i) then 
            self.cells[compacted] = _g2;
          end;
          compacted = compacted + 1;
          if (compacted == self.used) then 
            break;
          end;
        end;
      end;
      self:resize(self.used);
    end;
  end;
end
__tink_core_CallbackList.prototype.resize = function(self,length) 
  self.cells:resize(length);
end
__tink_core_CallbackList.prototype.clear = function(self) 
  if (self.busy) then 
    self.queue:push(_hx_bind(self,self.clear));
  end;
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local cell = _g1[_g];
    _g = _g + 1;
    cell.cb = nil;
    cell.list = nil;
  end;
  self:resize(0);
end

__tink_core_CallbackList.prototype.__class__ =  __tink_core_CallbackList
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __deceptinfect_DeceptInfect.hmm = 12;
  
  __deceptinfect_GameManager.state = __deceptinfect_GAME_STATE.WAIT;
  
  __deceptinfect_GameManager.stateTrig = __tink_core_SignalTrigger.new();
  
  __deceptinfect_GameManager.net_gamestate = NETMESSAGE_gamestate.new();
  
  __deceptinfect_GameManager.net_cleanup = NETMESSAGE_di_cleanup.new();
  
  __deceptinfect_GameValues.MIN_PLAYERS = 3;
  
  __deceptinfect_GameValues.INF_INIT_MIN = 1.5;
  
  __deceptinfect_GameValues.INF_INIT_MAX = 7.5;
  
  __deceptinfect_GameValues.CONTAMINATE_WARNING_TIME = 4;
  
  __deceptinfect_GameValues.RADIATION_WARNING_TIME = 1.5;
  
  __deceptinfect_GameValues.MAX_INF_RATE = 12;
  
  __deceptinfect_GameValues.GAME_TIMER = 540;
  
  __deceptinfect_GameValues.GAME_TIMER_VARIANCE = 45;
  
  __deceptinfect_GameValues.EVAC_ARRIVAL = 25;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW = 0.75;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE = 1.6;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW_START = 0.4;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE_START = 0.25;
  
  __deceptinfect_GameValues.AVERAGE_RATE_SAMPLES = 15;
  
  __deceptinfect_GameValues.AVERAGE_RATE_TIME = 3;
  
  __deceptinfect_GameValues.MIN_BATTERY_TIME = 45;
  
  __deceptinfect_GameValues.MAX_BATTERY_TIME = 90;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_MODE = 0;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_DIMINISH_PERCENT = 0.75;
  
  __deceptinfect_GameValues.MAX_IDENT_DIST = 1000;
  
  __deceptinfect_GameValues.BATTERIES_SPAWNED = 2;
  
  __deceptinfect_GameValues.EVAC_INFECTION_RATE = 0.5;
  
  __deceptinfect_GameValues.BEGIN_EVAC_INF = 0.65;
  
  __deceptinfect_GameValues.BATTERIES_REQUIRED = 4;
  
  __deceptinfect_GameValues.GRAB_TIME = 6;
  
  __deceptinfect_GameValues.SETUP_TIME = 10;
  
  __deceptinfect_MapStorage.spawns = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    local this1 = _G.Vector(-20.135118, 293.638184, 62.682350);
    local this2 = _G.Vector(214.035873, 252.134552, 46.033661);
    local this3 = _G.Vector(45.967289, -942.858459, 64.031250);
    local this4 = _G.Vector(-4.848439, -1728.742920, 64.031250);
    local this5 = _G.Vector(-481.968323, -1022.401917, 64.031250);
    local this6 = _G.Vector(571.895020, -1031.322632, 64.031250);
    local this7 = _G.Vector(10.328067, -1039.059570, 64.031250);
    local this8 = _G.Vector(-64.220894, -989.030090, 60.787186);
    local this9 = _G.Vector(111.524712, -1094.413208, 110.729080);
    local this10 = _G.Vector(29.061092, 1006.951233, 93.697433);
    local value = _hx_o({__fields__={items=true,objectives=true,evacs=true,nests=true},items=_hx_tab_array({[0]=this1, this2}, 2),objectives=_hx_tab_array({[0]=this3, this4, this5, this6, this7}, 5),evacs=_hx_tab_array({[0]=_hx_o({__fields__={mins=true,maxs=true},mins=this8,maxs=this9})}, 1),nests=_hx_tab_array({[0]=this10}, 1)});
    if (value == nil) then 
      _g.h.mor_temple_v1 = __haxe_ds_StringMap.tnull;
    else
      _g.h.mor_temple_v1 = value;
    end;
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  __deceptinfect_Misc.net_testcl = NETMESSAGECL_di_testnet.new();
  
  __deceptinfect_Misc.roundModels = _hx_tab_array({[0]="models/player/mossman.mdl", "models/player/alyx.mdl", "models/player/barney.mdl", "models/player/breen.mdl", "models/player/Eli.mdl", "models/player/gman_high.mdl", "models/player/kleiner.mdl", "models/player/monk.mdl", "models/player/odessa.mdl", "models/player/Group03/Female_01.mdl", "models/player/Group03/Female_02.mdl", "models/player/Group03/Female_03.mdl", "models/player/Group03/Female_04.mdl", "models/player/Group03/Female_06.mdl", "models/player/Group03/Male_01.mdl", "models/player/Group03/Male_02.mdl", "models/player/Group03/Male_03.mdl", "models/player/Group03/Male_04.mdl", "models/player/Group03/Male_05.mdl", "models/player/Group03/Male_06.mdl", "models/player/Group03/Male_07.mdl", "models/player/Group03/Male_08.mdl", "models/player/Group03/Male_09.mdl"}, 23);
  
  __deceptinfect_Misc.infModel = "models/player/zombie_classic.mdl";
  
  __deceptinfect_PlayerManager.indexLookup = __haxe_ds_IntMap.new();
  
  __deceptinfect_client_GeigerSystem.net_geiger = NETMESSAGE_geiger.new();
  
  __deceptinfect_client_GeigerSystem.geiger = 0.0;
  
  __deceptinfect_client_GeigerSystem.sounds = _hx_tab_array({[0]=_G.Sound("player/geiger1.wav"), _G.Sound("player/geiger2.wav"), _G.Sound("player/geiger3.wav")}, 3);
  
  __deceptinfect_client_GeigerSystem.playTime = 0.0;
  
  __deceptinfect_client_Hud.cache = (function() 
    local _hx_2
    
    local _g = __haxe_ds_EnumValueMap.new();
    
    _g:set(__deceptinfect_client__Hud_Axis.X, __haxe_ds_IntMap.new());
    
    _g:set(__deceptinfect_client__Hud_Axis.Y, __haxe_ds_IntMap.new());
    
    _hx_2 = _g;
    return _hx_2
  end )();
  
  __deceptinfect_client_Hud.baseReso = (function() 
    local _hx_3
    
    local _g = __haxe_ds_EnumValueMap.new();
    
    _g:set(__deceptinfect_client__Hud_Axis.X, 1920);
    
    _g:set(__deceptinfect_client__Hud_Axis.Y, 1080);
    
    _hx_3 = _g;
    return _hx_3
  end )();
  
  __deceptinfect_client_PVS.pvs = __haxe_ds_IntMap.new();
  
  __deceptinfect_ecswip_ComponentManager.components = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_ComponentManager.componentSignals = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_ComponentManager.entities = 0;
  
  __deceptinfect_ecswip_ComponentManager.activeEntities = 0;
  
  __deceptinfect_ecswip_GrabSystem.net_grabupdate = NETMESSAGE_grabupdate.new();
  
  __deceptinfect_ecswip_GrabSystem.net_grabend = NETMESSAGE_grabend.new();
  
  __deceptinfect_ecswip_GrabSystem.hycord = _G.Material("cable/new_cable_lit");
  
  __deceptinfect_ecswip_GrabSystem.activeDraws = __haxe_ds_IntMap.new();
  
  __deceptinfect_ecswip_SignalStorage.entDamageTrigger = __tink_core_SignalTrigger.new();
  
  __deceptinfect_infection_InfectionSystem.net_inf = NETMESSAGE_di_infection.new();
  
  __deceptinfect_infection_InfectionSystem.net_infected = NETMESSAGE_di_infected.new();
  
  __deceptinfect_game_SpawnSystem.obj = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.item = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.nest = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.evac = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_EvacSystem.evac_state = NETMESSAGE_di_evac.new();
  
  __deceptinfect_game_RagdollSystem.statue = NETMESSAGE_statue.new();
  
  __deceptinfect_game_RagdollSystem.statueinfo = NETMESSAGE_di_statinfo.new();
  
  __deceptinfect_game_RagdollSystem.raginfo = NETMESSAGE_di_raginfo.new();
  
  __deceptinfect_infection_InfectionLookSystem.infectioninfo = NETMESSAGE_di_infinfo.new();
  
  __deceptinfect_ecswip_SystemManager.getSystems = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_SystemManager.runSystems = _hx_tab_array({[0]=__deceptinfect_infection_InfectionSystem, __deceptinfect_client_GeigerSystem, __deceptinfect_radiation_RadiationSystem, __deceptinfect_ecswip_GrabSystem, __deceptinfect_ecswip_HiddenHealthSystem, __deceptinfect_game_WinSystem, __deceptinfect_game_BatterySystem, __deceptinfect_game_SpawnSystem, __deceptinfect_statuses_WalkthroughSystem, __deceptinfect_game_NestSystem, __deceptinfect_game_EvacSystem, __deceptinfect_game_RagdollSystem, __deceptinfect_game_SlowMotionSystem, __deceptinfect_infection_InfectionLookSystem, __deceptinfect_radiation_ContaminationSystem, __deceptinfect_radiation_RadSourceSystem, __deceptinfect_game_LowHealthSystem}, 17);
  
  __deceptinfect_util_Util.mappy = __haxe_ds_StringMap.new();
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_IntMap.tnull = ({});
  
  __haxe_ds_StringMap.tnull = ({});
  
  __lua_Boot.Max_Int32 = 2147483647;
  
  __lua_Boot.Min_Int32 = -2147483648;
  
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
  __tink_core__Callback_Callback_Impl_.depth = 0;
  
  
  String.__name__ = true;
  _hxClasses.Array = Array;
  Array.__name__ = true;
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();

  Main.main();
  __haxe_EntryPoint.run();

return _hx_exports
