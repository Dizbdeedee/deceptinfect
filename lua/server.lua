-- Generated by Haxe 4.2.1
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

--gmodhaxe print patch

_hx_print_2 = function(str)
    local len = #str
    if (len > 1000) then
        --print("splitting")
        for i=0,len - 1,1000 do
            local p = math.min(i + 1000,len)
            print(string.sub(str,i + 1,p))
        end
    else
        ---print("not splitting")
        print(str)
    end
end or (function() end)

function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    local x = 0
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            x = x + 1;
            if x > 5 then result = result .. ', <...>' break end
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            first = true
            buffer = {}
            for k,v in pairs(obj) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end
            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        if (_G.TypeID(obj) == _G.TYPE_NONE) then
          _G.error("Unknown lua type")
          return ""
        else
          return _G.tostring(obj)
        end
    end
end

if not _G._oldRequire then
    _G._oldRequire = _G.require
end

-- haxe is a little too eager to require modules sometimes, so this prevents script shutdown
-- TODO figure out a way to make this not affect global workspace
_G.require = function (str)
   local val,rtn = xpcall(_G._oldRequire,function (err) print("Failed to load module:" .. str .. " but did not halt" ) end,str)
   if val then
	  print("require loaded " .. str) return _G[str]
   end
end


local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}
--end

local _hx_exports = _hx_exports or {}
_hx_exports["null"] = _hx_exports["null"] or _hx_e()
local Array = _hx_e()
local Date = _hx_e()
local Lambda = _hx_e()
local LuaLambda = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local NETMESSAGE_di_cleanup = _hx_e()
local NETMESSAGE_di_evac = _hx_e()
local NETMESSAGE_di_infected = _hx_e()
local NETMESSAGE_di_infection = _hx_e()
local NETMESSAGE_di_infinfo = _hx_e()
local NETMESSAGE_di_removeclientent = _hx_e()
local NETMESSAGE_di_statinfo = _hx_e()
local NETMESSAGE_gamestate = _hx_e()
local NETMESSAGE_geiger = _hx_e()
local NETMESSAGE_grabend = _hx_e()
local NETMESSAGE_grabupdate = _hx_e()
local NETMESSAGE_haxe0 = _hx_e()
local NETMESSAGE_haxe1 = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local Sys = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
__deceptinfect_Darken = _hx_e()
__deceptinfect_macros_Spam = _hx_e()
__deceptinfect_DeceptInfect = _hx_e()
__deceptinfect__DistSquared_DistSquared_Impl_ = _hx_e()
__deceptinfect_GameInstance = _hx_e()
__enumExtractor_EnumExtractor = _hx_e()
__deceptinfect_GAME_STATE = _hx_e()
__tink_core_Disposable = _hx_e()
__tink_core_OwnedDisposable = _hx_e()
__tink_core__Signal_SignalObject = _hx_e()
__tink_core_SignalTrigger = _hx_e()
__deceptinfect_GameManager = _hx_e()
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_ = _hx_e()
__deceptinfect_GameValues = _hx_e()
__deceptinfect_MapStorage = _hx_e()
__deceptinfect_ModelType = _hx_e()
__deceptinfect_Misc = _hx_e()
__deceptinfect_PlayerManager = _hx_e()
__deceptinfect_ProfilingState = _hx_e()
__deceptinfect_Profiler = _hx_e()
__hxbit_Serializable = _hx_e()
__hxbit_Serializer = _hx_e()
__deceptinfect_NetSpread = _hx_e()
__deceptinfect_Spread = _hx_e()
__deceptinfect_TestObject = _hx_e()
__deceptinfect_Trace = _hx_e()
__deceptinfect_ecswip_System = _hx_e()
__deceptinfect_WeaponSystem = _hx_e()
__deceptinfect_WeaponStage = _hx_e()
__deceptinfect_ecswip_Component = _hx_e()
__deceptinfect_ecswip_ComponentManager = _hx_e()
__deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_ = _hx_e()
__deceptinfect_ecswip__ComponentManager_Component__Impl_ = _hx_e()
__deceptinfect_abilities_FormComponent = _hx_e()
__deceptinfect_abilities_CurrentForm = _hx_e()
__deceptinfect_abilities_Cooldown = _hx_e()
__deceptinfect_abilities_FormSystem = _hx_e()
__deceptinfect_client_GeigerSystem = _hx_e()
__deceptinfect_ecswip_ComponentTools = _hx_e()
__deceptinfect_ecswip_ComponentState = _hx_e()
__deceptinfect_ecswip_DummySystem = _hx_e()
__deceptinfect_ecswip_GEntityComponent = _hx_e()
__deceptinfect_ecswip_GrabSystem = _hx_e()
__deceptinfect_ecswip_HiddenHealthSystem = _hx_e()
__deceptinfect_ecswip_PlayerComponent = _hx_e()
__deceptinfect_ecswip_DeathTime = _hx_e()
__deceptinfect_ecswip_SignalStorage = _hx_e()
__deceptinfect_ecswip_Spectate = _hx_e()
__deceptinfect_ecswip_Spec_Direction = _hx_e()
__haxe_IMap = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__deceptinfect_infection_systems_InfectionSystem = _hx_e()
__deceptinfect_infection_systems_RateSystem = _hx_e()
__deceptinfect_radiation_RadiationSystem = _hx_e()
__deceptinfect_game_WinSystem = _hx_e()
__deceptinfect_game_BatterySystem = _hx_e()
__deceptinfect_game_SpawnPointTable = _hx_e()
__deceptinfect_game_SpawnSystem = _hx_e()
__deceptinfect_statuses_WalkthroughSystem = _hx_e()
__deceptinfect_game_NestSystem = _hx_e()
__deceptinfect_game_EvacSystem = _hx_e()
__deceptinfect_game_RagdollSystem = _hx_e()
__deceptinfect_game_SlowMotionSystem = _hx_e()
__deceptinfect_infection_systems_InfectionLookSystem = _hx_e()
__deceptinfect_radiation_ContaminationSystem = _hx_e()
__deceptinfect_radiation_RadSourceSystem = _hx_e()
__deceptinfect_game_LowHealthSystem = _hx_e()
__deceptinfect_items_ScannerSystem = _hx_e()
__deceptinfect_game_ItemOwnerSystem = _hx_e()
__deceptinfect_ecswip_SystemManager = _hx_e()
__deceptinfect_ecswip_VirtualPosition = _hx_e()
__deceptinfect_ecswip_ChooseVirPos = _hx_e()
__deceptinfect_ents_Di_barrel = _hx_e()
__deceptinfect_ents_Di_battery = _hx_e()
__deceptinfect_ents_Di_charger = _hx_e()
__deceptinfect_ents_Di_evac_zone = _hx_e()
__deceptinfect_ents_Di_flare = _hx_e()
__deceptinfect_ents_Di_nest = _hx_e()
__deceptinfect_ents_Di_puddle = _hx_e()
__deceptinfect_ents_PuddleState = _hx_e()
__deceptinfect_ents_Di_ragdoll = _hx_e()
__deceptinfect_ents_Di_spitball = _hx_e()
__deceptinfect_game_Net_RemoveClientEnt = _hx_e()
__deceptinfect_game_ClientTranslateSystem = _hx_e()
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_ = _hx_e()
__deceptinfect_game_SlowMotionState = _hx_e()
__deceptinfect_game_SpawnClaim = _hx_e()
__deceptinfect_game_Spawn = _hx_e()
__deceptinfect_game_BoundsSpawn = _hx_e()
__deceptinfect_game_SpawnSystemNav = _hx_e()
__deceptinfect_game_Win = _hx_e()
__deceptinfect_game_components_AliveComponent = _hx_e()
__deceptinfect_game_components_BatteryAccepter = _hx_e()
__deceptinfect_game_components_AccepterStatus = _hx_e()
__deceptinfect_game_components_BatterySource = _hx_e()
__deceptinfect_game_components_CleanupEnt = _hx_e()
__deceptinfect_game_components_EvacZone = _hx_e()
__deceptinfect_game_components_EvacState = _hx_e()
__deceptinfect_game_components_FlareComponent = _hx_e()
__deceptinfect_game_components_InEvacZone = _hx_e()
__deceptinfect_game_components_Stage = _hx_e()
__deceptinfect_game_components_ItemOwner = _hx_e()
__deceptinfect_game_components_ItemOwnerState = _hx_e()
__deceptinfect_game_components_RevealState = _hx_e()
__deceptinfect_game_components_KeepRestart = _hx_e()
__deceptinfect_game_components_NestComponent = _hx_e()
__deceptinfect_game_components_NestState = _hx_e()
__deceptinfect_game_components_RagInfo = _hx_e()
__deceptinfect_game_components_Ragdoll = _hx_e()
__deceptinfect_game_components_RagdollReveal = _hx_e()
__deceptinfect_game_components_Spawned = _hx_e()
__deceptinfect_game_components_StatInfo = _hx_e()
__deceptinfect_game_components_Statue = _hx_e()
__deceptinfect_infection_InfVunerability = _hx_e()
__deceptinfect_infection_InfectedComponent = _hx_e()
__deceptinfect_infection_InfectionComponent = _hx_e()
__deceptinfect_infection_AcceptingInfection = _hx_e()
__deceptinfect_infection_BaseInfection = _hx_e()
__deceptinfect_infection_INF_STATE = _hx_e()
__deceptinfect_infection_InfectionLookInfo = _hx_e()
__deceptinfect_infection_RateComponent = _hx_e()
__deceptinfect_infection_components_DamagePenaltyHidden = _hx_e()
__deceptinfect_infection_components_GrabAccepter = _hx_e()
__deceptinfect_infection_components_GrabAcceptState = _hx_e()
__deceptinfect_infection_components_GrabDraw = _hx_e()
__deceptinfect_infection_components_GrabProducer = _hx_e()
__deceptinfect_infection_components_SearchingState = _hx_e()
__deceptinfect_infection_components_GrabProduceState = _hx_e()
__deceptinfect_infection_components_GrabbableProp = _hx_e()
__deceptinfect_infection_components_HiddenHealthComponent = _hx_e()
__deceptinfect_infection_components_SpectateComponent = _hx_e()
__deceptinfect_items_Di_cure = _hx_e()
__deceptinfect_items_ScannerComponent = _hx_e()
__deceptinfect_items_ScanResult = _hx_e()
__deceptinfect_items_Weapon_Di_Scan = _hx_e()
__haxe_ds_List = _hx_e()
__deceptinfect_radiation_ContaminationAccepter = _hx_e()
__deceptinfect_radiation_ContaminationProducer = _hx_e()
__deceptinfect_radiation_NextOptions = _hx_e()
__deceptinfect_radiation_ContaminationType = _hx_e()
__deceptinfect_radiation_RadSource = _hx_e()
__deceptinfect_radiation_RadSourceOp = _hx_e()
__deceptinfect_radiation_RadSourceState = _hx_e()
__deceptinfect_radiation_RadTime = _hx_e()
__deceptinfect_radiation_RadVictim = _hx_e()
__deceptinfect_radiation_RadiationAccepter = _hx_e()
__deceptinfect_radiation_RadiationProducer = _hx_e()
__deceptinfect_radiation_RadiationState = _hx_e()
__deceptinfect_radiation_RadLifetime = _hx_e()
__deceptinfect_radiation_RadiationTypes = _hx_e()
__deceptinfect_sabotage_S_Break = _hx_e()
__deceptinfect_sabotage_S_Explode = _hx_e()
__deceptinfect_statuses_Contaminated = _hx_e()
__deceptinfect_statuses_Walkthroughable = _hx_e()
__deceptinfect_util_Cooldown = _hx_e()
__deceptinfect_util_EntityExt = _hx_e()
__deceptinfect_util_ValidID = _hx_e()
__deceptinfect_util_MinMaxTools = _hx_e()
__deceptinfect_util_PlayerExt = _hx_e()
__deceptinfect_util_TimeKeep = _hx_e()
__deceptinfect_util_Util = _hx_e()
__deceptinfect_weapons_Weapon_di_spit = _hx_e()
__gmod_helpers_macros_include_Build = _hx_e()
__gmod_helpers_macros_include___ForceExpose = _hx_e()
__gmod_helpers_net__NVector_NVector_Impl_ = _hx_e()
__haxe_EntryPoint = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_MainEvent = _hx_e()
__haxe_MainLoop = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_Timer = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_BalancedTree = _hx_e()
__haxe_ds_TreeNode = _hx_e()
__haxe_ds_EnumValueMap = _hx_e()
__haxe_ds_GenericCell = _hx_e()
__haxe_ds_GenericStack = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_ds__List_ListNode = _hx_e()
__haxe_ds__List_ListIterator = _hx_e()
__haxe_ds_Option = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_io_Bytes = _hx_e()
__haxe_io_BytesBuffer = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_io_Error = _hx_e()
__haxe_io_FPHelper = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__hxbit_PropTypeDesc = _hx_e()
__hxbit_Schema = _hx_e()
__hxbit_StructSerializable = _hx_e()
__hxbit_enumSer_Hxbit_PropTypeDesc = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__tink_core__Callback_Callback_Impl_ = _hx_e()
__tink_core_LinkObject = _hx_e()
__tink_core__Callback_ListCell = _hx_e()
__tink_core_SimpleDisposable = _hx_e()
__tink_core_CallbackList = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
_hxClasses["Array"] = Array
Array.__name__ = "Array"
Array.prototype = _hx_e();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    local i = self[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
_hxClasses["Date"] = Date
Date.__name__ = "Date"
Date.prototype = _hx_e();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

Lambda.new = {}
_hxClasses["Lambda"] = Lambda
Lambda.__name__ = "Lambda"
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    local x = x:next();
    if (x == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

LuaLambda.new = {}
_hxClasses["LuaLambda"] = LuaLambda
LuaLambda.__name__ = "LuaLambda"
LuaLambda.iter = function(it,f) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(it);
  local _g_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = _g_lnext(it, _hx_1_p_index);
  local _g_nextV = _hx_2_init_value;
  local _g_i = _hx_2_init_index;
  while (_g_nextV ~= nil) do 
    local v = _g_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = _g_lnext(it, _g_i);
    _g_i = _hx_3_nextResult_index;
    _g_nextV = _hx_3_nextResult_value;
    f(v);
  end;
end

Main.new = {}
_hxClasses["Main"] = Main
Main.__name__ = "Main"
Main.main = function() 
  __deceptinfect_Trace.overridetrace();
  __deceptinfect_DeceptInfect.new();
  _G.file.CreateDir("deceptinfect");
  _G.game.CleanUpMap();
  __deceptinfect_ecswip_SignalStorage.initEvents();
  __deceptinfect_GameManager.init();
  local _g = 0;
  local _g1 = __deceptinfect_Misc.roundModels;
  while (_g < _g1.length) do 
    local model = _g1[_g];
    _g = _g + 1;
    _G.util.PrecacheModel(model);
  end;
  __deceptinfect_TestObject.new();
  __deceptinfect_game_SpawnSystem.generateSpawns();
  _G.util.PrecacheModel(__deceptinfect_Misc.infModel);
  _G.game.ConsoleCommand("mp_falldamage 1\n");
  __deceptinfect_GameManager.cleanup();
  _G.math.randomseed(_G.RealTime());
  __haxe_Log.trace("Deceptinfect server reinit!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=79,className="Main",methodName="main"}));
  local x = _G.ents.FindByClass("light");
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x);
  local ent_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = ent_lnext(x, _hx_1_p_index);
  local ent_nextV = _hx_2_init_value;
  local ent_i = _hx_2_init_index;
  while (ent_nextV ~= nil) do 
    local v = ent_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = ent_lnext(x, ent_i);
    ent_i = _hx_3_nextResult_index;
    ent_nextV = _hx_3_nextResult_value;
    v:Fire("TurnOn");
  end;
end

Math.new = {}
_hxClasses["Math"] = Math
Math.__name__ = "Math"
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

NETMESSAGE_di_cleanup.new = function() 
  local self = _hx_new(NETMESSAGE_di_cleanup.prototype)
  NETMESSAGE_di_cleanup.super(self)
  return self
end
NETMESSAGE_di_cleanup.super = function(self) 
  _G.util.AddNetworkString("di_cleanup");
end
_hxClasses["NETMESSAGE_di_cleanup"] = NETMESSAGE_di_cleanup
NETMESSAGE_di_cleanup.__name__ = "NETMESSAGE_di_cleanup"
NETMESSAGE_di_cleanup.prototype = _hx_e();
NETMESSAGE_di_cleanup.prototype.broadcast = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_cleanup", unreliable);
  _G.net.Broadcast();
end

NETMESSAGE_di_cleanup.prototype.__class__ =  NETMESSAGE_di_cleanup

NETMESSAGE_di_evac.new = function() 
  local self = _hx_new(NETMESSAGE_di_evac.prototype)
  NETMESSAGE_di_evac.super(self)
  return self
end
NETMESSAGE_di_evac.super = function(self) 
  _G.util.AddNetworkString("di_evac");
end
_hxClasses["NETMESSAGE_di_evac"] = NETMESSAGE_di_evac
NETMESSAGE_di_evac.__name__ = "NETMESSAGE_di_evac"
NETMESSAGE_di_evac.prototype = _hx_e();
NETMESSAGE_di_evac.prototype.broadcast = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_evac", unreliable);
  _G.net.WriteInt(data.state, 32);
  _G.net.WriteFloat(data.time);
  _G.net.Broadcast();
end

NETMESSAGE_di_evac.prototype.__class__ =  NETMESSAGE_di_evac

NETMESSAGE_di_infected.new = function() 
  local self = _hx_new(NETMESSAGE_di_infected.prototype)
  NETMESSAGE_di_infected.super(self)
  return self
end
NETMESSAGE_di_infected.super = function(self) 
  _G.util.AddNetworkString("di_infected");
end
_hxClasses["NETMESSAGE_di_infected"] = NETMESSAGE_di_infected
NETMESSAGE_di_infected.__name__ = "NETMESSAGE_di_infected"
NETMESSAGE_di_infected.prototype = _hx_e();
NETMESSAGE_di_infected.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infected", unreliable);
  _G.net.Send(recv);
end

NETMESSAGE_di_infected.prototype.__class__ =  NETMESSAGE_di_infected

NETMESSAGE_di_infection.new = function() 
  local self = _hx_new(NETMESSAGE_di_infection.prototype)
  NETMESSAGE_di_infection.super(self)
  return self
end
NETMESSAGE_di_infection.super = function(self) 
  _G.util.AddNetworkString("di_infection");
end
_hxClasses["NETMESSAGE_di_infection"] = NETMESSAGE_di_infection
NETMESSAGE_di_infection.__name__ = "NETMESSAGE_di_infection"
NETMESSAGE_di_infection.prototype = _hx_e();
NETMESSAGE_di_infection.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infection", unreliable);
  _G.net.WriteFloat(data.infection);
  _G.net.Send(recv);
end

NETMESSAGE_di_infection.prototype.__class__ =  NETMESSAGE_di_infection

NETMESSAGE_di_infinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_infinfo.prototype)
  NETMESSAGE_di_infinfo.super(self)
  return self
end
NETMESSAGE_di_infinfo.super = function(self) 
  _G.util.AddNetworkString("di_infinfo");
end
_hxClasses["NETMESSAGE_di_infinfo"] = NETMESSAGE_di_infinfo
NETMESSAGE_di_infinfo.__name__ = "NETMESSAGE_di_infinfo"
NETMESSAGE_di_infinfo.prototype = _hx_e();
NETMESSAGE_di_infinfo.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_infinfo", unreliable);
  _G.net.WriteFloat(data.inf);
  _G.net.WriteBool(data.isinfected);
  _G.net.WriteEntity(data.target);
  _G.net.Send(recv);
end

NETMESSAGE_di_infinfo.prototype.__class__ =  NETMESSAGE_di_infinfo

NETMESSAGE_di_removeclientent.new = function() 
  local self = _hx_new(NETMESSAGE_di_removeclientent.prototype)
  NETMESSAGE_di_removeclientent.super(self)
  return self
end
NETMESSAGE_di_removeclientent.super = function(self) 
  _G.util.AddNetworkString("di_removeclientent");
end
_hxClasses["NETMESSAGE_di_removeclientent"] = NETMESSAGE_di_removeclientent
NETMESSAGE_di_removeclientent.__name__ = "NETMESSAGE_di_removeclientent"
NETMESSAGE_di_removeclientent.prototype = _hx_e();
NETMESSAGE_di_removeclientent.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_removeclientent", unreliable);
  _G.net.WriteInt(data.id, 32);
  _G.net.Send(recv);
end

NETMESSAGE_di_removeclientent.prototype.__class__ =  NETMESSAGE_di_removeclientent

NETMESSAGE_di_statinfo.new = function() 
  local self = _hx_new(NETMESSAGE_di_statinfo.prototype)
  NETMESSAGE_di_statinfo.super(self)
  return self
end
NETMESSAGE_di_statinfo.super = function(self) 
  _G.util.AddNetworkString("di_statinfo");
end
_hxClasses["NETMESSAGE_di_statinfo"] = NETMESSAGE_di_statinfo
NETMESSAGE_di_statinfo.__name__ = "NETMESSAGE_di_statinfo"
NETMESSAGE_di_statinfo.prototype = _hx_e();
NETMESSAGE_di_statinfo.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("di_statinfo", unreliable);
  _G.net.WriteFloat(data.health);
  _G.net.WriteFloat(data.inf);
  _G.net.WriteString(data.name);
  _G.net.WriteEntity(data.stat);
  _G.net.Send(recv);
end

NETMESSAGE_di_statinfo.prototype.__class__ =  NETMESSAGE_di_statinfo

NETMESSAGE_gamestate.new = function() 
  local self = _hx_new(NETMESSAGE_gamestate.prototype)
  NETMESSAGE_gamestate.super(self)
  return self
end
NETMESSAGE_gamestate.super = function(self) 
  _G.util.AddNetworkString("gamestate");
end
_hxClasses["NETMESSAGE_gamestate"] = NETMESSAGE_gamestate
NETMESSAGE_gamestate.__name__ = "NETMESSAGE_gamestate"
NETMESSAGE_gamestate.prototype = _hx_e();
NETMESSAGE_gamestate.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("gamestate", unreliable);
  _G.net.WriteInt(data.state, 32);
  _G.net.WriteFloat(data.time);
  _G.net.Send(recv);
end

NETMESSAGE_gamestate.prototype.__class__ =  NETMESSAGE_gamestate

NETMESSAGE_geiger.new = function() 
  local self = _hx_new(NETMESSAGE_geiger.prototype)
  NETMESSAGE_geiger.super(self)
  return self
end
NETMESSAGE_geiger.super = function(self) 
  _G.util.AddNetworkString("geiger");
end
_hxClasses["NETMESSAGE_geiger"] = NETMESSAGE_geiger
NETMESSAGE_geiger.__name__ = "NETMESSAGE_geiger"
NETMESSAGE_geiger.prototype = _hx_e();
NETMESSAGE_geiger.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("geiger", unreliable);
  _G.net.WriteFloat(data.geiger);
  _G.net.Send(recv);
end

NETMESSAGE_geiger.prototype.__class__ =  NETMESSAGE_geiger

NETMESSAGE_grabend.new = function() 
  local self = _hx_new(NETMESSAGE_grabend.prototype)
  NETMESSAGE_grabend.super(self)
  return self
end
NETMESSAGE_grabend.super = function(self) 
  _G.util.AddNetworkString("grabend");
end
_hxClasses["NETMESSAGE_grabend"] = NETMESSAGE_grabend
NETMESSAGE_grabend.__name__ = "NETMESSAGE_grabend"
NETMESSAGE_grabend.prototype = _hx_e();
NETMESSAGE_grabend.prototype.sendFilter = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("grabend", unreliable);
  _G.net.WriteInt(data.index, 32);
  _G.net.Send(recv);
end

NETMESSAGE_grabend.prototype.__class__ =  NETMESSAGE_grabend

NETMESSAGE_grabupdate.new = function() 
  local self = _hx_new(NETMESSAGE_grabupdate.prototype)
  NETMESSAGE_grabupdate.super(self)
  return self
end
NETMESSAGE_grabupdate.super = function(self) 
  _G.util.AddNetworkString("grabupdate");
end
_hxClasses["NETMESSAGE_grabupdate"] = NETMESSAGE_grabupdate
NETMESSAGE_grabupdate.__name__ = "NETMESSAGE_grabupdate"
NETMESSAGE_grabupdate.prototype = _hx_e();
NETMESSAGE_grabupdate.prototype.sendFilter = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  _G.net.Start("grabupdate", unreliable);
  _G.net.WriteEntity(data.ent);
  _G.net.WriteEntity(data.ent2);
  _G.net.WriteInt(data.index, 32);
  _G.net.Send(recv);
end

NETMESSAGE_grabupdate.prototype.__class__ =  NETMESSAGE_grabupdate

NETMESSAGE_haxe0.new = function(recvs) 
  local self = _hx_new(NETMESSAGE_haxe0.prototype)
  NETMESSAGE_haxe0.super(self,recvs)
  return self
end
NETMESSAGE_haxe0.super = function(self,recvs) 
  _G.util.AddNetworkString("haxe0");
end
_hxClasses["NETMESSAGE_haxe0"] = NETMESSAGE_haxe0
NETMESSAGE_haxe0.__name__ = "NETMESSAGE_haxe0"
NETMESSAGE_haxe0.prototype = _hx_e();
NETMESSAGE_haxe0.prototype.send = function(self,data,recv,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  local seralizer = __hxbit_Serializer.new();
  local bytes = seralizer:serialize(data);
  _G.net.Start("haxe0", unreliable);
  _G.net.WriteData(bytes:toString(), bytes.length);
  _G.net.Send(recv);
end

NETMESSAGE_haxe0.prototype.__class__ =  NETMESSAGE_haxe0

NETMESSAGE_haxe1.new = function(recvs) 
  local self = _hx_new(NETMESSAGE_haxe1.prototype)
  NETMESSAGE_haxe1.super(self,recvs)
  return self
end
NETMESSAGE_haxe1.super = function(self,recvs) 
  _G.util.AddNetworkString("haxe1");
end
_hxClasses["NETMESSAGE_haxe1"] = NETMESSAGE_haxe1
NETMESSAGE_haxe1.__name__ = "NETMESSAGE_haxe1"
NETMESSAGE_haxe1.prototype = _hx_e();
NETMESSAGE_haxe1.prototype.broadcast = function(self,data,unreliable) 
  if (unreliable == nil) then 
    unreliable = false;
  end;
  local seralizer = __hxbit_Serializer.new();
  local bytes = seralizer:serialize(data);
  _G.net.Start("haxe1", unreliable);
  _G.net.WriteData(bytes:toString(), bytes.length);
  _G.net.Broadcast();
end

NETMESSAGE_haxe1.prototype.__class__ =  NETMESSAGE_haxe1

Reflect.new = {}
_hxClasses["Reflect"] = Reflect
Reflect.__name__ = "Reflect"
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.callMethod = function(o,func,args) 
  if ((args == nil) or (args.length == 0)) then 
    do return func(o) end;
  else
    local self_arg = false;
    if ((o ~= nil) and (o.__name__ == nil)) then 
      self_arg = true;
    end;
    if (self_arg) then 
      do return func(o, _hx_table.unpack(args, 0, args.length - 1)) end;
    else
      do return func(_hx_table.unpack(args, 0, args.length - 1)) end;
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end
Reflect.compare = function(a,b) 
  if (a == b) then 
    do return 0 end;
  else
    if (a == nil) then 
      do return -1 end;
    else
      if (b == nil) then 
        do return 1 end;
      else
        if (a > b) then 
          do return 1 end;
        else
          do return -1 end;
        end;
      end;
    end;
  end;
end
Reflect.isEnumValue = function(v) 
  if ((v ~= nil) and __lua_Boot.__instanceof(v, _G.table)) then 
    do return v.__enum__ ~= nil end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
_hxClasses["String"] = String
String.__name__ = "String"
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = _G.string.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
_hxClasses["Std"] = Std
Std.__name__ = "Std"
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
_hxClasses["StringBuf"] = StringBuf
StringBuf.__name__ = "StringBuf"
StringBuf.prototype = _hx_e();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
_hxClasses["StringTools"] = StringTools
StringTools.__name__ = "StringTools"
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do 
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  local str = Std.string(s);
  _G.table.insert(buf_b, str);
  do return _G.table.concat(buf_b) end;
end

Sys.new = {}
_hxClasses["Sys"] = Sys
Sys.__name__ = "Sys"
Sys.time = function() 
  do return _G.SysTime() end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
_hxClasses["Type"] = Type
Type.__name__ = "Type"
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getSuperClass = function(c) 
  do return c.__super__ end;
end
Type.resolveClass = function(name) 
  local cl = _hxClasses[name];
  local tmp;
  if (cl ~= nil) then 
    local o = cl;
    tmp = not ((function() 
      local _hx_1
      if (_G.type(o) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = o.__name__; end
      return _hx_1
    end )());
  else
    tmp = true;
  end;
  if (tmp) then 
    do return nil end;
  end;
  do return cl end;
end
Type.createEnum = function(e,constr,params) 
  local f = Reflect.field(e, constr);
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown(Std.string("No such constructor ") .. Std.string(constr)),0);
  end;
  if (Reflect.isFunction(f)) then 
    if (params == nil) then 
      _G.error(__haxe_Exception.thrown(Std.string(Std.string("Constructor ") .. Std.string(constr)) .. Std.string(" need parameters")),0);
    end;
    do return Reflect.callMethod(nil,f,params) end;
  end;
  if ((params ~= nil) and (params.length ~= 0)) then 
    _G.error(__haxe_Exception.thrown(Std.string(Std.string("Constructor ") .. Std.string(constr)) .. Std.string(" does not need parameters")),0);
  end;
  do return f end;
end
Type.createEnumIndex = function(e,index,params) 
  local c = e.__constructs__[index];
  if (c == nil) then 
    _G.error(__haxe_Exception.thrown(Std.string(index) .. Std.string(" is not a valid enum constructor index")),0);
  end;
  do return Type.createEnum(e, c, params) end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do 
    local _g = 0;
    local _g1 = Reflect.fields(p);
    while (_g < _g1.length) do 
      local f = _g1[_g];
      _g = _g + 1;
      if (not Lambda.has(a, f)) then 
        a:push(f);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

__deceptinfect_Darken.new = {}
_hxClasses["deceptinfect.Darken"] = __deceptinfect_Darken
__deceptinfect_Darken.__name__ = "deceptinfect.Darken"
__deceptinfect_Darken.replace = function() 
  local open = _G.MR.OpenBSP();
  if (open ~= false) then 
    local b = open;
    local x = b:ReadLumpTextDataStringData();
    local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x);
    local str_lnext = _hx_1_p_next;
    local _hx_2_init_index, _hx_2_init_value = str_lnext(x, _hx_1_p_index);
    local str_nextV = _hx_2_init_value;
    local str_i = _hx_2_init_index;
    while (str_nextV ~= nil) do 
      local v = str_nextV;
      local _hx_3_nextResult_index, _hx_3_nextResult_value = str_lnext(x, str_i);
      str_i = _hx_3_nextResult_index;
      str_nextV = _hx_3_nextResult_value;
      local imat = _G.Material(v);
      if (not imat:IsError()) then 
        local tmp;
        local tmp1;
        local _this = imat:GetName();
        local r = _G.string.find(_this, "tools", 1, true);
        if ((function() 
          local _hx_4
          if ((r ~= nil) and (r > 0)) then 
          _hx_4 = r - 1; else 
          _hx_4 = -1; end
          return _hx_4
        end )() == -1) then 
          local _this = imat:GetName();
          local r = _G.string.find(_this, "lights", 1, true);
          tmp1 = (function() 
            local _hx_5
            if ((r ~= nil) and (r > 0)) then 
            _hx_5 = r - 1; else 
            _hx_5 = -1; end
            return _hx_5
          end )() == -1;
        else
          tmp1 = false;
        end;
        if (tmp1) then 
          local _this = imat:GetName();
          local r = _G.string.find(_this, "water", 1, true);
          tmp = (function() 
            local _hx_6
            if ((r ~= nil) and (r > 0)) then 
            _hx_6 = r - 1; else 
            _hx_6 = -1; end
            return _hx_6
          end )() == -1;
        else
          tmp = false;
        end;
        if (tmp) then 
          local col = imat:GetVector("$color");
          local er = _hx_o({__fields__={name=true,baseTexture=true,color=true},name=v,baseTexture=imat:GetTexture("$basetexture"),color=col});
          __deceptinfect_Darken.materialsSet:push(er);
          imat:SetTexture("$basetexture", "grey");
          local this1 = _G.Vector(0.03, 0.03, 0.03);
          imat:SetVector("$color", this1);
        end;
      end;
    end;
  end;
end
__deceptinfect_Darken.revert = function() 
  local _g = 0;
  local _g1 = __deceptinfect_Darken.materialsSet;
  while (_g < _g1.length) do 
    local mat = _g1[_g];
    _g = _g + 1;
    local imat = _G.Material(mat.name);
    if (mat.baseTexture == nil) then 
      __haxe_Log.trace("no base texture", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Darken.hx",lineNumber=49,className="deceptinfect.Darken",methodName="revert"}));
      imat:SetUndefined("$basetexture");
    else
      imat:SetTexture("$basetexture", mat.baseTexture);
      __haxe_Log.trace("set texture", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Darken.hx",lineNumber=53,className="deceptinfect.Darken",methodName="revert"}));
    end;
    if (mat.color == nil) then 
      imat:SetUndefined("$color");
      __haxe_Log.trace("no color", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Darken.hx",lineNumber=57,className="deceptinfect.Darken",methodName="revert"}));
    else
      imat:SetVector("$color", mat.color);
      __haxe_Log.trace("set color", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Darken.hx",lineNumber=60,className="deceptinfect.Darken",methodName="revert"}));
    end;
    imat:Recompute();
  end;
end
__deceptinfect_Darken.setDark = function(x) 
  if (not __deceptinfect_Darken.replaced and x) then 
    __deceptinfect_Darken.replace();
    __deceptinfect_Darken.replaced = true;
  else
    if (__deceptinfect_Darken.replaced and not x) then 
      __deceptinfect_Darken.revert();
      __deceptinfect_Darken.replaced = false;
    end;
  end;
end
_hx_exports["setDark"] = __deceptinfect_Darken.setDark

__deceptinfect_macros_Spam.new = {}
_hxClasses["deceptinfect.macros.Spam"] = __deceptinfect_macros_Spam
__deceptinfect_macros_Spam.__name__ = "deceptinfect.macros.Spam"

__deceptinfect_DeceptInfect.new = function() 
  local self = _hx_new(__deceptinfect_DeceptInfect.prototype)
  __deceptinfect_DeceptInfect.super(self)
  return self
end
__deceptinfect_DeceptInfect.super = function(self) 
  self.underperforming = false;
  self.timestart = 0;
  self.lastcrc = 0;
  GM.CreateEntityRagdoll = function(GM,...) return self:CreateEntityRagdoll(...) end;
  GM.Think = function(GM,...) return self:Think(...) end;
  GM.checkPerformance = function(GM,...) return self:checkPerformance(...) end;
  GM.OnEntityCreated = function(GM,...) return self:OnEntityCreated(...) end;
  GM.EntityRemoved = function(GM,...) return self:EntityRemoved(...) end;
  GM.PlayerSilentDeath = function(GM,...) return self:PlayerSilentDeath(...) end;
  GM.DoPlayerDeath = function(GM,...) return self:DoPlayerDeath(...) end;
  GM.PlayerDeath = function(GM,...) return self:PlayerDeath(...) end;
  GM.EntityKeyValue = function(GM,...) return self:EntityKeyValue(...) end;
  GM.PlayerSpawn = function(GM,...) return self:PlayerSpawn(...) end;
  GM.PlayerDisconnected = function(GM,...) return self:PlayerDisconnected(...) end;
  GM.PlayerButtonUp = function(GM,...) return self:PlayerButtonUp(...) end;
  GM.KeyPress = function(GM,...) return self:KeyPress(...) end;
  GM.KeyRelease = function(GM,...) return self:KeyRelease(...) end;
  GM.PlayerButtonDown = function(GM,...) return self:PlayerButtonDown(...) end;
  GM.PlayerInitialSpawn = function(GM,...) return self:PlayerInitialSpawn(...) end;
  GM.PlayerDeathSound = function(GM,...) return self:PlayerDeathSound(...) end;
  GM.PlayerDeathThink = function(GM,...) return self:PlayerDeathThink(...) end;
  GM.IsSpawnpointSuitable = function(GM,...) return self:IsSpawnpointSuitable(...) end;
  GM.PlayerSelectSpawn = function(GM,...) return self:PlayerSelectSpawn(...) end;
  GM.EntityTakeDamage = function(GM,...) return self:EntityTakeDamage(...) end;
  GM.PlayerSay = function(GM,...) return self:PlayerSay(...) end;
  GM.PlayerCanHearPlayersVoice = function(GM,...) return self:PlayerCanHearPlayersVoice(...) end;
  self["self"] = GM;
  __deceptinfect_DeceptInfect.instance = self;
end
_hxClasses["deceptinfect.DeceptInfect"] = __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__name__ = "deceptinfect.DeceptInfect"
__deceptinfect_DeceptInfect.__interfaces__ = {__deceptinfect_macros_Spam}
__deceptinfect_DeceptInfect.prototype = _hx_e();
__deceptinfect_DeceptInfect.prototype.CreateEntityRagdoll = function(self,owner,ragdoll) 
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_RagdollSystem):playerRagdoll(owner, ragdoll);
end
__deceptinfect_DeceptInfect.prototype.lastcrc= nil;
__deceptinfect_DeceptInfect.prototype.Think = function(self) 
  __deceptinfect_ecswip_SystemManager.runAllSystems();
  __deceptinfect_GameManager.think();
end
__deceptinfect_DeceptInfect.prototype.timestart= nil;
__deceptinfect_DeceptInfect.prototype.underperforming= nil;
__deceptinfect_DeceptInfect.prototype.checkPerformance = function(self) 
  if ((1 / _G.FrameTime()) < 66.6) then 
    __deceptinfect_util_Util.printTimer_2(1, 5, function() 
      __haxe_Log.trace("Server is underperforming! ${1 / Gmod.FrameTime()}", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=76,className="deceptinfect.DeceptInfect",methodName="checkPerformance"}));
    end);
  end;
end
__deceptinfect_DeceptInfect.prototype.OnEntityCreated = function(self,entity) 
  if (entity:IsPlayer()) then 
    local x = __deceptinfect_ecswip_PlayerComponent.new(entity);
    local this1 = x.player;
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(this1);
  end;
end
__deceptinfect_DeceptInfect.prototype.EntityRemoved = function(self,ent) 
  if (ent:IsPlayer()) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(ent.id);
    do return end;
  end;
  local _g = ent.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    __deceptinfect_ecswip_ComponentManager.removeEntity(_g[2]);
  end;
end
__deceptinfect_DeceptInfect.prototype.PlayerSilentDeath = function(self,ply) 
end
__deceptinfect_DeceptInfect.prototype.playerDeath = function(self,victim) 
  __deceptinfect_ecswip_ComponentManager.removeComponent(25, victim.id);
  __deceptinfect_ecswip_ComponentManager.removeComponent(9, victim.id);
  local sounds = __deceptinfect_Misc.deathSounds:get(__deceptinfect_ModelType.HUMAN_MALE);
  local sound = sounds[_G.math.random(0, sounds.length - 1)];
  victim:EmitSound(sound, 0, nil, 0);
  _G.EmitSound(sound, victim:GetPos(), victim:EntIndex(), _G.CHAN_VOICE);
  victim:CreateRagdoll();
end
__deceptinfect_DeceptInfect.prototype.DoPlayerDeath = function(self,ply,attacker,dmg) 
  GAMEMODE:PlayerSilentDeath();
  ply:KillSilent();
  self:playerDeath(ply);
end
__deceptinfect_DeceptInfect.prototype.PlayerDeath = function(self,victim,inflictor,attacker) 
  __haxe_Log.trace("Player ded!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=128,className="deceptinfect.DeceptInfect",methodName="PlayerDeath"}));
end
__deceptinfect_DeceptInfect.prototype.EntityKeyValue = function(self,ent,key,value) 
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.PlayerSpawn = function(self,player,transition) 
  player:UnSpectate();
  player:SetModel(__deceptinfect_Misc.roundModels[_G.math.random(0, __deceptinfect_Misc.roundModels.length - 1)]);
  player:SetShouldServerRagdoll(true);
  player:ShouldDropWeapon(true);
  player:AllowFlashlight(true);
  local tmp = __deceptinfect_GameManager.state[1];
  if (tmp) == 0 then 
    player:Give(__deceptinfect_Misc.roundWeapons[0]);
    player:ShouldDropWeapon(false);
  elseif (tmp) == 1 then 
    player:Give(__deceptinfect_Misc.roundWeapons[0]);
    player:ShouldDropWeapon(false);
  elseif (tmp) == 2 then 
    player:KillSilent();
  elseif (tmp) == 3 then 
    player:KillSilent(); end;
end
__deceptinfect_DeceptInfect.prototype.PlayerDisconnected = function(self,ply) 
  __deceptinfect_ecswip_ComponentManager.removeEntity(ply.id);
end
__deceptinfect_DeceptInfect.prototype.PlayerButtonUp = function(self,ply,button) 
  if (button) == _G.KEY_E then 
  elseif (button) == _G.KEY_F then 
    __deceptinfect_abilities_FormSystem.attemptChangeForm(ply.id);
  elseif (button) == _G.KEY_M then 
  elseif (button) == _G.KEY_SEMICOLON then 
    local plyr = _G.player.GetByID(1);
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_infection_systems_InfectionSystem):makeInfected(plyr.id);else end;
end
__deceptinfect_DeceptInfect.prototype.KeyPress = function(self,ply,key) 
  if (key == _G.IN_USE) then 
    __deceptinfect_ecswip_GrabSystem.requestStartSearch(ply.id);
  end;
end
__deceptinfect_DeceptInfect.prototype.KeyRelease = function(self,ply,key) 
  if (key == _G.IN_USE) then 
    __deceptinfect_ecswip_GrabSystem.requestStopSearch(ply.id);
  end;
end
__deceptinfect_DeceptInfect.prototype.PlayerButtonDown = function(self,ply,button) 
end
__deceptinfect_DeceptInfect.prototype.PlayerInitialSpawn = function(self,player,transition) 
end
__deceptinfect_DeceptInfect.prototype.PlayerDeathSound = function(self) 
  do return true end
end
__deceptinfect_DeceptInfect.prototype.PlayerDeathThink = function(self,ply) 
  local id = 33;
  local diID = ply.id;
  local comp;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    comp = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    comp = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local comp = __deceptinfect_ecswip_ComponentTools.sure(comp);
  local reviveTime;
  local revive = false;
  local _g = comp.deathTime;
  local tmp;
  local tmp1 = _g[1];
  if (tmp1) == 0 then 
    reviveTime = _G.CurTime() + 1;
    tmp = __deceptinfect_ecswip_DeathTime.DEAD(reviveTime);
  elseif (tmp1) == 1 then 
    reviveTime = _g[2];
    tmp = comp.deathTime; end;
  comp.deathTime = tmp;
  if ((ply:IsBot() and (_G.CurTime() > reviveTime)) and __deceptinfect_GameManager.shouldAllowRespawn()) then 
    revive = true;
  end;
  if (_G.IsValid(ply:GetObserverTarget())) then 
    ply:SetPos(ply:GetObserverTarget():GetPos());
  end;
  if (ply:KeyPressed(_G.IN_ATTACK)) then 
    if ((_G.CurTime() > reviveTime) and __deceptinfect_GameManager.shouldAllowRespawn()) then 
      revive = true;
    end;
    __deceptinfect_ecswip_Spectate.chooseSpectateTarget(comp, __deceptinfect_ecswip_Spec_Direction.FORWARDS);
  else
    if (ply:KeyPressed(_G.IN_ATTACK2)) then 
      __deceptinfect_ecswip_Spectate.chooseSpectateTarget(comp, __deceptinfect_ecswip_Spec_Direction.BACKWARDS);
    else
      if (ply:KeyPressed(_G.IN_JUMP) and __deceptinfect_util_PlayerExt.shouldFreeRoam(ply)) then 
        ply:UnSpectate();
        ply:Spectate(_G.OBS_MODE_ROAMING);
        comp.spec_next = 1;
      end;
    end;
  end;
  if (revive) then 
    comp.deathTime = __deceptinfect_ecswip_DeathTime.ALIVE;
    ply:UnSpectate();
    ply:Spawn();
    do return true end;
  else
    do return false end;
  end;
end
__deceptinfect_DeceptInfect.prototype.IsSpawnpointSuitable = function(self,ply,spawnpoint,makeSuitable) 
  local pos = spawnpoint:GetPos();
  local this1 = _G.Vector(-30, -30, 0);
  local otherVec = this1;
  local blockers = pos + otherVec;
  local this1 = _G.Vector(30, 30, 72);
  local otherVec = this1;
  local blockers = _G.ents.FindInBox(blockers, pos + otherVec);
  local this1 = _G.Vector(1, 1, 1);
  local otherVec = this1;
  local tracehit = _G.util.TraceEntity(_hx_o({__fields__={start=true,endpos=true},start=pos,endpos=pos + otherVec}), ply);
  local x = blockers;
  local _g_tbl = x;
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x);
  local _g_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = _g_lnext(_g_tbl, _hx_1_p_index);
  local _g_nextV = _hx_2_init_value;
  local _g_i = _hx_2_init_index;
  while (_g_nextV ~= nil) do 
    local v = _g_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = _g_lnext(_g_tbl, _g_i);
    _g_i = _hx_3_nextResult_index;
    _g_nextV = _hx_3_nextResult_value;
    local ent = v;
    if (ent:IsPlayer()) then 
      local blockPly = ent;
      __deceptinfect_util_PlayerExt.setWalkthroughable(blockPly, true);
      local x = __deceptinfect_statuses_Walkthroughable.new();
      local to = blockPly.id;
      __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[18], to, x);
      local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
      local key = x;
      _this.h[key] = to;
      _this.k[key] = true;
      __deceptinfect_util_PlayerExt.setWalkthroughable(ply, true);
      local x = __deceptinfect_statuses_Walkthroughable.new();
      local to = ply.id;
      __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[18], to, x);
      local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
      local key = x;
      _this.h[key] = to;
      _this.k[key] = true;
    end;
  end;
  if (tracehit.HitWorld) then 
    __haxe_Log.trace("not valid..", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=281,className="deceptinfect.DeceptInfect",methodName="IsSpawnpointSuitable"}));
    do return false end;
  end;
  do return true end
end
__deceptinfect_DeceptInfect.prototype.PlayerSelectSpawn = function(self,ply,transition) 
  local spawns = _G.ents.FindByClass("info_player_start");
  local random_spawn = _G.math.random(#spawns);
  if (self:IsSpawnpointSuitable(ply, spawns[random_spawn], false)) then 
    do return spawns[random_spawn] end;
  end;
  __haxe_Log.trace("Could not find a spawn!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/DeceptInfect.hx",lineNumber=297,className="deceptinfect.DeceptInfect",methodName="PlayerSelectSpawn"}));
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.EntityTakeDamage = function(self,target,dmg) 
  local _g = target.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    __deceptinfect_ecswip_SignalStorage.entDamageTrigger.handlers:invoke(_hx_o({__fields__={vicID=true,dmg=true,entity=true},vicID=_g[2],dmg=dmg,entity=target}));
  end;
  do return nil end
end
__deceptinfect_DeceptInfect.prototype.PlayerSay = function(self,sender,text,teamChat) 
  do return "aaaaple" end
end
__deceptinfect_DeceptInfect.prototype.PlayerCanHearPlayersVoice = function(self,listener,talker) 
  local tbl = ({});
  local access = _hx_o({__fields__={a=true,b=true},a=false,b=false});
  local _g_keys = Reflect.fields(access);
  local _g_index = 0;
  while (_g_index < _g_keys.length) do 
    _g_index = _g_index + 1;
    local key = _g_keys[_g_index - 1];
    local _g1_value = Reflect.field(access, key);
    tbl[_G.string.byte(key, 1) - 96] = _g1_value;
  end;
  do return _hx_table.unpack(tbl) end
end
__deceptinfect_DeceptInfect.prototype["self"]= nil;

__deceptinfect_DeceptInfect.prototype.__class__ =  __deceptinfect_DeceptInfect
__deceptinfect_DeceptInfect.__super__ = {} or a
setmetatable(__deceptinfect_DeceptInfect.prototype,{__index={} or a.prototype})

__deceptinfect__DistSquared_DistSquared_Impl_.new = {}
_hxClasses["deceptinfect._DistSquared.DistSquared_Impl_"] = __deceptinfect__DistSquared_DistSquared_Impl_
__deceptinfect__DistSquared_DistSquared_Impl_.__name__ = "deceptinfect._DistSquared.DistSquared_Impl_"
__deceptinfect__DistSquared_DistSquared_Impl_.convert = function(x) 
  do return _G.math.pow(x, 2) end;
end

__deceptinfect_GameInstance.new = function() 
  local self = _hx_new(__deceptinfect_GameInstance.prototype)
  __deceptinfect_GameInstance.super(self)
  return self
end
__deceptinfect_GameInstance.super = function(self) 
  local this1 = ({length = 1});
  local this1 = this1;
  local ret = this1;
  ret[0] = 0.0;
  self.baseInfection = ret;
  self.gameStarted = 0.0;
  self.totalGameTime = 0;
end
_hxClasses["deceptinfect.GameInstance"] = __deceptinfect_GameInstance
__deceptinfect_GameInstance.__name__ = "deceptinfect.GameInstance"
__deceptinfect_GameInstance.prototype = _hx_e();
__deceptinfect_GameInstance.prototype.totalGameTime= nil;
__deceptinfect_GameInstance.prototype.gameStarted= nil;
__deceptinfect_GameInstance.prototype.baseInfection= nil;
__deceptinfect_GameInstance.prototype.start = function(self) 
  self:setTime();
  self:calcBaseInfection();
  local chargerSpawn = __deceptinfect_game_SpawnSystem.obj:getRandom();
  local ent = _G.ents.Create("di_charger");
  chargerSpawn:spawn(ent);
  local bat1 = _G.ents.Create("di_battery");
  local bat2 = _G.ents.Create("di_battery");
  local spawns = chargerSpawn:getRandomSpawns(2);
  __haxe_Log.trace(spawns.length, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=38,className="deceptinfect.GameInstance",methodName="start"}));
  __haxe_Log.trace(spawns[1].claimed, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=39,className="deceptinfect.GameInstance",methodName="start"}));
  spawns[0]:spawn(bat1);
  spawns[1]:spawn(bat2);
  local nestSpawn = __deceptinfect_game_SpawnSystem.nest:getRandom();
  local nest = _G.ents.Create("di_nest");
  nestSpawn:spawn(nest);
  local evacZone = _G.ents.Create("di_evac_zone");
  local evacZoneSpawn = __deceptinfect_game_SpawnSystem.evac:getRandom();
  evacZoneSpawn:spawn(evacZone);
end
__deceptinfect_GameInstance.prototype.think = function(self) 
  self.baseInfection[0] = self:calcBaseInfection();
end
__deceptinfect_GameInstance.prototype.calcBaseInfection = function(self) 
  local baseInf = (100 / self.totalGameTime) * __deceptinfect_GameManager.diffTime;
  do return baseInf end
end
__deceptinfect_GameInstance.prototype.setTime = function(self) 
  local time = __deceptinfect_GameValues.GAME_TIMER;
  local variance = __deceptinfect_GameValues.GAME_TIMER_VARIANCE;
  self.totalGameTime = time + _G.math.random(-variance, variance);
  self.gameStarted = _G.CurTime();
  __haxe_Log.trace("", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=66,className="deceptinfect.GameInstance",methodName="setTime"}));
  __haxe_Log.trace(Std.string("Time until infection: ") .. Std.string(self.totalGameTime), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameInstance.hx",lineNumber=67,className="deceptinfect.GameInstance",methodName="setTime"}));
end

__deceptinfect_GameInstance.prototype.__class__ =  __deceptinfect_GameInstance

__enumExtractor_EnumExtractor.new = {}
_hxClasses["enumExtractor.EnumExtractor"] = __enumExtractor_EnumExtractor
__enumExtractor_EnumExtractor.__name__ = "enumExtractor.EnumExtractor"
_hxClasses["deceptinfect.GAME_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WAIT","SETTING_UP","PLAYING","ENDING"},4)}
__deceptinfect_GAME_STATE = _hxClasses["deceptinfect.GAME_STATE"];
__deceptinfect_GAME_STATE.WAIT = _hx_tab_array({[0]="WAIT",0,__enum__ = __deceptinfect_GAME_STATE},2)

__deceptinfect_GAME_STATE.SETTING_UP = function(x,time) local _x = _hx_tab_array({[0]="SETTING_UP",1,x,time,__enum__=__deceptinfect_GAME_STATE}, 4); return _x; end 
__deceptinfect_GAME_STATE.PLAYING = function(x) local _x = _hx_tab_array({[0]="PLAYING",2,x,__enum__=__deceptinfect_GAME_STATE}, 3); return _x; end 
__deceptinfect_GAME_STATE.ENDING = function(x,time) local _x = _hx_tab_array({[0]="ENDING",3,x,time,__enum__=__deceptinfect_GAME_STATE}, 4); return _x; end 

__tink_core_Disposable.new = {}
_hxClasses["tink.core.Disposable"] = __tink_core_Disposable
__tink_core_Disposable.__name__ = "tink.core.Disposable"

__tink_core_OwnedDisposable.new = {}
_hxClasses["tink.core.OwnedDisposable"] = __tink_core_OwnedDisposable
__tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable"
__tink_core_OwnedDisposable.__interfaces__ = {__tink_core_Disposable}

__tink_core__Signal_SignalObject.new = {}
_hxClasses["tink.core._Signal.SignalObject"] = __tink_core__Signal_SignalObject
__tink_core__Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject"
__tink_core__Signal_SignalObject.__interfaces__ = {__tink_core_Disposable}
__tink_core__Signal_SignalObject.prototype = _hx_e();
__tink_core__Signal_SignalObject.prototype.listen= nil;

__tink_core__Signal_SignalObject.prototype.__class__ =  __tink_core__Signal_SignalObject

__tink_core_SignalTrigger.new = function() 
  local self = _hx_new(__tink_core_SignalTrigger.prototype)
  __tink_core_SignalTrigger.super(self)
  return self
end
__tink_core_SignalTrigger.super = function(self) 
  self.handlers = __tink_core_CallbackList.new();
end
_hxClasses["tink.core.SignalTrigger"] = __tink_core_SignalTrigger
__tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger"
__tink_core_SignalTrigger.__interfaces__ = {__tink_core_OwnedDisposable,__tink_core__Signal_SignalObject}
__tink_core_SignalTrigger.prototype = _hx_e();
__tink_core_SignalTrigger.prototype.handlers= nil;
__tink_core_SignalTrigger.prototype.listen = function(self,cb) 
  local _this = self.handlers;
  if (_this.disposeHandlers == nil) then 
    do return nil end;
  else
    local node = __tink_core__Callback_ListCell.new(cb, _this);
    _this.cells:push(node);
    local tmp = (function() 
    local _hx_obj = _this;
    local _hx_fld = 'used';
    local _ = _hx_obj[_hx_fld];
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _;
     end)() == 0;
    if (tmp) then 
      local fn = _this.onfill;
      if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
        fn();
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
      else
        __tink_core__Callback_Callback_Impl_.defer(fn);
      end;
    end;
    do return node end;
  end;
end

__tink_core_SignalTrigger.prototype.__class__ =  __tink_core_SignalTrigger

__deceptinfect_GameManager.new = {}
_hxClasses["deceptinfect.GameManager"] = __deceptinfect_GameManager
__deceptinfect_GameManager.__name__ = "deceptinfect.GameManager"
__deceptinfect_GameManager.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_GameManager.shouldAllowRespawn = function() 
  local tmp = __deceptinfect_GameManager.state[1];
  if (tmp) == 0 then 
    do return true end;
  elseif (tmp) == 1 then 
    do return true end;else
  do return false end; end;
end
__deceptinfect_GameManager.initPlayer = function(ply) 
  local p = ply.id;
  local infcomp = __deceptinfect_infection_InfectionComponent.new();
  local spec = __deceptinfect_infection_components_SpectateComponent.new();
  local rate = __deceptinfect_infection_RateComponent.new();
  local vic = __deceptinfect_radiation_RadVictim.new();
  local contam = __deceptinfect_radiation_ContaminationAccepter.new();
  local health = __deceptinfect_infection_components_HiddenHealthComponent.new();
  local grabaccept = __deceptinfect_infection_components_GrabAccepter.new();
  local radaccept = __deceptinfect_radiation_RadiationAccepter.new(_hx_e());
  local virpos = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(ply));
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[24], p, infcomp);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = infcomp;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[7], p, spec);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = spec;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[20], p, rate);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = rate;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[8], p, health);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = health;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[9], p, grabaccept);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = grabaccept;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[10], p, radaccept);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = radaccept;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[31], p, virpos);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = virpos;
  _this.h[key] = p;
  _this.k[key] = true;
  local x = __deceptinfect_game_components_AliveComponent.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[25], p, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[15], p, vic);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = vic;
  _this.h[key] = p;
  _this.k[key] = true;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[11], p, contam);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = contam;
  _this.h[key] = p;
  _this.k[key] = true;
end
__deceptinfect_GameManager.thinkWait = function() 
  _G.player.GetCount();
end
__deceptinfect_GameManager.think = function() 
  local _g = __deceptinfect_GameManager.state;
  local tmp = _g[1];
  if (tmp) == 0 then 
    __deceptinfect_GameManager.thinkWait();
  elseif (tmp) == 1 then 
    local x = _g[2];
    local time = _g[3];
    if (_G.CurTime() > time) then 
      __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.PLAYING(x));
    end;
  elseif (tmp) == 2 then 
    local x = _g[2];
    x:think();
  elseif (tmp) == 3 then 
    local x = _g[2];
    local time = _g[3];
    if (_G.CurTime() > time) then 
      __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.WAIT);
    end; end;
  if (__deceptinfect_GameManager.diffTime == nil) then 
    __deceptinfect_GameManager.diffTime = 0.0;
  else
    __deceptinfect_GameManager.diffTime = _G.CurTime() - __deceptinfect_GameManager.lastTick;
  end;
  __deceptinfect_GameManager.lastTick = _G.CurTime();
end
__deceptinfect_GameManager.set_state = function(x) 
  local time = 0.0;
  local tmp = __deceptinfect_GameManager.state[1];
  if (tmp) == 0 then 
    local tmp = x[1];
    if (tmp) == 1 then 
      time = x[3];
    elseif (tmp) == 2 then 
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();else
    _G.error(__haxe_Exception.thrown("Unsupported state transition"),0); end;
  elseif (tmp) == 1 then 
    if (x[1] == 2) then 
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();
    else
      _G.error(__haxe_Exception.thrown("Unsupported state transition"),0);
    end;
  elseif (tmp) == 2 then 
    local tmp = x[1];
    if (tmp) == 2 then 
      __deceptinfect_GameManager.cleanup();
      __deceptinfect_GameManager.initAllPlayers();
      x[2]:start();
      __deceptinfect_GameManager.hookWin();
    elseif (tmp) == 3 then 
      time = x[3];else
    _G.error(__haxe_Exception.thrown("Unsupported state transition"),0); end;
  elseif (tmp) == 3 then 
    if (x[1] == 0) then 
      __deceptinfect_GameManager.stateTrig.handlers:invoke(x);
      __deceptinfect_GameManager.cleanup();
    else
      _G.error(__haxe_Exception.thrown("Unsupported state transition"),0);
    end; end;
  local x1 = _G.player.GetAll();
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x1);
  local p_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = p_lnext(x1, _hx_1_p_index);
  local p_nextV = _hx_2_init_value;
  local p_i = _hx_2_init_index;
  while (p_nextV ~= nil) do 
    local v = p_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = p_lnext(x1, p_i);
    p_i = _hx_3_nextResult_index;
    p_nextV = _hx_3_nextResult_value;
    __deceptinfect_GameManager.net_gamestate:send(_hx_o({__fields__={state=true,time=true},state=__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.fromGAME_STATE(x),time=time}), v);
  end;
  __haxe_Log.trace(Std.string("set state... ") .. Std.string(Std.string(x)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=177,className="deceptinfect.GameManager",methodName="set_state"}));
  __deceptinfect_GameManager.stateTrig.handlers:invoke(x);
  __deceptinfect_GameManager.state = x do return __deceptinfect_GameManager.state end;
end
__deceptinfect_GameManager.cleanup = function() 
  __deceptinfect_GameManager.net_cleanup:broadcast(_hx_e());
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 14;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 34;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        _g1[2].entity:Remove();
      end;
    end;
    local id = 40;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] ~= 1) then 
      __deceptinfect_ecswip_ComponentManager.removeEntity(ent);
    end;
  end;
  __deceptinfect_GameManager.stateTrig.handlers:clear();
  __deceptinfect_ecswip_SystemManager.destroySystems();
  __deceptinfect_ecswip_SystemManager.initAllSystems();
  local x = _G.ents.GetAll();
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x);
  local ent_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = ent_lnext(x, _hx_1_p_index);
  local ent_nextV = _hx_2_init_value;
  local ent_i = _hx_2_init_index;
  while (ent_nextV ~= nil) do 
    local v = ent_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = ent_lnext(x, ent_i);
    ent_i = _hx_3_nextResult_index;
    ent_nextV = _hx_3_nextResult_value;
    local _g = v:GetClass();
    if (_g) == "di_battery" or (_g) == "di_charger" or (_g) == "di_evac_zone" or (_g) == "di_flare" or (_g) == "di_nest" then 
      __haxe_Log.trace("removing entiti", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=205,className="deceptinfect.GameManager",methodName="cleanup"}));
      v:Remove();else end;
  end;
  local x = _G.player.GetAll();
  local _hx_4_p_next, _hx_4_p_table, _hx_4_p_index = _G.ipairs(x);
  local p_lnext = _hx_4_p_next;
  local _hx_5_init_index, _hx_5_init_value = p_lnext(x, _hx_4_p_index);
  local p_nextV = _hx_5_init_value;
  local p_i = _hx_5_init_index;
  while (p_nextV ~= nil) do 
    local v = p_nextV;
    local _hx_6_nextResult_index, _hx_6_nextResult_value = p_lnext(x, p_i);
    p_i = _hx_6_nextResult_index;
    p_nextV = _hx_6_nextResult_value;
    local x = __deceptinfect_ecswip_PlayerComponent.new(v);
    local this1 = x.player;
    x.player.id = __deceptinfect_ecswip_ComponentManager.addPlayer(this1);
    v:KillSilent();
    v:Spawn();
  end;
end
_hx_exports["cleanup"] = __deceptinfect_GameManager.cleanup
__deceptinfect_GameManager.hookWin = function() 
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).newWinner:listen(__deceptinfect_GameManager.newWin);
end
__deceptinfect_GameManager.newWin = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    __haxe_Log.trace("Humans win", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=225,className="deceptinfect.GameManager",methodName="newWin"}));
  elseif (tmp) == 1 then 
    __haxe_Log.trace("Infected win", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=227,className="deceptinfect.GameManager",methodName="newWin"}));
  elseif (tmp) == 2 then 
    __haxe_Log.trace("Draw. Boring...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/GameManager.hx",lineNumber=229,className="deceptinfect.GameManager",methodName="newWin"})); end;
  __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.ENDING(__deceptinfect_GameManager.state:slice(2)[0], _G.CurTime() + 10));
end
__deceptinfect_GameManager.initInfectedPlayer = function(x) 
  local x1 = __deceptinfect_infection_InfectedComponent.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[30], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  local x1 = __deceptinfect_infection_components_GrabProducer.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[12], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  local x1 = __deceptinfect_infection_components_HiddenHealthComponent.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[8], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  local x1 = __deceptinfect_abilities_FormComponent.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[23], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  local x1 = __deceptinfect_infection_components_DamagePenaltyHidden.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[13], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  local x1 = __deceptinfect_infection_InfectionLookInfo.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[6], x, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = x;
  _this.k[key] = true;
  __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(24, x);
  local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, x);
  c_accept.grabState = __deceptinfect_infection_components_GrabAcceptState.UNAVALIABLE(__deceptinfect_util_Cooldown.UNAVALIABLE);
  local rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(3, x);
  local x = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(__deceptinfect_ecswip_ComponentManager.getComponentForIDSure(34, x).entity));
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[31], rad, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = rad;
  _this.k[key] = true;
end
__deceptinfect_GameManager.initAllPlayers = function() 
  local choose = _G.math.random(1, _G.player.GetCount());
  local table = _G.player.GetAll();
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.pairs(table);
  local _g_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = _g_lnext(table, _hx_1_p_index);
  local _g_nextV = _hx_2_init_value;
  local _g_nextI = _hx_2_init_index;
  while (_g_nextV ~= nil) do 
    local v = _g_nextV;
    local i = _g_nextI;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = _g_lnext(table, _g_nextI);
    _g_nextI = _hx_3_nextResult_index;
    _g_nextV = _hx_3_nextResult_value;
    __deceptinfect_GameManager.initPlayer(v);
    if (i == choose) then 
      __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_infection_systems_InfectionSystem):makeInfected(v.id);
    end;
    v:Give(__deceptinfect_Misc.startingWeapons[0]);
    __deceptinfect_util_PlayerExt.giveFullAmmo(v);
    v:Spawn();
  end;
end
__deceptinfect_GameManager.startGame = function(skipintro) 
  if (skipintro == nil) then 
    skipintro = false;
  end;
  local game = __deceptinfect_GameInstance.new();
  if (skipintro) then 
    __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.PLAYING(game));
  else
    __deceptinfect_GameManager.set_state(__deceptinfect_GAME_STATE.SETTING_UP(game, _G.CurTime() + __deceptinfect_GameValues.SETUP_TIME));
  end;
end
_hx_exports["startGame"] = __deceptinfect_GameManager.startGame
__deceptinfect_GameManager.init = function() 
  __deceptinfect_GameManager.stateChange = __deceptinfect_GameManager.stateTrig;
end

__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.new = {}
_hxClasses["deceptinfect._GameManager.Net_GAME_STATE_VAL_Impl_"] = __deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.__name__ = "deceptinfect._GameManager.Net_GAME_STATE_VAL_Impl_"
__deceptinfect__GameManager_Net_GAME_STATE_VAL_Impl_.fromGAME_STATE = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    do return 1 end;
  elseif (tmp) == 2 then 
    do return 2 end;
  elseif (tmp) == 3 then 
    do return 3 end; end;
end

__deceptinfect_GameValues.new = {}
_hx_exports["GameValues"] = __deceptinfect_GameValues
_hxClasses["deceptinfect.GameValues"] = __deceptinfect_GameValues
__deceptinfect_GameValues.__name__ = "deceptinfect.GameValues"

__deceptinfect_MapStorage.new = {}
_hxClasses["deceptinfect.MapStorage"] = __deceptinfect_MapStorage
__deceptinfect_MapStorage.__name__ = "deceptinfect.MapStorage"
_hxClasses["deceptinfect.ModelType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ZOMBIE","HUMAN_MALE"},2)}
__deceptinfect_ModelType = _hxClasses["deceptinfect.ModelType"];
__deceptinfect_ModelType.ZOMBIE = _hx_tab_array({[0]="ZOMBIE",0,__enum__ = __deceptinfect_ModelType},2)

__deceptinfect_ModelType.HUMAN_MALE = _hx_tab_array({[0]="HUMAN_MALE",1,__enum__ = __deceptinfect_ModelType},2)


__deceptinfect_Misc.new = {}
_hxClasses["deceptinfect.Misc"] = __deceptinfect_Misc
__deceptinfect_Misc.__name__ = "deceptinfect.Misc"

__deceptinfect_PlayerManager.new = {}
_hxClasses["deceptinfect.PlayerManager"] = __deceptinfect_PlayerManager
__deceptinfect_PlayerManager.__name__ = "deceptinfect.PlayerManager"
__deceptinfect_PlayerManager.addID = function(ent,id) 
  local this1 = __deceptinfect_PlayerManager.indexLookup;
  local key = ent:EntIndex();
  local _this = this1;
  if (id == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = id;
  end;
end
_hxClasses["deceptinfect.ProfilingState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_PROFILING","PROFILING","PROFILE_FINISHED"},3)}
__deceptinfect_ProfilingState = _hxClasses["deceptinfect.ProfilingState"];
__deceptinfect_ProfilingState.NOT_PROFILING = _hx_tab_array({[0]="NOT_PROFILING",0,__enum__ = __deceptinfect_ProfilingState},2)

__deceptinfect_ProfilingState.PROFILING = _hx_tab_array({[0]="PROFILING",1,__enum__ = __deceptinfect_ProfilingState},2)

__deceptinfect_ProfilingState.PROFILE_FINISHED = _hx_tab_array({[0]="PROFILE_FINISHED",2,__enum__ = __deceptinfect_ProfilingState},2)


__deceptinfect_Profiler.new = {}
_hxClasses["deceptinfect.Profiler"] = __deceptinfect_Profiler
__deceptinfect_Profiler.__name__ = "deceptinfect.Profiler"
__deceptinfect_Profiler.beginProfiling = function() 
  __deceptinfect_Profiler.pass = 0;
  __deceptinfect_Profiler.totalProfileTime = _G.SysTime();
  __deceptinfect_Profiler.cumulativeTime = 0.0;
  __deceptinfect_Profiler.profileState = __deceptinfect_ProfilingState.PROFILING;
end
__deceptinfect_Profiler.report = function() 
  if (__deceptinfect_Profiler.profileState ~= __deceptinfect_ProfilingState.PROFILE_FINISHED) then 
    do return end;
  end;
  local total = __haxe_ds_StringMap.new();
  __haxe_Log.trace("report", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Profiler.hx",lineNumber=35,className="deceptinfect.Profiler",methodName="report"}));
  local _g = 0;
  local _g1 = __deceptinfect_Profiler.vinal;
  while (_g < _g1.length) do 
    local pass = _g1[_g];
    _g = _g + 1;
    local map = pass;
    local _g_keys = map:keys();
    while (_g_keys:hasNext()) do 
      local key = _g_keys:next();
      local _g1_value = map:get(key);
      local ret = total.h[key];
      if (ret == __haxe_ds_StringMap.tnull) then 
        ret = nil;
      end;
      local value = ret;
      local value = (function() 
        local _hx_1
        if (value == nil) then 
        _hx_1 = 0.0; else 
        _hx_1 = value; end
        return _hx_1
      end )() + _g1_value;
      if (value == nil) then 
        total.h[key] = __haxe_ds_StringMap.tnull;
      else
        total.h[key] = value;
      end;
    end;
  end;
  local map = total;
  local _g2_keys = map:keys();
  while (_g2_keys:hasNext()) do 
    local key = _g2_keys:next();
    local _g3_value = map:get(key);
    __haxe_Log.trace(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("total ") .. Std.string(key)) .. Std.string(" : ")) .. Std.string(_g3_value)) .. Std.string(" | avg: ")) .. Std.string(_g3_value / __deceptinfect_Profiler.pass)) .. Std.string(" | prcnt: ")) .. Std.string((_g3_value / __deceptinfect_Profiler.cumulativeTime) * 100), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Profiler.hx",lineNumber=42,className="deceptinfect.Profiler",methodName="report"}));
  end;
  __haxe_Log.trace(Std.string(Std.string(Std.string("Cumulative time ") .. Std.string(__deceptinfect_Profiler.cumulativeTime)) .. Std.string(" / Total time ")) .. Std.string(__deceptinfect_Profiler.totalProfileTime), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Profiler.hx",lineNumber=44,className="deceptinfect.Profiler",methodName="report"}));
  local percent = _G.math.Round((__deceptinfect_Profiler.cumulativeTime / __deceptinfect_Profiler.totalProfileTime) * 100, 3);
  __haxe_Log.trace(Std.string("Overall runtime impact ") .. Std.string(percent), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/Profiler.hx",lineNumber=46,className="deceptinfect.Profiler",methodName="report"}));
  __deceptinfect_Profiler.profileState = __deceptinfect_ProfilingState.NOT_PROFILING;
end
__deceptinfect_Profiler.profile = function(zone,first) 
  if (first == nil) then 
    first = false;
  end;
  if (__deceptinfect_Profiler.profileState ~= __deceptinfect_ProfilingState.PROFILING) then 
    do return end;
  end;
  if (not first) then 
    __deceptinfect_Profiler.profileend();
  end;
  if (__deceptinfect_Profiler.inital[__deceptinfect_Profiler.pass] == nil) then 
    __deceptinfect_Profiler.inital[__deceptinfect_Profiler.pass] = __haxe_ds_StringMap.new();
    __deceptinfect_Profiler.vinal[__deceptinfect_Profiler.pass] = __haxe_ds_StringMap.new();
  end;
  local this1 = __deceptinfect_Profiler.inital[__deceptinfect_Profiler.pass];
  local value = _G.SysTime();
  local _this = this1;
  if (value == nil) then 
    _this.h[zone] = __haxe_ds_StringMap.tnull;
  else
    _this.h[zone] = value;
  end;
  __deceptinfect_Profiler.lastname = zone;
end
__deceptinfect_Profiler.profileend = function() 
  if (__deceptinfect_Profiler.profileState ~= __deceptinfect_ProfilingState.PROFILING) then 
    do return end;
  end;
  local diff = _G.SysTime();
  local ret = __deceptinfect_Profiler.inital[__deceptinfect_Profiler.pass].h[__deceptinfect_Profiler.lastname];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  local diff = diff - ret;
  local key = __deceptinfect_Profiler.lastname;
  local _this = __deceptinfect_Profiler.vinal[__deceptinfect_Profiler.pass];
  if (diff == nil) then 
    _this.h[key] = __haxe_ds_StringMap.tnull;
  else
    _this.h[key] = diff;
  end;
  __deceptinfect_Profiler.cumulativeTime = __deceptinfect_Profiler.cumulativeTime + diff;
end
__deceptinfect_Profiler.resetprofile = function() 
  if (__deceptinfect_Profiler.profileState ~= __deceptinfect_ProfilingState.PROFILING) then 
    do return end;
  end;
  __deceptinfect_Profiler.profileend();
  if (__deceptinfect_Profiler.pass > __deceptinfect_Profiler.totalPasses) then 
    __deceptinfect_Profiler.totalProfileTime = _G.SysTime() - __deceptinfect_Profiler.totalProfileTime;
    __deceptinfect_Profiler.profileState = __deceptinfect_ProfilingState.PROFILE_FINISHED;
  end;
  __deceptinfect_Profiler.pass = __deceptinfect_Profiler.pass + 1;
end

__hxbit_Serializable.new = {}
_hxClasses["hxbit.Serializable"] = __hxbit_Serializable
__hxbit_Serializable.__name__ = "hxbit.Serializable"
__hxbit_Serializable.prototype = _hx_e();
__hxbit_Serializable.prototype.__uid= nil;
__hxbit_Serializable.prototype.getCLID= nil;
__hxbit_Serializable.prototype.serialize= nil;

__hxbit_Serializable.prototype.__class__ =  __hxbit_Serializable

__hxbit_Serializer.new = function() 
  local self = _hx_new(__hxbit_Serializer.prototype)
  __hxbit_Serializer.super(self)
  return self
end
__hxbit_Serializer.super = function(self) 
  self.usedClasses = _hx_tab_array({}, 0);
  if (__hxbit_Serializer.CLIDS == nil) then 
    __hxbit_Serializer.initClassIDS();
  end;
end
_hxClasses["hxbit.Serializer"] = __hxbit_Serializer
__hxbit_Serializer.__name__ = "hxbit.Serializer"
__hxbit_Serializer.registerClass = function(c) 
  if (__hxbit_Serializer.CLIDS ~= nil) then 
    _G.error(__haxe_Exception.thrown("Too late to register class"),0);
  end;
  local idx = __hxbit_Serializer.CLASSES.length;
  __hxbit_Serializer.CLASSES:push(c);
  do return idx end;
end
__hxbit_Serializer.initClassIDS = function() 
  local cl = __hxbit_Serializer.CLASSES;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < cl.length) do 
    _g1 = _g1 + 1;
    _g:push(_hx_tab_array({}, 0));
  end;
  local subClasses = _g;
  local isSub = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = cl.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local c = cl[i];
    while (true) do 
      c = Type.getSuperClass(c);
      if (c == nil) then 
        break;
      end;
      local idx = cl:indexOf(c);
      if (idx < 0) then 
        break;
      end;
      subClasses[idx]:push(i);
      isSub[i] = true;
    end;
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = __hxbit_Serializer.CLASSES.length;
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    if ((subClasses[i].length == 0) and not isSub[i]) then 
      _g:push(0);
    else
      local name = cl[i].__name__;
      local v = 1;
      local _g1 = 0;
      local _g2 = #name;
      while (_g1 < _g2) do 
        _g1 = _g1 + 1;
        local i = _g1 - 1;
        v = Std.int((v * 223) + _G.string.byte(name, i + 1));
      end;
      v = 1 + (_G.math.fmod((_hx_bit.band(v,1073741823)), 65423));
      _g:push(v);
    end;
  end;
  __hxbit_Serializer.CLIDS = _g;
  __hxbit_Serializer.CL_BYID = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = __hxbit_Serializer.CLIDS.length;
  local _hx_continue_1 = false;
  while (_g < _g1) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local cid = __hxbit_Serializer.CLIDS[i];
    if (cid == 0) then 
      break;
    end;
    if (__hxbit_Serializer.CL_BYID[cid] ~= nil) then 
      local c = __hxbit_Serializer.CL_BYID[cid];
      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Conflicting CLID between ") .. Std.string(c.__name__)) .. Std.string(" and ")) .. Std.string(cl[i].__name__)),0);
    end;
    __hxbit_Serializer.CL_BYID[cid] = cl[i];until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
__hxbit_Serializer.isClassFinal = function(index) 
  do return __hxbit_Serializer.CLIDS[index] == 0 end;
end
__hxbit_Serializer.prototype = _hx_e();
__hxbit_Serializer.prototype.refs= nil;
__hxbit_Serializer.prototype.remapObjs= nil;
__hxbit_Serializer.prototype.out= nil;
__hxbit_Serializer.prototype.input= nil;
__hxbit_Serializer.prototype.inPos= nil;
__hxbit_Serializer.prototype.usedClasses= nil;
__hxbit_Serializer.prototype.knownStructs= nil;
__hxbit_Serializer.prototype.remap = function(self,s) 
  if (self.remapObjs.k[s] ~= nil) then 
    do return end;
  end;
  local _this = self.remapObjs;
  _this.h[s] = s.__uid;
  _this.k[s] = true;
  s.__uid = _hx_bit.bor(_hx_bit.lshift(__hxbit_Serializer.SEQ,24),(function() 
  local _hx_obj = __hxbit_Serializer;
  local _hx_fld = 'UID';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
end
__hxbit_Serializer.prototype.begin = function(self) 
  self.out = __haxe_io_BytesBuffer.new();
  self.refs = __haxe_ds_IntMap.new();
  self.knownStructs = _hx_tab_array({}, 0);
end
__hxbit_Serializer.prototype.serialize = function(self,s) 
  self:begin();
  self:addKnownRef(s);
  do return self.out:getBytes() end
end
__hxbit_Serializer.prototype.addObjRef = function(self,s) 
  local v = s.__uid;
  if ((v >= 0) and (v < 128)) then 
    self.out.b:push(v);
  else
    self.out.b:push(128);
    self.out:addInt32(v);
  end;
end
__hxbit_Serializer.prototype.addKnownRef = function(self,s) 
  if (s == nil) then 
    self.out.b:push(0);
    do return end;
  end;
  if (self.remapObjs ~= nil) then 
    self:remap(s);
  end;
  self:addObjRef(s);
  local ret = self.refs.h[s.__uid];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  if (ret ~= nil) then 
    do return end;
  end;
  local k = s.__uid;
  local _this = self.refs;
  if (s == nil) then 
    _this.h[k] = __haxe_ds_IntMap.tnull;
  else
    _this.h[k] = s;
  end;
  local index = s:getCLID();
  self.usedClasses[index] = true;
  local clid = __hxbit_Serializer.CLIDS[index];
  if (clid ~= 0) then 
    self.out.b:push(_hx_bit.arshift(clid,8));
    self.out.b:push(_hx_bit.band(clid,255));
  end;
  s:serialize(self);
end

__hxbit_Serializer.prototype.__class__ =  __hxbit_Serializer

__deceptinfect_NetSpread.new = function(endpoints) 
  local self = _hx_new(__deceptinfect_NetSpread.prototype)
  __deceptinfect_NetSpread.super(self,endpoints)
  return self
end
__deceptinfect_NetSpread.super = function(self,endpoints) 
  self.__uid = _hx_bit.bor(_hx_bit.lshift(__hxbit_Serializer.SEQ,24),(function() 
  local _hx_obj = __hxbit_Serializer;
  local _hx_fld = 'UID';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
  self.endpoints = _hx_tab_array({}, 0);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < endpoints.length) do 
    local i = endpoints[_g1];
    _g1 = _g1 + 1;
    _g:push(_hx_o({__fields__={southwest=true,northeast=true},southwest=__gmod_helpers_net__NVector_NVector_Impl_.from(i.southwest),northeast=__gmod_helpers_net__NVector_NVector_Impl_.from(i.northeast)}));
  end;
  self.endpoints = _g;
end
_hxClasses["deceptinfect.NetSpread"] = __deceptinfect_NetSpread
__deceptinfect_NetSpread.__name__ = "deceptinfect.NetSpread"
__deceptinfect_NetSpread.__interfaces__ = {__hxbit_Serializable}
__deceptinfect_NetSpread.prototype = _hx_e();
__deceptinfect_NetSpread.prototype.endpoints= nil;
__deceptinfect_NetSpread.prototype.__uid= nil;
__deceptinfect_NetSpread.prototype.getCLID = function(self) 
  do return __deceptinfect_NetSpread.__clid end
end
__deceptinfect_NetSpread.prototype.serialize = function(self,__ctx) 
  local a = self.endpoints;
  if (a == nil) then 
    __ctx.out.b:push(0);
  else
    local v = a.length + 1;
    if ((v >= 0) and (v < 128)) then 
      __ctx.out.b:push(v);
    else
      __ctx.out.b:push(128);
      __ctx.out:addInt32(v);
    end;
    local _g = 0;
    while (_g < a.length) do 
      local v = a[_g];
      _g = _g + 1;
      if (v == nil) then 
        __ctx.out.b:push(0);
      else
        local fbits = 0;
        if (v.northeast ~= nil) then 
          fbits = 1;
        end;
        if (v.southwest ~= nil) then 
          fbits = _hx_bit.bor(fbits,2);
        end;
        local v1 = fbits + 1;
        if ((v1 >= 0) and (v1 < 128)) then 
          __ctx.out.b:push(v1);
        else
          __ctx.out.b:push(128);
          __ctx.out:addInt32(v1);
        end;
        if ((_hx_bit.band(fbits,1)) ~= 0) then 
          local a = v.northeast;
          if (a == nil) then 
            __ctx.out.b:push(0);
          else
            local v = a.length + 1;
            if ((v >= 0) and (v < 128)) then 
              __ctx.out.b:push(v);
            else
              __ctx.out.b:push(128);
              __ctx.out:addInt32(v);
            end;
            local _g = 0;
            while (_g < a.length) do 
              local v = a[_g];
              _g = _g + 1;
              __ctx.out:addInt32(__haxe_io_FPHelper.floatToI32(v));
            end;
          end;
        end;
        if ((_hx_bit.band(fbits,2)) ~= 0) then 
          local a = v.southwest;
          if (a == nil) then 
            __ctx.out.b:push(0);
          else
            local v = a.length + 1;
            if ((v >= 0) and (v < 128)) then 
              __ctx.out.b:push(v);
            else
              __ctx.out.b:push(128);
              __ctx.out:addInt32(v);
            end;
            local _g = 0;
            while (_g < a.length) do 
              local v = a[_g];
              _g = _g + 1;
              __ctx.out:addInt32(__haxe_io_FPHelper.floatToI32(v));
            end;
          end;
        end;
      end;
    end;
  end;
end

__deceptinfect_NetSpread.prototype.__class__ =  __deceptinfect_NetSpread

__deceptinfect_Spread.new = {}
_hxClasses["deceptinfect.Spread"] = __deceptinfect_Spread
__deceptinfect_Spread.__name__ = "deceptinfect.Spread"
__deceptinfect_Spread.beginSpread = function(x,tPercent) 
  __deceptinfect_Spread.markedMap = __haxe_ds_IntMap.new();
  __deceptinfect_Spread.marked = _hx_tab_array({}, 0);
  __deceptinfect_Spread.endpoints = _hx_tab_array({}, 0);
  __deceptinfect_Spread.mapSize = 0;
  local _g_que = __haxe_ds_List.new();
  local _this_h = ({});
  _g_que:add(x);
  while (not _g_que:isEmpty()) do 
    local next = _g_que:pop();
    local x = next:GetAdjacentAreas();
    local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x);
    local adjacent_lnext = _hx_1_p_next;
    local _hx_2_init_index, _hx_2_init_value = adjacent_lnext(x, _hx_1_p_index);
    local adjacent_nextV = _hx_2_init_value;
    local adjacent_i = _hx_2_init_index;
    while (adjacent_nextV ~= nil) do 
      local v = adjacent_nextV;
      local _hx_3_nextResult_index, _hx_3_nextResult_value = adjacent_lnext(x, adjacent_i);
      adjacent_i = _hx_3_nextResult_index;
      adjacent_nextV = _hx_3_nextResult_value;
      if (_this_h[v:GetID()] == nil) then 
        _g_que:add(v);
        _this_h[v:GetID()] = true;
      end;
    end;
    __deceptinfect_Spread.mapSize = __deceptinfect_Spread.mapSize + (next:GetSizeX() * next:GetSizeY());
  end;
  local target = tPercent * __deceptinfect_Spread.mapSize;
  local curSize = .0;
  local _g1_que = __haxe_ds_List.new();
  local _this_h = ({});
  _g1_que:add(x);
  while (not _g1_que:isEmpty()) do 
    local next = _g1_que:pop();
    local x = next:GetAdjacentAreas();
    local _hx_4_p_next, _hx_4_p_table, _hx_4_p_index = _G.ipairs(x);
    local adjacent_lnext = _hx_4_p_next;
    local _hx_5_init_index, _hx_5_init_value = adjacent_lnext(x, _hx_4_p_index);
    local adjacent_nextV = _hx_5_init_value;
    local adjacent_i = _hx_5_init_index;
    while (adjacent_nextV ~= nil) do 
      local v = adjacent_nextV;
      local _hx_6_nextResult_index, _hx_6_nextResult_value = adjacent_lnext(x, adjacent_i);
      adjacent_i = _hx_6_nextResult_index;
      adjacent_nextV = _hx_6_nextResult_value;
      if (_this_h[v:GetID()] == nil) then 
        _g1_que:add(v);
        _this_h[v:GetID()] = true;
      end;
    end;
    curSize = curSize + (next:GetSizeX() * next:GetSizeY());
    __deceptinfect_Spread.marked:push(next);
    local this1 = __deceptinfect_Spread.markedMap;
    local key = next:GetID();
    local _this = this1;
    _this.h[key] = true;
    if (curSize > target) then 
      break;
    end;
  end;
  local _g = 0;
  local _g1 = __deceptinfect_Spread.marked;
  while (_g < _g1.length) do 
    local mark = _g1[_g];
    _g = _g + 1;
    local x = mark:GetAdjacentAreas();
    local _hx_7_p_next, _hx_7_p_table, _hx_7_p_index = _G.ipairs(x);
    local adjacent_lnext = _hx_7_p_next;
    local _hx_8_init_index, _hx_8_init_value = adjacent_lnext(x, _hx_7_p_index);
    local adjacent_nextV = _hx_8_init_value;
    local adjacent_i = _hx_8_init_index;
    while (adjacent_nextV ~= nil) do 
      local v = adjacent_nextV;
      local _hx_9_nextResult_index, _hx_9_nextResult_value = adjacent_lnext(x, adjacent_i);
      adjacent_i = _hx_9_nextResult_index;
      adjacent_nextV = _hx_9_nextResult_value;
      local this1 = __deceptinfect_Spread.markedMap;
      local key = v:GetID();
      if (this1.h[key] == nil) then 
        __deceptinfect_Spread.endpoints:push(mark);
      end;
    end;
  end;
  local _g = 0;
  local _g1 = __deceptinfect_Spread.endpoints;
  while (_g < _g1.length) do 
    local ep = _g1[_g];
    _g = _g + 1;
    local x = ep:GetAdjacentAreasAtSide(1);
    local _hx_10_p_next, _hx_10_p_table, _hx_10_p_index = _G.ipairs(x);
    local ep2_lnext = _hx_10_p_next;
    local _hx_11_init_index, _hx_11_init_value = ep2_lnext(x, _hx_10_p_index);
    local ep2_nextV = _hx_11_init_value;
    local ep2_i = _hx_11_init_index;
    while (ep2_nextV ~= nil) do 
      local v = ep2_nextV;
      local _hx_12_nextResult_index, _hx_12_nextResult_value = ep2_lnext(x, ep2_i);
      ep2_i = _hx_12_nextResult_index;
      ep2_nextV = _hx_12_nextResult_value;
      local this1 = __deceptinfect_Spread.markedMap;
      local key = v:GetID();
      if (this1.h[key] == nil) then 
        __deceptinfect_Spread.netSpread:broadcast(__deceptinfect_NetSpread.new(_hx_tab_array({[0]=_hx_o({__fields__={southwest=true,northeast=true},southwest=ep:GetCorner(2),northeast=ep:GetCorner(1)})}, 1)));
        break;
      end;
    end;
    local x = ep:GetAdjacentAreasAtSide(0);
    local _hx_13_p_next, _hx_13_p_table, _hx_13_p_index = _G.ipairs(x);
    local ep2_lnext = _hx_13_p_next;
    local _hx_14_init_index, _hx_14_init_value = ep2_lnext(x, _hx_13_p_index);
    local ep2_nextV = _hx_14_init_value;
    local ep2_i = _hx_14_init_index;
    while (ep2_nextV ~= nil) do 
      local v = ep2_nextV;
      local _hx_15_nextResult_index, _hx_15_nextResult_value = ep2_lnext(x, ep2_i);
      ep2_i = _hx_15_nextResult_index;
      ep2_nextV = _hx_15_nextResult_value;
      local this1 = __deceptinfect_Spread.markedMap;
      local key = v:GetID();
      if (this1.h[key] == nil) then 
        __deceptinfect_Spread.netSpread:broadcast(__deceptinfect_NetSpread.new(_hx_tab_array({[0]=_hx_o({__fields__={southwest=true,northeast=true},southwest=ep:GetCorner(0),northeast=ep:GetCorner(1)})}, 1)));
        break;
      end;
    end;
    local x = ep:GetAdjacentAreasAtSide(2);
    local _hx_16_p_next, _hx_16_p_table, _hx_16_p_index = _G.ipairs(x);
    local ep2_lnext = _hx_16_p_next;
    local _hx_17_init_index, _hx_17_init_value = ep2_lnext(x, _hx_16_p_index);
    local ep2_nextV = _hx_17_init_value;
    local ep2_i = _hx_17_init_index;
    while (ep2_nextV ~= nil) do 
      local v = ep2_nextV;
      local _hx_18_nextResult_index, _hx_18_nextResult_value = ep2_lnext(x, ep2_i);
      ep2_i = _hx_18_nextResult_index;
      ep2_nextV = _hx_18_nextResult_value;
      local this1 = __deceptinfect_Spread.markedMap;
      local key = v:GetID();
      if (this1.h[key] == nil) then 
        __deceptinfect_Spread.netSpread:broadcast(__deceptinfect_NetSpread.new(_hx_tab_array({[0]=_hx_o({__fields__={southwest=true,northeast=true},southwest=ep:GetCorner(3),northeast=ep:GetCorner(2)})}, 1)));
        break;
      end;
    end;
    local x = ep:GetAdjacentAreasAtSide(3);
    local _hx_19_p_next, _hx_19_p_table, _hx_19_p_index = _G.ipairs(x);
    local ep2_lnext = _hx_19_p_next;
    local _hx_20_init_index, _hx_20_init_value = ep2_lnext(x, _hx_19_p_index);
    local ep2_nextV = _hx_20_init_value;
    local ep2_i = _hx_20_init_index;
    while (ep2_nextV ~= nil) do 
      local v = ep2_nextV;
      local _hx_21_nextResult_index, _hx_21_nextResult_value = ep2_lnext(x, ep2_i);
      ep2_i = _hx_21_nextResult_index;
      ep2_nextV = _hx_21_nextResult_value;
      local this1 = __deceptinfect_Spread.markedMap;
      local key = v:GetID();
      if (this1.h[key] == nil) then 
        __deceptinfect_Spread.netSpread:broadcast(__deceptinfect_NetSpread.new(_hx_tab_array({[0]=_hx_o({__fields__={southwest=true,northeast=true},southwest=ep:GetCorner(3),northeast=ep:GetCorner(0)})}, 1)));
        break;
      end;
    end;
  end;
end
_hx_exports["spreadyweady"] = __deceptinfect_Spread.beginSpread

__deceptinfect_TestObject.new = function() 
  local self = _hx_new(__deceptinfect_TestObject.prototype)
  __deceptinfect_TestObject.super(self)
  return self
end
__deceptinfect_TestObject.super = function(self) 
  self.__uid = _hx_bit.bor(_hx_bit.lshift(__hxbit_Serializer.SEQ,24),(function() 
  local _hx_obj = __hxbit_Serializer;
  local _hx_fld = 'UID';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
  __deceptinfect_TestObject.inst = self;
  self.testString = "boogie";
end
_hx_exports["testobj"] = __deceptinfect_TestObject
_hxClasses["deceptinfect.TestObject"] = __deceptinfect_TestObject
__deceptinfect_TestObject.__name__ = "deceptinfect.TestObject"
__deceptinfect_TestObject.__interfaces__ = {__hxbit_Serializable}
__deceptinfect_TestObject.prototype = _hx_e();
__deceptinfect_TestObject.prototype.testString= nil;
__deceptinfect_TestObject.prototype.alive = function(self) 
  __haxe_Log.trace("I am... alive!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/TestObject.hx",lineNumber=35,className="deceptinfect.TestObject",methodName="alive"}));
end
__deceptinfect_TestObject.prototype.__uid= nil;
__deceptinfect_TestObject.prototype.getCLID = function(self) 
  do return __deceptinfect_TestObject.__clid end
end
__deceptinfect_TestObject.prototype.serialize = function(self,__ctx) 
  local s = self.testString;
  if (s == nil) then 
    __ctx.out.b:push(0);
  else
    local b = __haxe_io_Bytes.ofString(s);
    local v = b.length + 1;
    if ((v >= 0) and (v < 128)) then 
      __ctx.out.b:push(v);
    else
      __ctx.out.b:push(128);
      __ctx.out:addInt32(v);
    end;
    local _this = __ctx.out;
    local b2 = b.b;
    local _g = 0;
    local _g1 = b.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      _this.b:push(b2[i]);
    end;
  end;
end
__deceptinfect_TestObject.prototype.getSerializeSchema = function(self) 
  local schema = __hxbit_Schema.new();
  schema.fieldsNames:push("testString");
  schema.fieldsTypes:push(__hxbit_PropTypeDesc.PString);
  schema.isFinal = __hxbit_Serializer.isClassFinal(__deceptinfect_TestObject.__clid);
  do return schema end
end
__deceptinfect_TestObject.prototype.unserializeInit = function(self) 
end
__deceptinfect_TestObject.prototype.unserialize = function(self,__ctx) 
  local pos = (function() 
  local _hx_obj = __ctx;
  local _hx_fld = 'inPos';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  local v = __ctx.input.b[pos];
  if (v == 128) then 
    local _this = __ctx.input;
    local pos = __ctx.inPos;
    local v1 = _hx_bit.bor(_hx_bit.bor(_hx_bit.bor(_this.b[pos],_hx_bit.lshift(_this.b[pos + 1],8)),_hx_bit.lshift(_this.b[pos + 2],16)),_hx_bit.lshift(_this.b[pos + 3],24));
    v = _hx_bit_clamp((function() 
      local _hx_1
      if ((_hx_bit.band(v1,-2147483648)) ~= 0) then 
      _hx_1 = _hx_bit.bor(v1,-2147483648); else 
      _hx_1 = v1; end
      return _hx_1
    end )());
    local __ctx = __ctx;
    __ctx.inPos = __ctx.inPos + 4;
  end;
  local len = v;
  local tmp;
  if (len == 0) then 
    tmp = nil;
  else
    len = len - 1;
    local s = __ctx.input:getString(__ctx.inPos, len);
    local __ctx = __ctx;
    __ctx.inPos = __ctx.inPos + len;
    tmp = s;
  end;
  self.testString = tmp;
end

__deceptinfect_TestObject.prototype.__class__ =  __deceptinfect_TestObject

__deceptinfect_Trace.new = {}
_hxClasses["deceptinfect.Trace"] = __deceptinfect_Trace
__deceptinfect_Trace.__name__ = "deceptinfect.Trace"
__deceptinfect_Trace.overridetrace = function() 
  local oldtrace = __haxe_Log.trace;
  __haxe_Log.trace = function(v,infos) 
    local str = __haxe_Log.formatOutput(v, infos);
    str = Std.string(Std.string("\027[94m") .. Std.string(str)) .. Std.string("\027[0m");
    _hx_print(str);
  end;
end

__deceptinfect_ecswip_System.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_System.prototype)
  __deceptinfect_ecswip_System.super(self)
  return self
end
__deceptinfect_ecswip_System.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.System"] = __deceptinfect_ecswip_System
__deceptinfect_ecswip_System.__name__ = "deceptinfect.ecswip.System"
__deceptinfect_ecswip_System.prototype = _hx_e();
__deceptinfect_ecswip_System.prototype.init_server = function(self) 
end
__deceptinfect_ecswip_System.prototype.run_server = function(self) 
end
__deceptinfect_ecswip_System.prototype.init_shared = function(self) 
end
__deceptinfect_ecswip_System.prototype.run_shared = function(self) 
end
__deceptinfect_ecswip_System.prototype.init = function(self) 
  self:init_server();
  self:init_shared();
end
__deceptinfect_ecswip_System.prototype.run = function(self) 
  self:run_server();
  self:run_shared();
end

__deceptinfect_ecswip_System.prototype.__class__ =  __deceptinfect_ecswip_System

__deceptinfect_WeaponSystem.new = function() 
  local self = _hx_new(__deceptinfect_WeaponSystem.prototype)
  __deceptinfect_WeaponSystem.super(self)
  return self
end
__deceptinfect_WeaponSystem.super = function(self) 
  local _g = __haxe_ds_EnumValueMap.new();
  _g:set(__deceptinfect_WeaponStage.INITAL, _hx_tab_array({[0]="weapon_mor_p229"}, 1));
  _g:set(__deceptinfect_WeaponStage.TWO, _hx_tab_array({[0]="weapon_mor_ump"}, 1));
  _g:set(__deceptinfect_WeaponStage.THREE, _hx_tab_array({[0]="weapon_mor_m418"}, 1));
  _g:set(__deceptinfect_WeaponStage.FINAL, _hx_tab_array({[0]="weapon_mor_bulldog"}, 1));
  self.weapons_give = _g;
  local _g = __haxe_ds_EnumValueMap.new();
  _g:set(__deceptinfect_WeaponStage.INITAL, 0.0);
  _g:set(__deceptinfect_WeaponStage.TWO, 1.0);
  _g:set(__deceptinfect_WeaponStage.THREE, 2.0);
  _g:set(__deceptinfect_WeaponStage.FINAL, 3.0);
  self.timevalues = _g;
  self.currentStage = __deceptinfect_WeaponStage.INITAL;
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.WeaponSystem"] = __deceptinfect_WeaponSystem
__deceptinfect_WeaponSystem.__name__ = "deceptinfect.WeaponSystem"
__deceptinfect_WeaponSystem.prototype = _hx_e();
__deceptinfect_WeaponSystem.prototype.currentStage= nil;
__deceptinfect_WeaponSystem.prototype.timevalues= nil;
__deceptinfect_WeaponSystem.prototype.weapons_give= nil;
__deceptinfect_WeaponSystem.prototype.init_server = function(self) 
end
__deceptinfect_WeaponSystem.prototype.run_server = function(self) 
  local _g = __deceptinfect_GameManager.state;
  if (_g[1] == 2) then 
    local timeElapsed = _G.CurTime() - _g[2].gameStarted;
    local minsElapsed = timeElapsed / 60;
    if (minsElapsed > self.timevalues:get(self.currentStage)) then 
      local _g = 0;
      local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
      while (_g < _g1) do 
        _g = _g + 1;
        local x = _g - 1;
        local ent = x;
        local id = 33;
        local _g;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
        else
          _g = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        local id = 25;
        local _g1;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
        else
          _g1 = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (_g[1] == 1) then 
          if (_g1[1] == 1) then 
            local c_ply = _g[2].player;
            local x = self.weapons_give:get(self.currentStage);
            c_ply:Give(x[_G.math.random(0, x.length - 1)]);
          end;
        end;
      end;
      self:incrementStage();
    end;
  end;
end
__deceptinfect_WeaponSystem.prototype.giveInitalWeapons = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local ent = _g - 1;
    local ent = ent;
    local id = 33;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 25;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        local c_ply = _g[2].player;
        local x = self.weapons_give:get(__deceptinfect_WeaponStage.INITAL);
        c_ply:Give(x[_G.math.random(0, x.length - 1)]);
      end;
    end;
  end;
end
__deceptinfect_WeaponSystem.prototype.incrementStage = function(self) 
  local _g = self.currentStage;
  local tmp;
  if (_g[1] == 3) then 
    tmp = __deceptinfect_WeaponStage.FINAL;
  else
    local params = nil;
    tmp = Type.createEnumIndex(__deceptinfect_WeaponStage, _g[1] + 1, params);
  end;
  self.currentStage = tmp;
end

__deceptinfect_WeaponSystem.prototype.__class__ =  __deceptinfect_WeaponSystem
__deceptinfect_WeaponSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_WeaponSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})
_hxClasses["deceptinfect.WeaponStage"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="INITAL","TWO","THREE","FINAL"},4)}
__deceptinfect_WeaponStage = _hxClasses["deceptinfect.WeaponStage"];
__deceptinfect_WeaponStage.INITAL = _hx_tab_array({[0]="INITAL",0,__enum__ = __deceptinfect_WeaponStage},2)

__deceptinfect_WeaponStage.TWO = _hx_tab_array({[0]="TWO",1,__enum__ = __deceptinfect_WeaponStage},2)

__deceptinfect_WeaponStage.THREE = _hx_tab_array({[0]="THREE",2,__enum__ = __deceptinfect_WeaponStage},2)

__deceptinfect_WeaponStage.FINAL = _hx_tab_array({[0]="FINAL",3,__enum__ = __deceptinfect_WeaponStage},2)


__deceptinfect_ecswip_Component.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_Component.prototype)
  __deceptinfect_ecswip_Component.super(self)
  return self
end
__deceptinfect_ecswip_Component.super = function(self) 
end
_hxClasses["deceptinfect.ecswip.Component"] = __deceptinfect_ecswip_Component
__deceptinfect_ecswip_Component.__name__ = "deceptinfect.ecswip.Component"
__deceptinfect_ecswip_Component.prototype = _hx_e();
__deceptinfect_ecswip_Component.prototype.serverID= nil;
__deceptinfect_ecswip_Component.prototype.onRemove = function(self) 
end

__deceptinfect_ecswip_Component.prototype.__class__ =  __deceptinfect_ecswip_Component

__deceptinfect_ecswip_ComponentManager.new = {}
_hxClasses["deceptinfect.ecswip.ComponentManager"] = __deceptinfect_ecswip_ComponentManager
__deceptinfect_ecswip_ComponentManager.__name__ = "deceptinfect.ecswip.ComponentManager"
__deceptinfect_ecswip_ComponentManager.addGEnt = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addEntity();
  local x1 = __deceptinfect_ecswip_GEntityComponent.new(x);
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[34], id, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = id;
  _this.k[key] = true;
  local x = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(x));
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[31], id, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = id;
  _this.k[key] = true;
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.addPlayer = function(x) 
  local id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local x1 = __deceptinfect_ecswip_PlayerComponent.new(x);
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[33], id, x1);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x1;
  _this.h[key] = id;
  _this.k[key] = true;
  __deceptinfect_PlayerManager.addID(x, id);
  do return id end;
end
__deceptinfect_ecswip_ComponentManager.initComponent = function(id,str) 
  if (__deceptinfect_ecswip_ComponentManager.components_3 == nil) then 
    __deceptinfect_ecswip_ComponentManager.components_3 = __deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_._new();
  end;
  __deceptinfect_ecswip_ComponentManager.components_3[id] = __deceptinfect_ecswip__ComponentManager_Component__Impl_._new();
end
__deceptinfect_ecswip_ComponentManager.getComponentForIDSure = function(id,diID) 
  local fam = __deceptinfect_ecswip_ComponentManager.components_3[id];
  if (fam[1][diID] == nil) then 
    _G.error(__haxe_Exception.thrown("Component did not exist at sure statement!"),0);
  end;
  do return fam[3][fam[1][diID]] end;
end
__deceptinfect_ecswip_ComponentManager.removeComponent = function(id,diID) 
  local x;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    x = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    x = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local x = x;
  if (x[1] == 1) then 
    x[2]:onRemove();
  end;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.remove_entity_comp(__deceptinfect_ecswip_ComponentManager.components_3[id], diID);
end
__deceptinfect_ecswip_ComponentManager.removeEntity = function(x) 
  local _g = __deceptinfect_ecswip_SystemManager.getSystem2(__deceptinfect_game_ClientTranslateSystem);
  if (_g[1] == 0) then 
    _g[2]:removeEntity(x);
  end;
  local x1 = __deceptinfect_ecswip_ComponentManager.components_3;
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(x1);
  local component_lnext = _hx_1_p_next;
  local _hx_2_init_index, _hx_2_init_value = component_lnext(x1, _hx_1_p_index);
  local component_nextV = _hx_2_init_value;
  local component_i = _hx_2_init_index;
  while (component_nextV ~= nil) do 
    local v = component_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = component_lnext(x1, component_i);
    component_i = _hx_3_nextResult_index;
    component_nextV = _hx_3_nextResult_value;
    if (v[1][x] ~= nil) then 
      __deceptinfect_ecswip__ComponentManager_Component__Impl_.remove_entity_comp(v, x);
    end;
  end;
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities - 1;
end
__deceptinfect_ecswip_ComponentManager.addEntity = function() 
  local id = (function() 
  local _hx_obj = __deceptinfect_ecswip_ComponentManager;
  local _hx_fld = 'entities';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  __deceptinfect_ecswip_ComponentManager.activeEntities = __deceptinfect_ecswip_ComponentManager.activeEntities + 1;
  do return id end;
end

__deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_.new = {}
_hxClasses["deceptinfect.ecswip._ComponentManager.ComponentStorage_Impl_"] = __deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_
__deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_.__name__ = "deceptinfect.ecswip._ComponentManager.ComponentStorage_Impl_"
__deceptinfect_ecswip__ComponentManager_ComponentStorage_Impl_._new = function() 
  local this1 = ({});
  local this1 = this1;
  do return this1 end;
end

__deceptinfect_ecswip__ComponentManager_Component__Impl_.new = {}
_hxClasses["deceptinfect.ecswip._ComponentManager.Component__Impl_"] = __deceptinfect_ecswip__ComponentManager_Component__Impl_
__deceptinfect_ecswip__ComponentManager_Component__Impl_.__name__ = "deceptinfect.ecswip._ComponentManager.Component__Impl_"
__deceptinfect_ecswip__ComponentManager_Component__Impl_._new = function() 
  local this1 = ({});
  local this1 = this1;
  local this2 = ({});
  this1[1] = this2;
  local this2 = ({});
  this1[2] = this2;
  local this2 = ({});
  this1[3] = this2;
  this1[4] = 1;
  do return this1 end;
end
__deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity = function(this1,x,comp) 
  local postfix = this1[4];
  this1[4] = this1[4] + 1;
  this1[1][x] = postfix;
  this1[2][postfix] = x;
  this1[3][postfix] = comp;
end
__deceptinfect_ecswip__ComponentManager_Component__Impl_.remove_entity_comp = function(this1,x) 
  if (this1[1][x] == nil) then 
    do return end;
  end;
  local last_index = (function() 
  this1[4] = this1[4] - 1; return this1[4] end)();
  local int_id = this1[1][x];
  local last_ent_id = this1[2][last_index];
  this1[2][int_id] = this1[2][last_index];
  this1[3][int_id] = this1[3][last_index];
  this1[1][last_ent_id] = int_id;
  local val = nil;
  this1[1][x] = val;
end

__deceptinfect_abilities_FormComponent.new = function() 
  local self = _hx_new(__deceptinfect_abilities_FormComponent.prototype)
  __deceptinfect_abilities_FormComponent.super(self)
  return self
end
__deceptinfect_abilities_FormComponent.super = function(self) 
  self.formModel = _hx_funcToField(__deceptinfect_Misc.infModel);
  self.formMaxHealth = 60.0;
  self.form = __deceptinfect_abilities_CurrentForm.HUMAN;
  self.nextCooldown = 5;
  self.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
  self.formHealth = 60.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.abilities.FormComponent"] = __deceptinfect_abilities_FormComponent
__deceptinfect_abilities_FormComponent.__name__ = "deceptinfect.abilities.FormComponent"
__deceptinfect_abilities_FormComponent.prototype = _hx_e();
__deceptinfect_abilities_FormComponent.prototype.formHealth= nil;
__deceptinfect_abilities_FormComponent.prototype.cooldown= nil;
__deceptinfect_abilities_FormComponent.prototype.nextCooldown= nil;
__deceptinfect_abilities_FormComponent.prototype.form= nil;
__deceptinfect_abilities_FormComponent.prototype.formMaxHealth= nil;
__deceptinfect_abilities_FormComponent.prototype.formModel= nil;

__deceptinfect_abilities_FormComponent.prototype.__class__ =  __deceptinfect_abilities_FormComponent
__deceptinfect_abilities_FormComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_abilities_FormComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.abilities.CurrentForm"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HUMAN","INFECTED"},2)}
__deceptinfect_abilities_CurrentForm = _hxClasses["deceptinfect.abilities.CurrentForm"];
__deceptinfect_abilities_CurrentForm.HUMAN = _hx_tab_array({[0]="HUMAN",0,__enum__ = __deceptinfect_abilities_CurrentForm},2)

__deceptinfect_abilities_CurrentForm.INFECTED = _hx_tab_array({[0]="INFECTED",1,__enum__ = __deceptinfect_abilities_CurrentForm},2)

_hxClasses["deceptinfect.abilities.Cooldown"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","COOLDOWN"},2)}
__deceptinfect_abilities_Cooldown = _hxClasses["deceptinfect.abilities.Cooldown"];
__deceptinfect_abilities_Cooldown.ACTIVE = _hx_tab_array({[0]="ACTIVE",0,__enum__ = __deceptinfect_abilities_Cooldown},2)

__deceptinfect_abilities_Cooldown.COOLDOWN = function(time) local _x = _hx_tab_array({[0]="COOLDOWN",1,time,__enum__=__deceptinfect_abilities_Cooldown}, 3); return _x; end 

__deceptinfect_abilities_FormSystem.new = function() 
  local self = _hx_new(__deceptinfect_abilities_FormSystem.prototype)
  __deceptinfect_abilities_FormSystem.super(self)
  return self
end
__deceptinfect_abilities_FormSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.abilities.FormSystem"] = __deceptinfect_abilities_FormSystem
__deceptinfect_abilities_FormSystem.__name__ = "deceptinfect.abilities.FormSystem"
__deceptinfect_abilities_FormSystem.attemptChangeForm = function(ent) 
  local id = 23;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 34;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    if (_g1[1] == 1) then 
      local _hx_tmp;
      _hx_tmp = _g1[2].entity;
      local _g1 = _g.cooldown;
      if (_g1[1] == 1) then 
        if (not (_G.CurTime() < _g1[2])) then 
          _g.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
        end;
      else
        _g.cooldown = __deceptinfect_abilities_Cooldown.ACTIVE;
      end;
      if ((_g.formHealth > 0) and (_g.cooldown == __deceptinfect_abilities_Cooldown.ACTIVE)) then 
        if (_hx_tmp:Health() > 0) then 
          __deceptinfect_abilities_FormSystem.changeForm(ent);
        end;
      end;
    end;
  end;
end
__deceptinfect_abilities_FormSystem.supressWeapons = function(ply,oldWeapon,newWeapon) 
  local _g;
  if (_G.IsValid(ply)) then 
    local _g1 = ply.id;
    _g = (function() 
      local _hx_1
      if (_g1 == nil) then 
      _hx_1 = __haxe_ds_Option.None; else 
      _hx_1 = __haxe_ds_Option.Some(_g1); end
      return _hx_1
    end )();
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local _g = _g[2];
    local id = 23;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g1[1] == 1) then 
      if (_g1[2].form[1] == 1) then 
        if (oldWeapon:GetName() == "weapon_di_spit") then 
          do return true end;
        else
          if (newWeapon:GetName() ~= "weapon_di_spit") then 
            do return true end;
          else
            do return false end;
          end;
        end;
      else
        do return false end;
      end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__deceptinfect_abilities_FormSystem.changeForm = function(ent) 
  local c_form = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(23, ent);
  local g_ent = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(34, ent).entity;
  local curHealth = g_ent:Health();
  local curMaxHealth = g_ent:GetMaxHealth();
  local curModel = g_ent:GetModel();
  g_ent:SetMaxHealth(c_form.formMaxHealth);
  g_ent:SetHealth(c_form.formHealth);
  g_ent:SetModel(c_form.formModel);
  local tmp;
  local tmp1 = c_form.form[1];
  if (tmp1) == 0 then 
    tmp = __deceptinfect_abilities_CurrentForm.INFECTED;
  elseif (tmp1) == 1 then 
    tmp = __deceptinfect_abilities_CurrentForm.HUMAN; end;
  c_form.form = tmp;
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2].player;
    local tmp = c_form.form[1];
    if (tmp) == 0 then 
      _g:StripWeapon("weapon_di_spit");
    elseif (tmp) == 1 then 
      _g:Give("weapon_di_spit");
      _g:SelectWeapon("weapon_di_spit"); end;
  end;
  c_form.formHealth = curHealth;
  c_form.formMaxHealth = curMaxHealth;
  c_form.cooldown = __deceptinfect_abilities_Cooldown.COOLDOWN(_G.CurTime() + c_form.nextCooldown);
  c_form.formModel = curModel;
end
__deceptinfect_abilities_FormSystem.prototype = _hx_e();
__deceptinfect_abilities_FormSystem.prototype.init_server = function(self) 
  _G.hook.Add("PlayerSwitchWeapon", "di_supressweapon", __deceptinfect_abilities_FormSystem.supressWeapons);
end

__deceptinfect_abilities_FormSystem.prototype.__class__ =  __deceptinfect_abilities_FormSystem
__deceptinfect_abilities_FormSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_abilities_FormSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_client_GeigerSystem.new = function() 
  local self = _hx_new(__deceptinfect_client_GeigerSystem.prototype)
  __deceptinfect_client_GeigerSystem.super(self)
  return self
end
__deceptinfect_client_GeigerSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hx_exports["geiger"] = __deceptinfect_client_GeigerSystem
_hxClasses["deceptinfect.client.GeigerSystem"] = __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__name__ = "deceptinfect.client.GeigerSystem"
__deceptinfect_client_GeigerSystem.prototype = _hx_e();
__deceptinfect_client_GeigerSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local plyr = x;
    local id = 24;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][plyr] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][plyr]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 33;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][plyr] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][plyr]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g1[2].player;
        local fract = Math.min((_g[2].rate - 1) / 2, 1);
        __deceptinfect_client_GeigerSystem.net_geiger:send(_hx_o({__fields__={geiger=true},geiger=fract}), _hx_tmp, true);
      end;
    end;
  end;
end

__deceptinfect_client_GeigerSystem.prototype.__class__ =  __deceptinfect_client_GeigerSystem
__deceptinfect_client_GeigerSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_client_GeigerSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_ComponentTools.new = {}
_hxClasses["deceptinfect.ecswip.ComponentTools"] = __deceptinfect_ecswip_ComponentTools
__deceptinfect_ecswip_ComponentTools.__name__ = "deceptinfect.ecswip.ComponentTools"
__deceptinfect_ecswip_ComponentTools.sure = function(x) 
  if (x[1] == 1) then 
    do return x[2] end;
  else
    _G.error(__haxe_Exception.thrown("Component not avaliable..."),0);
  end;
end
_hxClasses["deceptinfect.ecswip.ComponentState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NONE","Comp"},2)}
__deceptinfect_ecswip_ComponentState = _hxClasses["deceptinfect.ecswip.ComponentState"];
__deceptinfect_ecswip_ComponentState.NONE = _hx_tab_array({[0]="NONE",0,__enum__ = __deceptinfect_ecswip_ComponentState},2)

__deceptinfect_ecswip_ComponentState.Comp = function(comp) local _x = _hx_tab_array({[0]="Comp",1,comp,__enum__=__deceptinfect_ecswip_ComponentState}, 3); return _x; end 

__deceptinfect_ecswip_DummySystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_DummySystem.prototype)
  __deceptinfect_ecswip_DummySystem.super(self)
  return self
end
__deceptinfect_ecswip_DummySystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.ecswip.DummySystem"] = __deceptinfect_ecswip_DummySystem
__deceptinfect_ecswip_DummySystem.__name__ = "deceptinfect.ecswip.DummySystem"
__deceptinfect_ecswip_DummySystem.prototype = _hx_e();
__deceptinfect_ecswip_DummySystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local _g = 1;
    local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
    while (_g < _g1) do 
      _g = _g + 1;
    end;
  end;
end

__deceptinfect_ecswip_DummySystem.prototype.__class__ =  __deceptinfect_ecswip_DummySystem
__deceptinfect_ecswip_DummySystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_ecswip_DummySystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_GEntityComponent.new = function(e) 
  local self = _hx_new(__deceptinfect_ecswip_GEntityComponent.prototype)
  __deceptinfect_ecswip_GEntityComponent.super(self,e)
  return self
end
__deceptinfect_ecswip_GEntityComponent.super = function(self,e) 
  __deceptinfect_ecswip_Component.super(self);
  self.entity = e;
end
_hxClasses["deceptinfect.ecswip.GEntityComponent"] = __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__name__ = "deceptinfect.ecswip.GEntityComponent"
__deceptinfect_ecswip_GEntityComponent.prototype = _hx_e();
__deceptinfect_ecswip_GEntityComponent.prototype.entity= nil;

__deceptinfect_ecswip_GEntityComponent.prototype.__class__ =  __deceptinfect_ecswip_GEntityComponent
__deceptinfect_ecswip_GEntityComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_GEntityComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_ecswip_GrabSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_GrabSystem.prototype)
  __deceptinfect_ecswip_GrabSystem.super(self)
  return self
end
__deceptinfect_ecswip_GrabSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.ecswip.GrabSystem"] = __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__name__ = "deceptinfect.ecswip.GrabSystem"
__deceptinfect_ecswip_GrabSystem.grabDamage = function(ent,dmg) 
  if (ent:IsPlayer()) then 
    local id = 12;
    local diID = ent.id;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g.grabState[1] == 1) then 
        _g.damage = _g.damage + dmg:GetDamage();
        if (_g.damage >= _g.threshold) then 
          __deceptinfect_ecswip_GrabSystem.grabStop(ent.id);
          _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.NOT_READY(__deceptinfect_util_Cooldown.COOLDOWN(_G.CurTime() + _g.nextCooldown)));
        end;
      end;
    end;
  end;
  do return nil end;
end
__deceptinfect_ecswip_GrabSystem.grabStop = function(attack) 
  local c_produce = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(12, attack);
  local attackPos = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(31, attack):get_pos();
  local vic;
  local _g = c_produce.grabState;
  if (_g[1] == 1) then 
    vic = _g[2];
  else
    do return end;
  end;
  local vicPos = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(31, vic):get_pos();
  local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, vic);
  c_produce:set_grabState(__deceptinfect_infection_components_GrabProduceState.NOT_READY(__deceptinfect_util_Cooldown.COOLDOWN(_G.CurTime() + 2)));
  local _this = c_accept.grabAttacker;
  _this.h[c_produce] = false;
  _this.k[c_produce] = true;
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    _g[2].player:Freeze(false);
  end;
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    _g[2].player:Freeze(false);
  end;
  local filter = _G.RecipientFilter();
  filter:AddPVS(attackPos);
  filter:AddPVS(vicPos);
  __deceptinfect_ecswip_GrabSystem.net_grabend:sendFilter(_hx_o({__fields__={index=true},index=c_produce.grabindex}), filter);
end
__deceptinfect_ecswip_GrabSystem.attemptGrab = function(attack,vic) 
  local id = 12;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 9;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2].grabState;
    if (_g[1] == 0) then 
      local _g = _g[2];
      if (_g[1] == 2) then 
        if (_g1[1] == 1) then 
          if (_g1[2].grabState[1] == 0) then 
            __deceptinfect_ecswip_GrabSystem.grabStart(attack, _g[2]);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.requestStartSearch = function(attack) 
  local id = 12;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    local _g1 = _g.grabState;
    if (_g1[1] == 0) then 
      if (_g1[2][1] == 0) then 
        _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.SEARCHING));
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.requestStopSearch = function(attack) 
  local id = 12;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    local _g1 = _g.grabState;
    if (_g1[1] == 0) then 
      local tmp = _g1[2][1];
      if (tmp) == 1 then 
        _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.NOT_SEARCHING));
      elseif (tmp) == 2 then 
        _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.NOT_SEARCHING));else end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.attemptSneakAttack = function(attack,vic) 
  local id = 34;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 9;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 34;
  local _g2;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g2 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    if (_g1[1] == 1) then 
      if (_g1[2].canGrabBack == true) then 
        if (_g2[1] == 1) then 
          if (__deceptinfect_util_EntityExt.facingBehind(_g[2].entity, _g2[2].entity)) then 
            __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.attemptTarget = function(attack,vic) 
  local id = 12;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 9;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2].grabState;
    if (_g[1] == 0) then 
      local tmp = _g[2][1];
      if (tmp) == 1 then 
        if (_g1[1] == 1) then 
          local _g = _g1[2];
          local _g1 = _g.grabState;
          if (_g1[1] == 0) then 
            __haxe_Log.trace(_g.grabState, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=282,className="deceptinfect.ecswip.GrabSystem",methodName="attemptTarget"}));
            __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack, vic);
            __deceptinfect_ecswip_GrabSystem.target(attack, vic);
            if (_g1[2][0] >= _g.overwhelm) then 
              __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
            end;
          end;
        end;
      elseif (tmp) == 2 then 
        if (_g1[1] == 1) then 
          local _g = _g1[2];
          local _g1 = _g.grabState;
          if (_g1[1] == 0) then 
            __haxe_Log.trace(_g.grabState, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=282,className="deceptinfect.ecswip.GrabSystem",methodName="attemptTarget"}));
            __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack, vic);
            __deceptinfect_ecswip_GrabSystem.target(attack, vic);
            if (_g1[2][0] >= _g.overwhelm) then 
              __deceptinfect_ecswip_GrabSystem.attemptGrab(attack, vic);
            end;
          end;
        end;else end;
    end;
  end;
end
__deceptinfect_ecswip_GrabSystem.clearTargetingVic = function(vic) 
  local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, vic);
  local c_produce = c_accept.targeting:keys();
  while (c_produce:hasNext()) do 
    local c_produce = c_produce:next();
    local _g = c_produce.grabState;
    if (_g[1] == 0) then 
      local _g = _g[2];
      if (_g[1] == 2) then 
        if (vic == _g[2]) then 
          c_produce:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.SEARCHING));
        end;
      end;
    end;
  end;
  local _this = c_accept.targeting;
  _this.h = ({});
  _this.k = ({});
end
__deceptinfect_ecswip_GrabSystem.grabStart = function(attack,vic) 
  __haxe_Log.trace("starting grab", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=306,className="deceptinfect.ecswip.GrabSystem",methodName="grabStart"}));
  local c_produce = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(12, attack);
  local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, vic);
  local _this = c_accept.grabAttacker;
  _this.h[c_produce] = true;
  _this.k[c_produce] = true;
  c_accept.grabState = __deceptinfect_infection_components_GrabAcceptState.GRABBED;
  c_produce:set_grabState(__deceptinfect_infection_components_GrabProduceState.GRABBING(vic));
  c_produce.grabindex = (function() 
  local _hx_obj = __deceptinfect_ecswip_GrabSystem;
  local _hx_fld = 'grabindex';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  __deceptinfect_ecswip_GrabSystem.clearTargetingVic(vic);
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    _g[2].player:Freeze(true);
  end;
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][attack] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][attack]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    _g[2].player:Freeze(true);
  end;
end
__deceptinfect_ecswip_GrabSystem.calcGrabIncrease = function() 
  do return (100 / __deceptinfect_GameValues.GRAB_TIME) / _G.math.floor(1 / _G.engine.TickInterval()) end;
end
__deceptinfect_ecswip_GrabSystem.target = function(attacker,victim) 
  local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, victim);
  local c_produce = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(12, attacker);
  local _this = c_accept.targeting;
  _this.h[c_produce] = true;
  _this.k[c_produce] = true;
  local _g = c_accept.grabState;
  if (_g[1] == 0) then 
    local _g = _g[2];
    _g[0] = _g[0] + 1;
  else
    _G.error(__haxe_Exception.thrown("XD"),0);
  end;
  c_produce:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.TARGET(victim)));
end
__deceptinfect_ecswip_GrabSystem.prototype = _hx_e();
__deceptinfect_ecswip_GrabSystem.prototype.init_server = function(self) 
  _G.hook.Add("EntityTakeDamage", "grabDamage", __deceptinfect_ecswip_GrabSystem.grabDamage);
end
__deceptinfect_ecswip_GrabSystem.prototype.run_server = function(self) 
  local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
  local __n = 0;
  local __lowest = __compArr[12][4];
  local __lowest_comp = 12;
  __n = __compArr[34][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 34;
  end;
  local __lowestInt = __compArr[__lowest_comp][2];
  local _g = 1;
  local _g1 = __lowest;
  while (_g < _g1) do 
    _g = _g + 1;
    local __int_id = _g - 1;
    local attack = __lowestInt[__int_id];
    if ((__compArr[12][1][attack] ~= nil) and (__compArr[34][1][attack] ~= nil)) then 
      local this1 = __compArr[12];
      local _g = this1[3][this1[1][attack]];
      local this1 = __compArr[34];
      local _g1 = this1[3][this1[1][attack]].entity;
      local _g2 = _g.grabState;
      local tmp = _g2[1];
      if (tmp) == 0 then 
        local _g2 = _g2[2];
        local tmp = _g2[1];
        if (tmp) == 1 then 
          local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
          local __n = 0;
          local __lowest = __compArr[9][4];
          local __lowest_comp = 9;
          __n = __compArr[31][4];
          if (__n < __lowest) then 
            __lowest = __n;
            __lowest_comp = 31;
          end;
          local __lowestInt = __compArr[__lowest_comp][2];
          local _g2 = 1;
          local _g3 = __lowest;
          local _hx_continue_2 = false;
          while (_g2 < _g3) do repeat 
            _g2 = _g2 + 1;
            local __int_id = _g2 - 1;
            local victim = __lowestInt[__int_id];
            if ((__compArr[9][1][victim] ~= nil) and (__compArr[31][1][victim] ~= nil)) then 
              local this1 = __compArr[31];
              local _g2 = this1[3][this1[1][victim]];
              local _g3 = _g2:get_pos();
              _g2:get_ang();
              if (victim == attack) then 
                break;
              end;
              if ((__deceptinfect_ecswip_ComponentManager.components_3[25][1][victim] == nil) and (__deceptinfect_ecswip_ComponentManager.components_3[2][1][victim] == nil)) then 
                break;
              end;
              if (_g3:Distance(_g1:GetPos()) < _g.grabDist) then 
                __deceptinfect_ecswip_GrabSystem.attemptTarget(attack, victim);
                local _g = _g.grabState;
                local tmp = _g[1];
                if (tmp) == 0 then 
                  local _g = _g[2];
                  if (_g[1] == 2) then 
                    if (_g[2] == victim) then 
                      _hx_continue_2 = true;break;
                    end;
                  end;
                elseif (tmp) == 1 then 
                  _hx_continue_2 = true;break;else end;
              end;
            end;until true
            if _hx_continue_2 then 
            _hx_continue_2 = false;
            break;
            end;
            
          end;
        elseif (tmp) == 2 then 
          local _g2 = _g2[2];
          local prevPos = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(31, _g2):get_pos();
          local oldDist = prevPos:Distance(_g1:GetPos());
          if (oldDist > _g.grabDist) then 
            _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.SEARCHING));
            break;
          end;
          __deceptinfect_ecswip_GrabSystem.attemptSneakAttack(attack, _g2);
          local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
          local __n = 0;
          local __lowest = __compArr[9][4];
          local __lowest_comp = 9;
          __n = __compArr[31][4];
          if (__n < __lowest) then 
            __lowest = __n;
            __lowest_comp = 31;
          end;
          local __lowestInt = __compArr[__lowest_comp][2];
          local _g3 = 1;
          local _g4 = __lowest;
          local _hx_continue_2 = false;
          while (_g3 < _g4) do repeat 
            _g3 = _g3 + 1;
            local __int_id = _g3 - 1;
            local victim = __lowestInt[__int_id];
            if ((__compArr[9][1][victim] ~= nil) and (__compArr[31][1][victim] ~= nil)) then 
              local this1 = __compArr[31];
              local _g3 = this1[3][this1[1][victim]];
              local _g4 = _g3:get_pos();
              _g3:get_ang();
              if ((victim == _g2) or (attack == victim)) then 
                break;
              end;
              if ((__deceptinfect_ecswip_ComponentManager.components_3[25][1][victim] == nil) and (__deceptinfect_ecswip_ComponentManager.components_3[2][1][victim] == nil)) then 
                break;
              end;
              local newDist = _g4:Distance(_g1:GetPos());
              if ((newDist < oldDist) and (newDist < _g.grabDist)) then 
                __deceptinfect_ecswip_GrabSystem.attemptTarget(attack, victim);
                local _g = _g.grabState;
                local tmp = _g[1];
                if (tmp) == 0 then 
                  local _g = _g[2];
                  if (_g[1] == 2) then 
                    local _g = _g[2];
                    if (_g == victim) then 
                      __haxe_Log.trace(Std.string("switching targets ") .. Std.string(_g), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=154,className="deceptinfect.ecswip.GrabSystem",methodName="run_server"}));
                      _hx_continue_2 = true;break;
                    end;
                  end;
                elseif (tmp) == 1 then 
                  _hx_continue_2 = true;break;else end;
              end;
            end;until true
            if _hx_continue_2 then 
            _hx_continue_2 = false;
            break;
            end;
            
          end;else end;
      elseif (tmp) == 1 then 
        local _g2 = _g2[2];
        local g_vic;
        local id = 34;
        local _g3;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g2] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g3 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g2]]);
        else
          _g3 = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (_g3[1] == 1) then 
          g_vic = _g3[2].entity;
        else
          do return end;
        end;
        local filter = _G.RecipientFilter();
        filter:AddPVS(_g1:GetPos());
        filter:AddPVS(g_vic:GetPos());
        __deceptinfect_ecswip_GrabSystem.net_grabupdate:sendFilter(_hx_o({__fields__={index=true,ent=true,ent2=true},index=_g.grabindex,ent=g_vic,ent2=_g1}), filter, true);
        local id = 24;
        local _g;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g2] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g2]]);
        else
          _g = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (_g[1] == 1) then 
          local _g = _g[2].infection;
          local tmp = _g[1];
          if (tmp) == 0 then 
            local _g = _g[2];
            _g[0] = _g[0] + __deceptinfect_ecswip_GrabSystem.calcGrabIncrease();
          elseif (tmp) == 1 then 
            __haxe_Log.trace("infected", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/GrabSystem.hx",lineNumber=182,className="deceptinfect.ecswip.GrabSystem",methodName="run_server"}));
            __deceptinfect_ecswip_GrabSystem.grabStop(attack); end;
        end;
      elseif (tmp) == 2 then 
        local _g1 = _g2[2];
        if (_g1[1] == 1) then 
          if (_G.CurTime() > _g1[2]) then 
            _g:set_grabState(__deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.NOT_SEARCHING));
          end;
        end;else end;
    end;
  end;
end

__deceptinfect_ecswip_GrabSystem.prototype.__class__ =  __deceptinfect_ecswip_GrabSystem
__deceptinfect_ecswip_GrabSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_ecswip_GrabSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_HiddenHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_ecswip_HiddenHealthSystem.prototype)
  __deceptinfect_ecswip_HiddenHealthSystem.super(self)
  return self
end
__deceptinfect_ecswip_HiddenHealthSystem.super = function(self) 
  __deceptinfect_client_GeigerSystem.super(self);
end
_hxClasses["deceptinfect.ecswip.HiddenHealthSystem"] = __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__name__ = "deceptinfect.ecswip.HiddenHealthSystem"
__deceptinfect_ecswip_HiddenHealthSystem.prototype = _hx_e();
__deceptinfect_ecswip_HiddenHealthSystem.prototype.init_server = function(self) 
  __deceptinfect_ecswip_SignalStorage.entDamageTrigger.handlers:clear();
  __deceptinfect_ecswip_SignalStorage.entDamage:listen(_hx_bind(self,self.hiddenHealthDamage));
end
__deceptinfect_ecswip_HiddenHealthSystem.prototype.hiddenHealthDamage = function(self,data) 
  local victim = data.vicID;
  local g_attacker = data.dmg:GetAttacker();
  if (not g_attacker:IsPlayer()) then 
    do return end;
  end;
  local id = 8;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][victim] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][victim]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 34;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][victim] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][victim]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 13;
  local diID = g_attacker.id;
  local _g2;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    _g2 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    if (_g1[1] == 1) then 
      if (_g2[1] == 1) then 
        local _g2 = _g2[2];
        local damageVal = data.dmg:GetDamage();
        local health = _g1[2].entity:Health();
        local dmgInfo = data.dmg;
        if (damageVal >= health) then 
          __haxe_Log.trace(Std.string(Std.string(Std.string("Did ") .. Std.string(damageVal)) .. Std.string(" points of damage to extra health: ")) .. Std.string(_g.extraHealth), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/HiddenHealthSystem.hx",lineNumber=30,className="deceptinfect.ecswip.HiddenHealthSystem",methodName="hiddenHealthDamage"}));
          _g.extraHealth = _g.extraHealth - damageVal;
          if (_g.extraHealth > 0) then 
            dmgInfo:SetDamage(health - 1);
          else
            dmgInfo:SetDamage(health);
          end;
        else
          __haxe_Log.trace(Std.string(Std.string(Std.string("Adding ") .. Std.string(damageVal)) .. Std.string(" to ")) .. Std.string(damageVal * (1 - _g2.damagepenalty)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/HiddenHealthSystem.hx",lineNumber=38,className="deceptinfect.ecswip.HiddenHealthSystem",methodName="hiddenHealthDamage"}));
          _g.extraHealth = _g.extraHealth + (damageVal * (1 - _g2.damagepenalty));
        end;
      end;
    end;
  end;
  __haxe_Log.trace("SEPERATION", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/HiddenHealthSystem.hx",lineNumber=42,className="deceptinfect.ecswip.HiddenHealthSystem",methodName="hiddenHealthDamage"}));
end

__deceptinfect_ecswip_HiddenHealthSystem.prototype.__class__ =  __deceptinfect_ecswip_HiddenHealthSystem
__deceptinfect_ecswip_HiddenHealthSystem.__super__ = __deceptinfect_client_GeigerSystem
setmetatable(__deceptinfect_ecswip_HiddenHealthSystem.prototype,{__index=__deceptinfect_client_GeigerSystem.prototype})

__deceptinfect_ecswip_PlayerComponent.new = function(x) 
  local self = _hx_new(__deceptinfect_ecswip_PlayerComponent.prototype)
  __deceptinfect_ecswip_PlayerComponent.super(self,x)
  return self
end
__deceptinfect_ecswip_PlayerComponent.super = function(self,x) 
  self.playing = true;
  self.deathTime = __deceptinfect_ecswip_DeathTime.ALIVE;
  self.roundModel = "";
  self.spec_next = 1;
  __deceptinfect_ecswip_Component.super(self);
  self.player = x;
end
_hxClasses["deceptinfect.ecswip.PlayerComponent"] = __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__name__ = "deceptinfect.ecswip.PlayerComponent"
__deceptinfect_ecswip_PlayerComponent.prototype = _hx_e();
__deceptinfect_ecswip_PlayerComponent.prototype.spec_next= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.roundModel= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.deathTime= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.playing= nil;
__deceptinfect_ecswip_PlayerComponent.prototype.player= nil;

__deceptinfect_ecswip_PlayerComponent.prototype.__class__ =  __deceptinfect_ecswip_PlayerComponent
__deceptinfect_ecswip_PlayerComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_PlayerComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.ecswip.DeathTime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ALIVE","DEAD"},2)}
__deceptinfect_ecswip_DeathTime = _hxClasses["deceptinfect.ecswip.DeathTime"];
__deceptinfect_ecswip_DeathTime.ALIVE = _hx_tab_array({[0]="ALIVE",0,__enum__ = __deceptinfect_ecswip_DeathTime},2)

__deceptinfect_ecswip_DeathTime.DEAD = function(reviveTime) local _x = _hx_tab_array({[0]="DEAD",1,reviveTime,__enum__=__deceptinfect_ecswip_DeathTime}, 3); return _x; end 

__deceptinfect_ecswip_SignalStorage.new = {}
_hxClasses["deceptinfect.ecswip.SignalStorage"] = __deceptinfect_ecswip_SignalStorage
__deceptinfect_ecswip_SignalStorage.__name__ = "deceptinfect.ecswip.SignalStorage"
__deceptinfect_ecswip_SignalStorage.initEvents = function() 
  __deceptinfect_ecswip_SignalStorage.entDamage = __deceptinfect_ecswip_SignalStorage.entDamageTrigger;
  __deceptinfect_ecswip_SignalStorage.onInfected = __deceptinfect_ecswip_SignalStorage.onInfectedTrigger;
end

__deceptinfect_ecswip_Spectate.new = {}
_hxClasses["deceptinfect.ecswip.Spectate"] = __deceptinfect_ecswip_Spectate
__deceptinfect_ecswip_Spectate.__name__ = "deceptinfect.ecswip.Spectate"
__deceptinfect_ecswip_Spectate.chooseSpectateTarget = function(x,dir) 
  local player = x.player;
  local iter;
  local iter1 = dir[1];
  if (iter1) == 0 then 
    iter = 1;
  elseif (iter1) == 1 then 
    iter = -1; end;
  local specCur = x.spec_next;
  local specNext = x.spec_next + iter;
  local players = _G.player.GetAll();
  local specd = false;
  while (specNext ~= specCur) do 
    local target = players[specNext];
    if (_G.IsValid(target) and target:Alive()) then 
      player:SpectateEntity(target);
      player:SetObserverMode(_G.OBS_MODE_CHASE);
      specd = true;
    end;
    specNext = specNext + iter;
    if (specNext < 1) then 
      specNext = #players;
    else
      if (specNext > #players) then 
        specNext = 0;
      end;
    end;
  end;
  if (not specd) then 
    __haxe_Log.trace("No spectatable players found", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ecswip/Spectate.hx",lineNumber=33,className="deceptinfect.ecswip.Spectate",methodName="chooseSpectateTarget"}));
  end;
  x.spec_next = specNext;
end
_hxClasses["deceptinfect.ecswip.Spec_Direction"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="FORWARDS","BACKWARDS"},2)}
__deceptinfect_ecswip_Spec_Direction = _hxClasses["deceptinfect.ecswip.Spec_Direction"];
__deceptinfect_ecswip_Spec_Direction.FORWARDS = _hx_tab_array({[0]="FORWARDS",0,__enum__ = __deceptinfect_ecswip_Spec_Direction},2)

__deceptinfect_ecswip_Spec_Direction.BACKWARDS = _hx_tab_array({[0]="BACKWARDS",1,__enum__ = __deceptinfect_ecswip_Spec_Direction},2)


__haxe_IMap.new = {}
_hxClasses["haxe.IMap"] = __haxe_IMap
__haxe_IMap.__name__ = "haxe.IMap"
__haxe_IMap.prototype = _hx_e();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.keys= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
_hxClasses["haxe.ds.ObjectMap"] = __haxe_ds_ObjectMap
__haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap"
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_e();
__haxe_ds_ObjectMap.prototype.h= nil;
__haxe_ds_ObjectMap.prototype.k= nil;
__haxe_ds_ObjectMap.prototype.get = function(self,key) 
  do return self.h[key] end
end
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__deceptinfect_infection_systems_InfectionSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_systems_InfectionSystem.prototype)
  __deceptinfect_infection_systems_InfectionSystem.super(self)
  return self
end
__deceptinfect_infection_systems_InfectionSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.systems.InfectionSystem"] = __deceptinfect_infection_systems_InfectionSystem
__deceptinfect_infection_systems_InfectionSystem.__name__ = "deceptinfect.infection.systems.InfectionSystem"
__deceptinfect_infection_systems_InfectionSystem.calcInfectionFromRates = function(rate) 
  local total = 0.0;
  local totalmulti = 1.0;
  local rate1 = rate.addRates:iterator();
  while (rate1:hasNext()) do 
    local rate = rate1:next();
    total = total + rate;
  end;
  local multi = rate.multipliers:iterator();
  while (multi:hasNext()) do 
    local multi = multi:next();
    totalmulti = totalmulti + multi;
  end;
  do return total * totalmulti end;
end
__deceptinfect_infection_systems_InfectionSystem.getBaseInfection = function(inf) 
  local _g = inf.baseInfection;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    local _g = __deceptinfect_GameManager.state;
    if (_g[1] == 2) then 
      do return _g[2].baseInfection[0] end;
    else
      __haxe_Log.trace("Not currently playing...", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/systems/InfectionSystem.hx",lineNumber=166,className="deceptinfect.infection.systems.InfectionSystem",methodName="getBaseInfection"}));
      inf.baseInfection = __deceptinfect_infection_BaseInfection.USING_STATIC(0.0);
      do return 0 end;
    end;
  elseif (tmp) == 2 then 
    do return _g[2] end; end;
end
__deceptinfect_infection_systems_InfectionSystem.fixUpInfection = function(infection) 
  local _g = infection.infection;
  if (_g[1] == 0) then 
    local _g = _g[2];
    if (_g[0] < 0) then 
      _g[0] = 0;
    else
      if (_g[0] >= 100) then 
        __haxe_Log.trace("Now infected :)", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/systems/InfectionSystem.hx",lineNumber=182,className="deceptinfect.infection.systems.InfectionSystem",methodName="fixUpInfection"}));
        infection:set_infection(__deceptinfect_infection_INF_STATE.INFECTED);
      end;
    end;
  end;
end
__deceptinfect_infection_systems_InfectionSystem.onInfected = function(ent) 
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2].player;
    __haxe_Log.trace(Std.string("INIT INFECTED PLAYER ") .. Std.string(Std.string(_g)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/systems/InfectionSystem.hx",lineNumber=192,className="deceptinfect.infection.systems.InfectionSystem",methodName="onInfected"}));
    __deceptinfect_infection_systems_InfectionSystem.net_infected:send(_hx_e(), _g);
    __deceptinfect_GameManager.initInfectedPlayer(ent);
    __deceptinfect_client_GeigerSystem.net_geiger:send(_hx_o({__fields__={geiger=true},geiger=0.0}), _g);
  end;
end
__deceptinfect_infection_systems_InfectionSystem.prototype = _hx_e();
__deceptinfect_infection_systems_InfectionSystem.prototype.run_server = function(self) 
  local numPlayers = 0;
  local totalInf = 0.0;
  local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
  local __lowest = __compArr[24][4];
  local __lowest_comp = 24;
  local __lowestInt = __compArr[__lowest_comp][2];
  local _g = 1;
  local _hx_continue_1 = false;
  while (_g < __lowest) do repeat 
    _g = _g + 1;
    local __int_id = _g - 1;
    local ent = __lowestInt[__int_id];
    if (__compArr[24][1][ent] ~= nil) then 
      local this1 = __compArr[24];
      local _g = this1[3][this1[1][ent]];
      local _g1 = _g.infection;
      if (_g1[1] == 0) then 
        local _g1 = _g1[2];
        if (_g.acceptingInfection[1] == 0) then 
          if ((__deceptinfect_ecswip_ComponentManager.components_3[33][1][ent] ~= nil) and (__deceptinfect_ecswip_ComponentManager.components_3[25][1][ent] == nil)) then 
            break;
          end;
          local base = __deceptinfect_infection_systems_InfectionSystem.getBaseInfection(_g);
          local id = 20;
          local _g2;
          if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
            local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
            _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
          else
            _g2 = __deceptinfect_ecswip_ComponentState.NONE;
          end;
          local rate = (function() 
            local _hx_1
            if (_g2[1] == 1) then 
            _hx_1 = __deceptinfect_infection_systems_InfectionSystem.calcInfectionFromRates(_g2[2]); else 
            _hx_1 = _g.rate; end
            return _hx_1
          end )();
          rate = rate + 1;
          local id = 3;
          local _g2;
          if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
            local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
            _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
          else
            _g2 = __deceptinfect_ecswip_ComponentState.NONE;
          end;
          local vun = (function() 
            local _hx_2
            if (_g2[1] == 1) then 
            _hx_2 = _g2[2].vun; else 
            _hx_2 = 1; end
            return _hx_2
          end )();
          _g1[0] = _g1[0] + ((base * rate) * vun);
          if (_G.CurTime() > __deceptinfect_infection_systems_InfectionSystem.infectionReport) then 
            __haxe_Log.trace(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(base)) .. Std.string(" ")) .. Std.string(rate)) .. Std.string(" ")) .. Std.string(vun), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/systems/InfectionSystem.hx",lineNumber=91,className="deceptinfect.infection.systems.InfectionSystem",methodName="run_server"}));
          end;
          __deceptinfect_infection_systems_InfectionSystem.fixUpInfection(_g);
          local id = 33;
          local _g2;
          if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
            local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
            _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
          else
            _g2 = __deceptinfect_ecswip_ComponentState.NONE;
          end;
          if (_g2[1] == 1) then 
            __deceptinfect_infection_systems_InfectionSystem.net_inf:send(_hx_o({__fields__={infection=true},infection=_g1[0]}), _g2[2].player, true);
            totalInf = totalInf + _g:getInfValue();
            numPlayers = numPlayers + 1;
          end;
          _g.rate = rate;
          if (_g.infection[1] == 1) then 
            __deceptinfect_infection_systems_InfectionSystem.onInfected(ent);
          end;
        end;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (numPlayers > 0) then 
    __deceptinfect_infection_systems_InfectionSystem.averageInfection = totalInf / numPlayers;
  end;
  if (_G.CurTime() > __deceptinfect_infection_systems_InfectionSystem.infectionReport) then 
    __deceptinfect_infection_systems_InfectionSystem.infectionReport = _G.CurTime() + 5;
  end;
end
__deceptinfect_infection_systems_InfectionSystem.prototype.makeInfected = function(self,ent) 
  local id = 24;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    local tmp;
    if (_g.infection[1] == 0) then 
      __deceptinfect_infection_systems_InfectionSystem.onInfected(ent);
      tmp = __deceptinfect_infection_INF_STATE.INFECTED;
    else
      tmp = __deceptinfect_infection_INF_STATE.INFECTED;
    end;
    _g:set_infection(tmp);
    __haxe_Log.trace(Std.string("infection : ") .. Std.string(Std.string(_g.infection)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/infection/systems/InfectionSystem.hx",lineNumber=128,className="deceptinfect.infection.systems.InfectionSystem",methodName="makeInfected"}));
  end;
end

__deceptinfect_infection_systems_InfectionSystem.prototype.__class__ =  __deceptinfect_infection_systems_InfectionSystem
__deceptinfect_infection_systems_InfectionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_systems_InfectionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_infection_systems_RateSystem.new = {}
_hxClasses["deceptinfect.infection.systems.RateSystem"] = __deceptinfect_infection_systems_RateSystem
__deceptinfect_infection_systems_RateSystem.__name__ = "deceptinfect.infection.systems.RateSystem"
__deceptinfect_infection_systems_RateSystem.getAddRateTicket = function() 
  __deceptinfect_infection_systems_RateSystem.nextAddRate = __deceptinfect_infection_systems_RateSystem.nextAddRate + 1;
  do return __deceptinfect_infection_systems_RateSystem.nextAddRate - 1 end;
end

__deceptinfect_radiation_RadiationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadiationSystem.prototype)
  __deceptinfect_radiation_RadiationSystem.super(self)
  return self
end
__deceptinfect_radiation_RadiationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadiationSystem"] = __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__name__ = "deceptinfect.radiation.RadiationSystem"
__deceptinfect_radiation_RadiationSystem.testRadiation = function(vec) 
  local ent = __deceptinfect_ecswip_ComponentManager.addEntity();
  local this1 = _G.Angle(0, 0, 0);
  local x = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.REAL(vec, this1));
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[31], ent, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = ent;
  _this.k[key] = true;
end
_hx_exports["testRadiation"] = __deceptinfect_radiation_RadiationSystem.testRadiation
__deceptinfect_radiation_RadiationSystem.getTotalRadiation = function(dist,rad) 
  if (dist < rad.radius) then 
    do return __haxe_ds_Option.Some(((rad.radius - dist) / rad.radius) * (rad.maxrate - 1)) end;
  else
    do return __haxe_ds_Option.None end;
  end;
end
__deceptinfect_radiation_RadiationSystem.getTotalRadiationRate = function(r) 
  local sortFunc = function(x,y) 
    if (x == y) then 
      do return 0 end;
    else
      if (x < y) then 
        do return -1 end;
      else
        do return 1 end;
      end;
    end;
  end;
  local sorted = _hx_tab_array({}, 0);
  local map = r.radiation;
  local _g_keys = map:keys();
  while (_g_keys:hasNext()) do 
    local key = _g_keys:next();
    local rate = _hx_o({__fields__={value=true,key=true},value=map:get(key),key=key}).value;
    sorted:push(rate);
  end;
  sorted:sort(sortFunc);
  local total = 0;
  local _g = 0;
  local _g1 = sorted.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    total = total + (sorted[i] * _G.math.pow(r.diminish, i));
  end;
  do return total end;
end
__deceptinfect_radiation_RadiationSystem.prototype = _hx_e();
__deceptinfect_radiation_RadiationSystem.prototype.run_server = function(self) 
  local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
  local __n = 0;
  local __lowest = __compArr[10][4];
  local __lowest_comp = 10;
  __n = __compArr[20][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 20;
  end;
  __n = __compArr[31][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 31;
  end;
  __n = __compArr[15][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 15;
  end;
  local __lowestInt = __compArr[__lowest_comp][2];
  local _g = 1;
  local _g1 = __lowest;
  while (_g < _g1) do 
    _g = _g + 1;
    local __int_id = _g - 1;
    local ent = __lowestInt[__int_id];
    if ((((__compArr[10][1][ent] ~= nil) and (__compArr[20][1][ent] ~= nil)) and (__compArr[31][1][ent] ~= nil)) and (__compArr[15][1][ent] ~= nil)) then 
      local this1 = __compArr[10];
      local _g = this1[3][this1[1][ent]];
      local this1 = __compArr[20];
      local _g1 = this1[3][this1[1][ent]];
      local this1 = __compArr[31];
      local _g2 = this1[3][this1[1][ent]];
      local _g3 = _g2:get_pos();
      _g2:get_ang();
      _g.radiation.h = ({});
      local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
      local __n = 0;
      local __lowest = __compArr[19][4];
      local __lowest_comp = 19;
      __n = __compArr[31][4];
      if (__n < __lowest) then 
        __lowest = __n;
        __lowest_comp = 31;
      end;
      __n = __compArr[22][4];
      if (__n < __lowest) then 
        __lowest = __n;
        __lowest_comp = 22;
      end;
      local __lowestInt = __compArr[__lowest_comp][2];
      local _g2 = 1;
      local _g4 = __lowest;
      while (_g2 < _g4) do 
        _g2 = _g2 + 1;
        local __int_id = _g2 - 1;
        local produce = __lowestInt[__int_id];
        if (((__compArr[19][1][produce] ~= nil) and (__compArr[31][1][produce] ~= nil)) and (__compArr[22][1][produce] ~= nil)) then 
          local this1 = __compArr[19];
          local _g1 = this1[3][this1[1][produce]];
          local this1 = __compArr[31];
          local _g2 = this1[3][this1[1][produce]];
          local _g4 = _g2:get_pos();
          _g2:get_ang();
          local dist = _g4:Distance(_g3);
          local _g1 = __deceptinfect_radiation_RadiationSystem.getTotalRadiation(__deceptinfect__DistSquared_DistSquared_Impl_.convert(dist), _g1);
          if (_g1[1] == 0) then 
            local _g1 = _g1[2];
            local _this = _g.radiation;
            local key = produce;
            if (_g1 == nil) then 
              _this.h[key] = __haxe_ds_IntMap.tnull;
            else
              _this.h[key] = _g1;
            end;
          end;
        end;
      end;
      local this1 = _g1.addRates;
      local key = __deceptinfect_radiation_RadiationSystem.radRateID;
      local value = __deceptinfect_radiation_RadiationSystem.getTotalRadiationRate(_g);
      local _this = this1;
      local key = key;
      if (value == nil) then 
        _this.h[key] = __haxe_ds_IntMap.tnull;
      else
        _this.h[key] = value;
      end;
    end;
  end;
end

__deceptinfect_radiation_RadiationSystem.prototype.__class__ =  __deceptinfect_radiation_RadiationSystem
__deceptinfect_radiation_RadiationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadiationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_WinSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_WinSystem.prototype)
  __deceptinfect_game_WinSystem.super(self)
  return self
end
__deceptinfect_game_WinSystem.super = function(self) 
  self.winTrig = __tink_core_SignalTrigger.new();
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.WinSystem"] = __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__name__ = "deceptinfect.game.WinSystem"
__deceptinfect_game_WinSystem.prototype = _hx_e();
__deceptinfect_game_WinSystem.prototype.newWinner= nil;
__deceptinfect_game_WinSystem.prototype.winTrig= nil;
__deceptinfect_game_WinSystem.prototype.init_server = function(self) 
  self.newWinner = self.winTrig;
end
__deceptinfect_game_WinSystem.prototype.run_server = function(self) 
  if (__deceptinfect_GameManager.state[1] ~= 2) then 
    do return end;
  end;
  local total = 0;
  local infected = 0;
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 30;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 33;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 25;
    local _g2;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g2 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local tmp = _g[1];
    if (tmp) == 0 then 
      if (_g1[1] == 1) then 
        if (_g2[1] == 1) then 
          total = total + 1;
        end;
      end;
    elseif (tmp) == 1 then 
      if (_g1[1] == 1) then 
        if (_g2[1] == 1) then 
          infected = infected + 1;
          total = total + 1;
        end;
      end; end;
  end;
  __deceptinfect_util_Util.printTimer_2(0, 15, function() 
    __haxe_Log.trace(Std.string(Std.string(Std.string("Infected : ") .. Std.string(infected)) .. Std.string(" total : ")) .. Std.string(total), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=39,className="deceptinfect.game.WinSystem",methodName="run_server"}));
  end);
  if (infected == 0) then 
    __haxe_Log.trace("trigg!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=41,className="deceptinfect.game.WinSystem",methodName="run_server"}));
    self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
    self.winTrig.handlers:clear();
    do return end;
  else
    if (infected >= total) then 
      __haxe_Log.trace("trugg!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/WinSystem.hx",lineNumber=46,className="deceptinfect.game.WinSystem",methodName="run_server"}));
      self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_INF);
      self.winTrig.handlers:clear();
      do return end;
    end;
  end;
  local aliveNests = false;
  local deadNests = false;
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 28;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g[2].health > 0) then 
        aliveNests = true;
        break;
      else
        deadNests = true;
      end;
    end;
  end;
  if (not aliveNests and deadNests) then 
    self.winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
  end;
end

__deceptinfect_game_WinSystem.prototype.__class__ =  __deceptinfect_game_WinSystem
__deceptinfect_game_WinSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_WinSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_BatterySystem.new = function() 
  local self = _hx_new(__deceptinfect_game_BatterySystem.prototype)
  __deceptinfect_game_BatterySystem.super(self)
  return self
end
__deceptinfect_game_BatterySystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.BatterySystem"] = __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__name__ = "deceptinfect.game.BatterySystem"
__deceptinfect_game_BatterySystem.prototype = _hx_e();
__deceptinfect_game_BatterySystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ents = x;
    local id = 17;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ents] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ents]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      _g.charge = _g.charge - _g.decay;
      if (_g.charge < 0.0) then 
        _g.charge = 0.0;
      end;
      if (_g.charge > _g.satisfy) then 
        _g.status = __deceptinfect_game_components_AccepterStatus.SATISIFED;
      end;
      if (_g.status[1] == 1) then 
        if (_g.charge < _g.satisfy) then 
          _g.status = __deceptinfect_game_components_AccepterStatus.AVALIABLE;
        end;
      end;
    end;
  end;
end
__deceptinfect_game_BatterySystem.prototype.addBattery = function(self,source,accepter) 
  local id = 0;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][source] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][source]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 17;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][accepter] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][accepter]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    if (_g1[1] == 1) then 
      local _g1 = _g1[2];
      local id = 35;
      local _g2;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][source] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][source]]);
      else
        _g2 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g2[1] == 1) then 
        _g1.charge = _g1.charge - (_g.charge / 2);
      else
        _g1.charge = _g1.charge + _g.charge;
      end;
      local id = 36;
      local _g;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][source] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][source]]);
      else
        _g = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      local id = 34;
      local _g1;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][source] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][source]]);
      else
        _g1 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g[1] == 1) then 
        if (_g1[1] == 1) then 
          local _g = _g1[2];
          _G.util.BlastDamage(_g.entity, _g.entity, _g.entity:GetPos(), 500, 75);
        end;
      end;
      do return true end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end

__deceptinfect_game_BatterySystem.prototype.__class__ =  __deceptinfect_game_BatterySystem
__deceptinfect_game_BatterySystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_BatterySystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SpawnPointTable.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnPointTable.prototype)
  __deceptinfect_game_SpawnPointTable.super(self)
  return self
end
__deceptinfect_game_SpawnPointTable.super = function(self) 
  self.spawns = _hx_tab_array({}, 0);
end
_hxClasses["deceptinfect.game.SpawnPointTable"] = __deceptinfect_game_SpawnPointTable
__deceptinfect_game_SpawnPointTable.__name__ = "deceptinfect.game.SpawnPointTable"
__deceptinfect_game_SpawnPointTable.prototype = _hx_e();
__deceptinfect_game_SpawnPointTable.prototype.spawns= nil;
__deceptinfect_game_SpawnPointTable.prototype.generateSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local point = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_Spawn.new(self, point));
  end;
  local _g = 0;
  local _g1 = self.spawns;
  while (_g < _g1.length) do 
    local spawn = _g1[_g];
    _g = _g + 1;
    local _g = 0;
    local _g1 = self.spawns;
    while (_g < _g1.length) do 
      local spawn2 = _g1[_g];
      _g = _g + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end
__deceptinfect_game_SpawnPointTable.prototype.generateBoundSpawns = function(self,points) 
  self.spawns = _hx_tab_array({}, 0);
  local _g = 0;
  while (_g < points.length) do 
    local minmax = points[_g];
    _g = _g + 1;
    self.spawns:push(__deceptinfect_game_BoundsSpawn.new(self, __deceptinfect_util_MinMaxTools.getCenter(minmax), minmax));
  end;
  local _g = 0;
  local _g1 = self.spawns;
  while (_g < _g1.length) do 
    local spawn = _g1[_g];
    _g = _g + 1;
    local _g = 0;
    local _g1 = self.spawns;
    while (_g < _g1.length) do 
      local spawn2 = _g1[_g];
      _g = _g + 1;
      spawn:calculateDist(spawn2);
    end;
  end;
end
__deceptinfect_game_SpawnPointTable.prototype.getRandom = function(self) 
  local choose = _G.math.random(0, self.spawns.length - 1);
  __haxe_Log.trace(Std.string("index chosen ") .. Std.string(choose), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=235,className="deceptinfect.game.SpawnPointTable",methodName="getRandom"}));
  do return self.spawns[choose] end
end

__deceptinfect_game_SpawnPointTable.prototype.__class__ =  __deceptinfect_game_SpawnPointTable

__deceptinfect_game_SpawnSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnSystem.prototype)
  __deceptinfect_game_SpawnSystem.super(self)
  return self
end
__deceptinfect_game_SpawnSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.SpawnSystem"] = __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__name__ = "deceptinfect.game.SpawnSystem"
__deceptinfect_game_SpawnSystem.generateSpawns = function() 
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.obj:generateSpawns(ret.objectives);
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.item:generateSpawns(ret.items);
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.nest:generateSpawns(ret.nests);
  local this1 = __deceptinfect_MapStorage.spawns;
  local key = _G.game.GetMap();
  local ret = this1.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __deceptinfect_game_SpawnSystem.evac:generateBoundSpawns(ret.evacs);
end
__deceptinfect_game_SpawnSystem.prototype = _hx_e();
__deceptinfect_game_SpawnSystem.prototype.init_server = function(self) 
end
__deceptinfect_game_SpawnSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 39;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 31;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g1[1] == 1) then 
        if (_g.spawn.vec:DistToSqr(_g1[2]:get_pos()) > 8100) then 
          __haxe_Log.trace("Spawn freed", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=25,className="deceptinfect.game.SpawnSystem",methodName="run_server"}));
          _g.spawn.claimed = __deceptinfect_game_SpawnClaim.UNCLAIMED;
          __deceptinfect_ecswip_ComponentManager.removeComponent(39, ent);
        end;
      end;
    end;
  end;
end

__deceptinfect_game_SpawnSystem.prototype.__class__ =  __deceptinfect_game_SpawnSystem
__deceptinfect_game_SpawnSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SpawnSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_statuses_WalkthroughSystem.new = function() 
  local self = _hx_new(__deceptinfect_statuses_WalkthroughSystem.prototype)
  __deceptinfect_statuses_WalkthroughSystem.super(self)
  return self
end
__deceptinfect_statuses_WalkthroughSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.statuses.WalkthroughSystem"] = __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__name__ = "deceptinfect.statuses.WalkthroughSystem"
__deceptinfect_statuses_WalkthroughSystem.prototype = _hx_e();
__deceptinfect_statuses_WalkthroughSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 18;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 33;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        local _g = _g1[2];
        local tooclose = false;
        local _g1 = 0;
        local _g2 = __deceptinfect_ecswip_ComponentManager.entities;
        local _hx_continue_2 = false;
        while (_g1 < _g2) do repeat 
          _g1 = _g1 + 1;
          local x = _g1 - 1;
          local otherEnt = x;
          if (otherEnt == ent) then 
            break;
          end;
          local id = 33;
          local _g1;
          if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][otherEnt] ~= nil) then 
            local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
            _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][otherEnt]]);
          else
            _g1 = __deceptinfect_ecswip_ComponentState.NONE;
          end;
          if (_g1[1] == 1) then 
            local dist = _g1[2].player:GetPos():DistToSqr(_g.player:GetPos());
            if (dist < 15625) then 
              tooclose = true;
              _hx_continue_2 = true;break;
            end;
          end;until true
          if _hx_continue_2 then 
          _hx_continue_2 = false;
          break;
          end;
          
        end;
        if (not tooclose) then 
          __deceptinfect_util_PlayerExt.setWalkthroughable(_g.player, false);
          __deceptinfect_ecswip_ComponentManager.removeComponent(18, ent);
        end;
      end;
    end;
  end;
end

__deceptinfect_statuses_WalkthroughSystem.prototype.__class__ =  __deceptinfect_statuses_WalkthroughSystem
__deceptinfect_statuses_WalkthroughSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_statuses_WalkthroughSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_NestSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_NestSystem.prototype)
  __deceptinfect_game_NestSystem.super(self)
  return self
end
__deceptinfect_game_NestSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.NestSystem"] = __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__name__ = "deceptinfect.game.NestSystem"
__deceptinfect_game_NestSystem.prototype = _hx_e();
__deceptinfect_game_NestSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 28;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 19;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g1[1] == 1) then 
        local _g1 = _g1[2];
        local avg = __deceptinfect_infection_systems_InfectionSystem.averageInfection;
        local remap = (function(inMax,inMin,value) 
          do return function(outMin,outMax) 
            do return _G.math.Remap(value[0], inMin[0], inMax[0], outMin, outMax) end;
          end end;
        end)(_hx_tab_array({[0]=_g.rate_threshold_max}, 1), _hx_tab_array({[0]=_g.rate_threshold_min}, 1), _hx_tab_array({[0]=avg}, 1));
        _g1.maxrate = remap(_g.rate_start, _g.rate_end);
        _g1.radius = remap(_g.radius_start, _g.radius_end);
      end;
    end;
  end;
end

__deceptinfect_game_NestSystem.prototype.__class__ =  __deceptinfect_game_NestSystem
__deceptinfect_game_NestSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_NestSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_EvacSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_EvacSystem.prototype)
  __deceptinfect_game_EvacSystem.super(self)
  return self
end
__deceptinfect_game_EvacSystem.super = function(self) 
  self.flaresSpawned = false;
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.EvacSystem"] = __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__name__ = "deceptinfect.game.EvacSystem"
__deceptinfect_game_EvacSystem.prototype = _hx_e();
__deceptinfect_game_EvacSystem.prototype.flaresSpawned= nil;
__deceptinfect_game_EvacSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 29;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (__deceptinfect_GameManager.state[1] == 2) then 
        local c_evac = _g[2];
        if ((__deceptinfect_infection_systems_InfectionSystem.averageInfection > 80) and not self.flaresSpawned) then 
          local flareSpawn = __deceptinfect_game_SpawnSystem.obj:getRandom();
          flareSpawn:spawn(_G.ents.Create("di_flare"));
          local flareSpawn2 = flareSpawn:getRandomSpawns(1);
          local tmp = _G.ents.Create("di_flare");
          flareSpawn2[0]:spawn(tmp);
          self.flaresSpawned = true;
        end;
        local _g = c_evac.state;
        local tmp = _g[1];
        if (tmp) == 1 then 
          local time = _g[2];
          time[0] = time[0] - __deceptinfect_GameManager.diffTime;
          if (time[0] < 0) then 
            __haxe_Log.trace(c_evac.state, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=84,className="deceptinfect.game.EvacSystem",methodName="run_server"}));
            local v = c_evac.leavetime;
            local this1 = ({length = 1});
            local this1 = this1;
            local ret = this1;
            ret[0] = v;
            c_evac.state = __deceptinfect_game_components_EvacState.LEAVING(ret);
          end;
          __deceptinfect_game_EvacSystem.evac_state:broadcast(_hx_o({__fields__={state=true,time=true},state=__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from(c_evac.state),time=time[0]}), true);
        elseif (tmp) == 2 then 
          local time = _g[2];
          time[0] = time[0] - __deceptinfect_GameManager.diffTime;
          if (time[0] < 0) then 
            __haxe_Log.trace(c_evac.state, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/EvacSystem.hx",lineNumber=64,className="deceptinfect.game.EvacSystem",methodName="run_server"}));
            self:checkWin(c_evac);
            c_evac.state = __deceptinfect_game_components_EvacState.NOT_ACTIVE;
          end;
          local id = c_evac.in_zone:keys();
          while (id:hasNext()) do 
            local id = id:next();
            local id1 = 23;
            local _g;
            if (__deceptinfect_ecswip_ComponentManager.components_3[id1][1][id] ~= nil) then 
              local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id1];
              _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][id]]);
            else
              _g = __deceptinfect_ecswip_ComponentState.NONE;
            end;
            if (_g[1] == 1) then 
              if (_g[2].form[1] == 1) then 
                c_evac.in_zone:remove(id);
                local _this = c_evac.blocked;
                local key = id;
                _this.h[key] = true;
              end;
            end;
          end;
          __deceptinfect_game_EvacSystem.evac_state:broadcast(_hx_o({__fields__={state=true,time=true},state=__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from(c_evac.state),time=time[0]}), true);else end;
      end;
    end;
  end;
end
__deceptinfect_game_EvacSystem.prototype.checkWin = function(self,evac) 
  local humanEscape = false;
  local id = evac.in_zone:keys();
  while (id:hasNext()) do 
    local id = id:next();
    local id1 = 30;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id1][1][id] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id1];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][id]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id1 = 33;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id1][1][id] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id1];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][id]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local tmp = _g[1];
    if (tmp) == 0 then 
      if (_g1[1] == 1) then 
        humanEscape = true;
      end;
    elseif (tmp) == 1 then 
      if (_g1[1] == 1) then 
        __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_INF);
        do return end;
      end; end;
  end;
  if (humanEscape) then 
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.WIN_HUMAN);
  else
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).winTrig.handlers:invoke(__deceptinfect_game_Win.DRAW);
  end;
end
__deceptinfect_game_EvacSystem.prototype.addFlare = function(self,flare,evac) 
  local id = 27;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][flare] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][flare]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 34;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][flare] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][flare]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 29;
  local _g2;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][evac] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][evac]]);
  else
    _g2 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    if (_g1[1] == 1) then 
      if (_g2[1] == 1) then 
        local c_evac = _g2[2];
        local c_gent = _g1[2];
        if (c_evac.state[1] == 0) then 
          local v = c_evac.arrivetime;
          local this1 = ({length = 1});
          local this1 = this1;
          local ret = this1;
          ret[0] = v;
          c_evac.state = __deceptinfect_game_components_EvacState.ARRIVING(ret);
          c_gent.entity:Remove();
        end;
      end;
    end;
  end;
end
__deceptinfect_game_EvacSystem.prototype.leave = function(self,ent,evac) 
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    evac.in_zone:remove(ent);
    __deceptinfect_ecswip_ComponentManager.removeComponent(38, ent);
  end;
end

__deceptinfect_game_EvacSystem.prototype.__class__ =  __deceptinfect_game_EvacSystem
__deceptinfect_game_EvacSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_EvacSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_RagdollSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_RagdollSystem.prototype)
  __deceptinfect_game_RagdollSystem.super(self)
  return self
end
__deceptinfect_game_RagdollSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.RagdollSystem"] = __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__name__ = "deceptinfect.game.RagdollSystem"
__deceptinfect_game_RagdollSystem.prototype = _hx_e();
__deceptinfect_game_RagdollSystem.prototype.init_server = function(self) 
  __deceptinfect_GameManager.stateChange:listen(_hx_bind(self,self.stateChange));
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_SlowMotionSystem).slowMotionEnd:listen(_hx_bind(self,self.endSlowMotion));
end
__deceptinfect_game_RagdollSystem.prototype.endSlowMotion = function(self,x) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 26;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 41;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 34;
    local _g2;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g2 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        if (_g2[1] == 1) then 
          local _hx_tmp;
          _hx_tmp = _g2[2].entity;
          local _g = 0;
          local _g1 = _hx_tmp:GetPhysicsObjectCount();
          while (_g < _g1) do 
            _g = _g + 1;
            local physid = _g - 1;
            local physob = _hx_tmp:GetPhysicsObjectNum(physid);
            physob:EnableMotion(false);
            physob:Sleep();
          end;
          _hx_tmp:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
          _hx_tmp:SetSolid(_G.SOLID_NONE);
        end;
      end;
    end;
    local id = 33;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 25;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g[2].player;
        self:playerStatue(_hx_tmp);
        _hx_tmp:KillSilent();
      end;
    end;
  end;
end
__deceptinfect_game_RagdollSystem.prototype.stateChange = function(self,newstate) 
  local _g = __deceptinfect_GameManager.state;
  local tmp = newstate[1];
  if (tmp) == 0 then 
    __haxe_Log.trace("wrote", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=246,className="deceptinfect.game.RagdollSystem",methodName="stateChange"}));
    self:writeStatues();
  elseif (tmp) == 3 then 
    local _g = 0;
    local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
    while (_g < _g1) do 
      _g = _g + 1;
      local x = _g - 1;
      local ent = x;
      local id = 33;
      local _g;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      local id = 30;
      local _g1;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g1 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      local id = 25;
      local _g2;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g2 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g[1] == 1) then 
        if (_g1[1] == 1) then 
          if (_g2[1] == 1) then 
            _g[2].player:SetModel(__deceptinfect_Misc.infModel);
          end;
        end;
      end;
      local id = 34;
      local _g;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      local id = 26;
      local _g1;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g1 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g[1] == 1) then 
        if (_g1[1] == 1) then 
          if (_g1[2].reveal[1] == 0) then 
            self:reveal(_g[2].entity);
          end;
        end;
      end;
    end;else
  if (_g[1] == 0) then 
    local _g = 0;
    local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
    while (_g < _g1) do 
      _g = _g + 1;
      local x = _g - 1;
      local ent = x;
      local id = 41;
      local _g;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      local id = 34;
      local _g1;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
      else
        _g1 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g[1] == 1) then 
        if (_g1[1] == 1) then 
          __haxe_Log.trace("removed statue", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/RagdollSystem.hx",lineNumber=253,className="deceptinfect.game.RagdollSystem",methodName="stateChange"}));
          _g1[2].entity:Remove();
        end;
      end;
    end;
  end; end;
end
__deceptinfect_game_RagdollSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 34;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 26;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g1[1] == 1) then 
        local _g1 = _g1[2];
        local _g2 = _g1.reveal;
        if (_g2[1] == 0) then 
          if (_G.CurTime() > _g2[2][0]) then 
            self:reveal(_g.entity);
          end;
        end;
        local id = 41;
        local _g2;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
        else
          _g2 = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (_g2[1] ~= 1) then 
          if (__deceptinfect_ecswip_ComponentManager.getComponentForIDSure(33, _g1.owner).player:Alive()) then 
            _g.entity:Remove();
          end;
        end;
      end;
    end;
    local id = 33;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      local tr = _g.player:GetEyeTrace();
      local _g1 = __deceptinfect_util_EntityExt.validID2(tr.Entity);
      if (_g1[1] == 0) then 
        local _g1 = _g1[2];
        local id = 34;
        local _g2;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g1] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g1]]);
        else
          _g2 = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        local id = 5;
        local _g3;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g1] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          _g3 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g1]]);
        else
          _g3 = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (_g2[1] == 1) then 
          if (_g3[1] == 1) then 
            local _g1 = _g3[2];
            __deceptinfect_game_RagdollSystem.statueinfo:send(_hx_o({__fields__={stat=true,inf=true,health=true,name=true},stat=_g2[2].entity,inf=_g1.inf,health=_g1.health,name=_g1.name}), _g.player);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_game_RagdollSystem.prototype.playerRagdoll = function(self,owner,ragdoll) 
  if (owner:IsPlayer()) then 
    local ply = owner;
    local di_ragdoll = self:newRagdoll(ply, ragdoll);
    local id = 30;
    local diID = ply.id;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local v = _G.CurTime() + 5;
      local this1 = ({length = 1});
      local this1 = this1;
      local ret = this1;
      ret[0] = v;
      __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(26, di_ragdoll.id).reveal = __deceptinfect_game_components_RagdollReveal.WAIT(ret);
    end;
  end;
  ragdoll:SetNoDraw(true);
  ragdoll:Remove();
end
__deceptinfect_game_RagdollSystem.prototype.playerStatue = function(self,plyr,inf) 
  if (inf == nil) then 
    inf = false;
  end;
  local x = _G.ents.Create("prop_ragdoll");
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local ent = x;
  local x = __deceptinfect_game_components_Statue.new();
  local to = ent.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[41], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
  local c_stat = __deceptinfect_game_components_StatInfo.new();
  c_stat.name = plyr:Name();
  local id = 24;
  local diID = plyr.id;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  c_stat.inf = (function() 
    local _hx_1
    if (_g[1] == 1) then 
    _hx_1 = _g[2]:getInfValue(); else 
    _hx_1 = 0.0; end
    return _hx_1
  end )();
  c_stat.health = plyr:Health();
  local to = ent.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[5], to, c_stat);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = c_stat;
  _this.h[key] = to;
  _this.k[key] = true;
  local x = __deceptinfect_game_components_KeepRestart.new();
  local to = ent.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[40], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
  ent:SetModel(plyr:GetModel());
  ent:SetPos(plyr:GetPos());
  ent:Spawn();
  local _g = 0;
  local _g1 = ent:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local physNum = _g - 1;
    local physob = ent:GetPhysicsObjectNum(physNum);
    local _hx_2_result_a, _hx_2_result_b = plyr:GetBonePosition(ent:TranslatePhysBoneToBone(physNum));
    if (_G.IsValid(physob)) then 
      physob:SetPos(_hx_2_result_a);
      physob:SetAngles(_hx_2_result_b);
      physob:EnableMotion(false);
      physob:Sleep();
    end;
  end;
  ent:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
  ent:SetTrigger(true);
  ent:SetSolid(_G.SOLID_NONE);
  local plywep = plyr:GetActiveWeapon();
  ent:SetNWString("showwep", plywep:GetModel());
end
__deceptinfect_game_RagdollSystem.prototype.writeStatues = function(self) 
  local tbl = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 41;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 34;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      if (_g1[1] == 1) then 
        local _hx_tmp;
        _hx_tmp = _g1[2].entity;
        local ar = _hx_tab_array({}, 0);
        local _g = 0;
        local _g1 = _hx_tmp:GetPhysicsObjectCount();
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          local physob = _hx_tmp:GetPhysicsObjectNum(i);
          ar:push(_hx_o({__fields__={pos=true,ang=true},pos=_G.util.TypeToString(physob:GetPos()),ang=_G.util.TypeToString(physob:GetAngles())}));
        end;
        tbl:push(_hx_o({__fields__={model=true,phys=true},model=_hx_tmp:GetModel(),phys=ar}));
      end;
    end;
  end;
  _G.file.Write("deceptinfect/lastRoundStatues.txt", __haxe_Json.stringify(tbl));
end
__deceptinfect_game_RagdollSystem.prototype.newRagdoll = function(self,owner,old) 
  local rag = self:createProp();
  rag:SetPos(owner:GetPos());
  rag:SetModel(owner:GetModel());
  rag:Spawn();
  __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(26, rag.id).owner = owner.id;
  local _g = 0;
  local _g1 = rag:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local physNum = _g - 1;
    local physob = rag:GetPhysicsObjectNum(physNum);
    local oldphysob = old:GetPhysicsObjectNum(physNum);
    local _hx_1_result_a, _hx_1_result_b = owner:GetBonePosition(rag:TranslatePhysBoneToBone(physNum));
    if (_G.IsValid(physob)) then 
      physob:SetPos(_hx_1_result_a);
      physob:SetAngles(_hx_1_result_b);
      if (_G.IsValid(oldphysob)) then 
        physob:SetVelocityInstantaneous(oldphysob:GetVelocity());
        physob:SetVelocity(oldphysob:GetVelocity());
      end;
      physob:Wake();
    end;
  end;
  do return rag end
end
__deceptinfect_game_RagdollSystem.prototype.createProp = function(self) 
  local rag = _G.ents.Create("prop_ragdoll");
  rag.id = __deceptinfect_ecswip_ComponentManager.addGEnt(rag);
  local id = rag.id;
  local x = __deceptinfect_game_components_Ragdoll.new();
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[26], id, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = id;
  _this.k[key] = true;
  if (__deceptinfect_GameManager.state[1] == 2) then 
    local x = __deceptinfect_game_components_Statue.new();
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[41], id, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = id;
    _this.k[key] = true;
    local x = __deceptinfect_game_components_KeepRestart.new();
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[40], id, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = id;
    _this.k[key] = true;
  else
    local x = __deceptinfect_game_components_CleanupEnt.new();
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[14], id, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = id;
    _this.k[key] = true;
  end;
  do return rag end
end
__deceptinfect_game_RagdollSystem.prototype.reveal = function(self,rag) 
  local newmodel = self:createProp();
  local c_rag = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(26, newmodel.id);
  c_rag.reveal = __deceptinfect_game_components_RagdollReveal.REVEAL;
  c_rag.owner = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(26, rag.id).owner;
  newmodel:SetModel(__deceptinfect_Misc.infModel);
  newmodel:SetPos(rag:GetPos());
  newmodel:Spawn();
  local newlocpos = newmodel:GetBonePosition(0);
  local oldlocpos = rag:GetBonePosition(0);
  rag:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
  local _g = 0;
  local _g1 = rag:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local oldphysob = rag:GetPhysicsObjectNum(i);
    if (_G.IsValid(oldphysob)) then 
      oldphysob:EnableCollisions(false);
    end;
  end;
  local _g = 0;
  local _g1 = newmodel:GetPhysicsObjectCount() - 1;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local newphysob = newmodel:GetPhysicsObjectNum(i);
    if (_G.IsValid(newphysob)) then 
      local bone = newmodel:TranslatePhysBoneToBone(i);
      local otherbone = rag:LookupBone(newmodel:GetBoneName(bone));
      local oldphysob;
      local _g = rag:TranslateBoneToPhysBone(otherbone);
      if (_g == -1) then 
        oldphysob = nil;
      else
        local x = _g;
        oldphysob = rag:GetPhysicsObjectNum(x);
      end;
      if (otherbone ~= nil) then 
        local _hx_1_bp_a, _hx_1_bp_b = rag:GetBonePosition(otherbone);
        newphysob:SetPos(_hx_1_bp_a, true);
        newphysob:SetAngles(_hx_1_bp_b);
        if (oldphysob ~= nil) then 
          newphysob:SetVelocityInstantaneous(oldphysob:GetVelocity());
          newphysob:SetVelocity(oldphysob:GetVelocity());
        end;
      else
        local this1 = newphysob:GetPos();
        local translate = this1 - newlocpos;
        newphysob:SetPos(translate + oldlocpos, true);
      end;
    end;
  end;
  rag:Remove();
end

__deceptinfect_game_RagdollSystem.prototype.__class__ =  __deceptinfect_game_RagdollSystem
__deceptinfect_game_RagdollSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_RagdollSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_SlowMotionSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_SlowMotionSystem.prototype)
  __deceptinfect_game_SlowMotionSystem.super(self)
  return self
end
__deceptinfect_game_SlowMotionSystem.super = function(self) 
  self.slowMotionEndTrig = __tink_core_SignalTrigger.new();
  self.endval = 0.03;
  self.startval = 0.25;
  self.finishtime = 1.5;
  self.slowMotion = __deceptinfect_game_SlowMotionState.INACTIVE;
  __deceptinfect_ecswip_System.super(self);
  self.slowMotionEnd = self.slowMotionEndTrig;
end
_hxClasses["deceptinfect.game.SlowMotionSystem"] = __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__name__ = "deceptinfect.game.SlowMotionSystem"
__deceptinfect_game_SlowMotionSystem.prototype = _hx_e();
__deceptinfect_game_SlowMotionSystem.prototype.slowMotion= nil;
__deceptinfect_game_SlowMotionSystem.prototype.finishtime= nil;
__deceptinfect_game_SlowMotionSystem.prototype.startval= nil;
__deceptinfect_game_SlowMotionSystem.prototype.endval= nil;
__deceptinfect_game_SlowMotionSystem.prototype.slowMotionEnd= nil;
__deceptinfect_game_SlowMotionSystem.prototype.slowMotionEndTrig= nil;
__deceptinfect_game_SlowMotionSystem.prototype.init_server = function(self) 
  __deceptinfect_GameManager.stateChange:listen(_hx_bind(self,self.stateChange));
  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_WinSystem).newWinner:listen(_hx_bind(self,self.winChange));
end
__deceptinfect_game_SlowMotionSystem.prototype.winChange = function(self,x) 
  local tmp = x[1];
  if (tmp) == 0 or (tmp) == 1 then 
    _G.game.SetTimeScale(self.startval);
    self.slowMotion = __deceptinfect_game_SlowMotionState.ACTIVE(_G.RealTime() + self.finishtime, _G.RealTime());else end;
end
__deceptinfect_game_SlowMotionSystem.prototype.stateChange = function(self,x) 
  if (x[1] == 0) then 
    _G.game.ConsoleCommand("phys_timescale 1\n");
  end;
end
__deceptinfect_game_SlowMotionSystem.prototype.run_server = function(self) 
  local _g = self.slowMotion;
  if (_g[1] == 0) then 
    local _g1 = _g[2];
    local _g = _g[3];
    if (_G.RealTime() > _g1) then 
      self.slowMotion = __deceptinfect_game_SlowMotionState.FINISHED;
      _G.game.SetTimeScale(1);
      _G.game.ConsoleCommand("phys_timescale 0\n");
      local event = nil;
      self.slowMotionEndTrig.handlers:invoke(event);
      do return end;
    end;
    local lp = (_G.RealTime() - _g) / (_g1 - _g);
    local val = _G.Lerp(lp, self.startval, self.endval);
    _G.game.SetTimeScale(val);
  end;
end

__deceptinfect_game_SlowMotionSystem.prototype.__class__ =  __deceptinfect_game_SlowMotionSystem
__deceptinfect_game_SlowMotionSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SlowMotionSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_infection_systems_InfectionLookSystem.new = function() 
  local self = _hx_new(__deceptinfect_infection_systems_InfectionLookSystem.prototype)
  __deceptinfect_infection_systems_InfectionLookSystem.super(self)
  return self
end
__deceptinfect_infection_systems_InfectionLookSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.infection.systems.InfectionLookSystem"] = __deceptinfect_infection_systems_InfectionLookSystem
__deceptinfect_infection_systems_InfectionLookSystem.__name__ = "deceptinfect.infection.systems.InfectionLookSystem"
__deceptinfect_infection_systems_InfectionLookSystem.prototype = _hx_e();
__deceptinfect_infection_systems_InfectionLookSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 6;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 33;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g1[1] == 1) then 
        local _g1 = _g1[2].player;
        local x = _g1:GetEyeTrace().Entity;
        local _g2;
        if (_G.IsValid(x)) then 
          local _g = x.id;
          _g2 = (function() 
            local _hx_1
            if (_g == nil) then 
            _hx_1 = __haxe_ds_Option.None; else 
            _hx_1 = __haxe_ds_Option.Some(_g); end
            return _hx_1
          end )();
        else
          _g2 = __haxe_ds_Option.None;
        end;
        if (_g2[1] == 0) then 
          local _g2 = _g2[2];
          local _hx_tmp;
          local id = 24;
          if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g2] ~= nil) then 
            local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
            _hx_tmp = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g2]]);
          else
            _hx_tmp = __deceptinfect_ecswip_ComponentState.NONE;
          end;
          if (_hx_tmp[1] == 1) then 
            local t = _g.lookat:addTime(_g2);
            if (t > _g.threshold) then 
              local isinfected;
              local inf;
              local _g3 = _hx_tmp[2].infection;
              local inf1 = _g3[1];
              if (inf1) == 0 then 
                isinfected = false;
                inf = _g3[2][0];
              elseif (inf1) == 1 then 
                isinfected = true;
                inf = 100.0; end;
              __deceptinfect_infection_systems_InfectionLookSystem.infectioninfo:send(_hx_o({__fields__={target=true,isinfected=true,inf=true},target=__deceptinfect_ecswip_ComponentManager.getComponentForIDSure(33, _g2).player,isinfected=isinfected,inf=inf}), _g1, true);
              _g.lookat:setTime(_g2, 2.0);
            end;
          else
            _g.lookat:removeAllTimes();
          end;
        else
          _g.lookat:removeAllTimes();
        end;
      end;
    end;
  end;
end

__deceptinfect_infection_systems_InfectionLookSystem.prototype.__class__ =  __deceptinfect_infection_systems_InfectionLookSystem
__deceptinfect_infection_systems_InfectionLookSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_infection_systems_InfectionLookSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_ContaminationSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_ContaminationSystem.prototype)
  __deceptinfect_radiation_ContaminationSystem.super(self)
  return self
end
__deceptinfect_radiation_ContaminationSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.ContaminationSystem"] = __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__name__ = "deceptinfect.radiation.ContaminationSystem"
__deceptinfect_radiation_ContaminationSystem.prototype = _hx_e();
__deceptinfect_radiation_ContaminationSystem.prototype.run_server = function(self) 
  local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
  local __n = 0;
  local __lowest = __compArr[15][4];
  local __lowest_comp = 15;
  __n = __compArr[11][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 11;
  end;
  __n = __compArr[31][4];
  if (__n < __lowest) then 
    __lowest = __n;
    __lowest_comp = 31;
  end;
  local __lowestInt = __compArr[__lowest_comp][2];
  local _g = 1;
  local _g1 = __lowest;
  while (_g < _g1) do 
    _g = _g + 1;
    local __int_id = _g - 1;
    local vic = __lowestInt[__int_id];
    if (((__compArr[15][1][vic] ~= nil) and (__compArr[11][1][vic] ~= nil)) and (__compArr[31][1][vic] ~= nil)) then 
      local this1 = __compArr[15];
      local _g = this1[3][this1[1][vic]];
      local this1 = __compArr[11];
      local _g1 = this1[3][this1[1][vic]];
      local this1 = __compArr[31];
      local _g2 = this1[3][this1[1][vic]];
      local _g3 = _g2:get_pos();
      _g2:get_ang();
      local victimPos = _g3;
      local c_contamAccept = _g1;
      local c_rv = _g;
      local __compArr = __deceptinfect_ecswip_ComponentManager.components_3;
      local __n = 0;
      local __lowest = __compArr[22][4];
      local __lowest_comp = 22;
      __n = __compArr[21][4];
      if (__n < __lowest) then 
        __lowest = __n;
        __lowest_comp = 21;
      end;
      __n = __compArr[31][4];
      if (__n < __lowest) then 
        __lowest = __n;
        __lowest_comp = 31;
      end;
      local __lowestInt = __compArr[__lowest_comp][2];
      local _g = 1;
      local _g1 = __lowest;
      local _hx_continue_2 = false;
      while (_g < _g1) do repeat 
        _g = _g + 1;
        local __int_id = _g - 1;
        local produce = __lowestInt[__int_id];
        if (((__compArr[22][1][produce] ~= nil) and (__compArr[21][1][produce] ~= nil)) and (__compArr[31][1][produce] ~= nil)) then 
          local this1 = __compArr[22];
          local _g = this1[3][this1[1][produce]];
          local this1 = __compArr[21];
          local _g1 = this1[3][this1[1][produce]];
          local this1 = __compArr[31];
          local _g2 = this1[3][this1[1][produce]];
          local _g3 = _g2:get_pos();
          _g2:get_ang();
          local producePos = _g3;
          local c_contamProduce = _g1;
          local c_rs = _g;
          if (c_rs.attatch == vic) then 
            break;
          end;
          local dist = producePos:DistToSqr(victimPos);
          if (dist < c_contamProduce.dist) then 
            local time = c_contamAccept.contam_time:addTime(produce);
            if (time > c_contamProduce.check) then 
              c_contamAccept.contam_time:resetTime(produce);
              local randRoll = _G.math.random();
              if (randRoll < c_contamProduce.chance) then 
                local tmp = c_contamProduce.type[1];
                if (tmp) == 0 then 
                elseif (tmp) == 1 then 
                  if (c_rv.affectedtype.h[c_rs.type] ~= nil) then 
                    break;
                  end;
                elseif (tmp) == 2 then 
                  if (c_rv.affected.h[c_rs.base] ~= nil) then 
                    local _g = c_rs.state;
                    local _g1 = c_rs.lifetime;
                    if (_g[1] == 0) then 
                      if (_g[2][1] == 1) then 
                        if (_g1[1] == 0) then 
                          local time = _g1[2];
                          c_rs.state = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.FINITE(_G.CurTime() + time));
                        end;
                      end;
                    end;
                    break;
                  end; end;
                __haxe_Log.trace("Rolled successfully", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/ContaminationSystem.hx",lineNumber=45,className="deceptinfect.radiation.ContaminationSystem",methodName="run_server"}));
                local rad;
                local _g = c_contamProduce.nextoptions;
                local rad1 = _g[1];
                if (rad1) == 0 then 
                  local radtype = _g[2];
                  rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(radtype, vic, c_rs.base);
                elseif (rad1) == 1 then 
                  rad = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(c_rs.type, vic, c_rs.base);
                elseif (rad1) == 2 then 
                  local t = _g[2];
                  local rad1 = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):radSourceFromType(c_rs.type, vic, c_rs.base);
                  local c_rs = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(22, rad1);
                  c_rs.lifetime = t;
                  __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_radiation_RadSourceSystem):refreshTime(c_rs);
                  rad = rad1; end;
              end;
            end;
          else
            c_contamAccept.contam_time:removeTime(produce);
          end;
          do return end;
        end;until true
        if _hx_continue_2 then 
        _hx_continue_2 = false;
        break;
        end;
        
      end;
    end;
  end;
end

__deceptinfect_radiation_ContaminationSystem.prototype.__class__ =  __deceptinfect_radiation_ContaminationSystem
__deceptinfect_radiation_ContaminationSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_ContaminationSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_radiation_RadSourceSystem.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadSourceSystem.prototype)
  __deceptinfect_radiation_RadSourceSystem.super(self)
  return self
end
__deceptinfect_radiation_RadSourceSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.radiation.RadSourceSystem"] = __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__name__ = "deceptinfect.radiation.RadSourceSystem"
__deceptinfect_radiation_RadSourceSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_radiation_RadSourceSystem.prototype = _hx_e();
__deceptinfect_radiation_RadSourceSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 22;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      local _g1 = _g.state;
      if (_g1[1] == 0) then 
        local _g1 = _g1[2];
        if (_g1[1] == 1) then 
          if (_G.CurTime() > _g1[2]) then 
            local id = 15;
            local diID = _g.attatch;
            local _g1;
            if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
              local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
              _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
            else
              _g1 = __deceptinfect_ecswip_ComponentState.NONE;
            end;
            if (_g1[1] == 1) then 
              self:disengage(ent, _g.attatch);
            end;
            __deceptinfect_ecswip_ComponentManager.removeEntity(ent);
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_radiation_RadSourceSystem.prototype.radSourceFromType = function(self,x,attatch,base) 
  local ret = __deceptinfect_radiation_RadiationTypes.types.h[x];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return self:newRadSource(ret, attatch, base) end
end
__deceptinfect_radiation_RadSourceSystem.prototype.refreshTime = function(self,x) 
  local _g = x.lifetime;
  local tmp;
  local tmp1 = _g[1];
  if (tmp1) == 0 then 
    tmp = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.FINITE(_G.CurTime() + _g[2]));
  elseif (tmp1) == 1 then 
    tmp = __deceptinfect_radiation_RadSourceState.ACTIVE(__deceptinfect_radiation_RadTime.INFINITE); end;
  x.state = tmp;
end
__deceptinfect_radiation_RadSourceSystem.prototype.newRadSource = function(self,rso,attatch,base) 
  local rad = __deceptinfect_ecswip_ComponentManager.addEntity();
  local c_rs = __deceptinfect_radiation_RadSource.new(rso);
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[22], rad, c_rs);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = c_rs;
  _this.h[key] = rad;
  _this.k[key] = true;
  c_rs.base = (function() 
    local _hx_1
    if (base == nil) then 
    _hx_1 = rad; else 
    _hx_1 = base; end
    return _hx_1
  end )();
  self:attatchRad(rad, attatch);
  self:refreshTime(c_rs);
  local _g = rso.options;
  local tmp = _g[1];
  if (tmp) == 1 then 
    local x = __deceptinfect_radiation_RadiationProducer.new(_g[2]);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[19], rad, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = rad;
    _this.k[key] = true;
  elseif (tmp) == 2 then 
    local x = __deceptinfect_radiation_RadiationProducer.new(_g[2]);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[19], rad, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = rad;
    _this.k[key] = true;else end;
  local _g = rso.options;
  local tmp = _g[1];
  if (tmp) == 0 then 
    local x = __deceptinfect_radiation_ContaminationProducer.new(_g[2]);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[21], rad, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = rad;
    _this.k[key] = true;
  elseif (tmp) == 2 then 
    local x = __deceptinfect_radiation_ContaminationProducer.new(_g[3]);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[21], rad, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = rad;
    _this.k[key] = true;else end;
  do return rad end
end
__deceptinfect_radiation_RadSourceSystem.prototype.attatchRad = function(self,rad,vic) 
  local c_rs = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(22, rad);
  c_rs.attatch = vic;
  local c_rv;
  local id = 15;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    c_rv = _g[2];
  else
    __haxe_Log.trace("No radvictim found on victim", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/RadSourceSystem.hx",lineNumber=79,className="deceptinfect.radiation.RadSourceSystem",methodName="attatchRad"}));
    c_rv = __deceptinfect_radiation_RadVictim.new();
  end;
  local _this = c_rv.affected;
  local key = c_rs.base;
  _this.h[key] = true;
  local _this = c_rv.radiation;
  local key = rad;
  _this.h[key] = true;
  local _this = c_rv.affectedtype;
  local key = c_rs.type;
  if (rad == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = rad;
  end;
  local c_vir;
  local id = 31;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  local id = 34;
  local _g1;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g1 = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    c_vir = _g[2];
  else
    if (_g1[1] == 1) then 
      c_vir = __deceptinfect_ecswip_VirtualPosition.new(__deceptinfect_ecswip_ChooseVirPos.ENT(_g1[2].entity));
    else
      __haxe_Log.trace(Std.string("Could not attatch to ent ") .. Std.string(vic), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/radiation/RadSourceSystem.hx",lineNumber=91,className="deceptinfect.radiation.RadSourceSystem",methodName="attatchRad"}));
      do return end;
    end;
  end;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[31], rad, c_vir);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = c_vir;
  _this.h[key] = rad;
  _this.k[key] = true;
  local id = 16;
  local diID = c_rs.attatch;
  local result;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    result = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    result = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (result == __deceptinfect_ecswip_ComponentState.NONE) then 
    local x = __deceptinfect_statuses_Contaminated.new();
    local to = c_rs.attatch;
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[16], to, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = to;
    _this.k[key] = true;
  else
    result:slice(2);
  end;
end
__deceptinfect_radiation_RadSourceSystem.prototype.disengage = function(self,radsource,vic) 
  local c_rs = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(22, radsource);
  c_rs.attatch = nil;
  local id = 15;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][vic] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][vic]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    _g.radiation:remove(radsource);
    _g.affected:remove(c_rs.base);
    _g.affectedtype:remove(c_rs.type);
  end;
  __deceptinfect_ecswip_ComponentManager.removeComponent(31, radsource);
end

__deceptinfect_radiation_RadSourceSystem.prototype.__class__ =  __deceptinfect_radiation_RadSourceSystem
__deceptinfect_radiation_RadSourceSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_radiation_RadSourceSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_LowHealthSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_LowHealthSystem.prototype)
  __deceptinfect_game_LowHealthSystem.super(self)
  return self
end
__deceptinfect_game_LowHealthSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.LowHealthSystem"] = __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__name__ = "deceptinfect.game.LowHealthSystem"
__deceptinfect_game_LowHealthSystem.__interfaces__ = {__enumExtractor_EnumExtractor}
__deceptinfect_game_LowHealthSystem.prototype = _hx_e();
__deceptinfect_game_LowHealthSystem.prototype.run_server = function(self) 
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 33;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g.player:Health() < 25) then 
        local remap = (function(inMax,inMin,value) 
          do return function(outMin,outMax) 
            do return _G.math.Remap(value[0], inMin[0], inMax[0], outMin, outMax) end;
          end end;
        end)(_hx_tab_array({[0]=25}, 1), _hx_tab_array({[0]=1}, 1), _hx_tab_array({[0]=25 - _g.player:Health()}, 1));
        local id = 3;
        local result;
        if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
          local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
          result = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
        else
          result = __deceptinfect_ecswip_ComponentState.NONE;
        end;
        if (result == __deceptinfect_ecswip_ComponentState.NONE) then 
          local x = __deceptinfect_infection_InfVunerability.new(remap(1.0, 1.6), 99999);
          __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[3], ent, x);
          local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
          local key = x;
          _this.h[key] = ent;
          _this.k[key] = true;
        else
          result:slice(2);
        end;
      end;
    end;
  end;
end

__deceptinfect_game_LowHealthSystem.prototype.__class__ =  __deceptinfect_game_LowHealthSystem
__deceptinfect_game_LowHealthSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_LowHealthSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_items_ScannerSystem.new = function() 
  local self = _hx_new(__deceptinfect_items_ScannerSystem.prototype)
  __deceptinfect_items_ScannerSystem.super(self)
  return self
end
__deceptinfect_items_ScannerSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.items.ScannerSystem"] = __deceptinfect_items_ScannerSystem
__deceptinfect_items_ScannerSystem.__name__ = "deceptinfect.items.ScannerSystem"
__deceptinfect_items_ScannerSystem.prototype = _hx_e();
__deceptinfect_items_ScannerSystem.prototype.scan_target = function(self,scan,target) 
  local c_scan = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(37, scan);
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][target] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][target]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    c_scan.scanProgress:addTime(target);
  end;
end
__deceptinfect_items_ScannerSystem.prototype.get_reliability = function(self,scan,target) 
  local c_scan = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(37, scan);
  local id = 33;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][target] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][target]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local time = c_scan.scanProgress:getTime(target);
    local time = _G.math.Clamp(time, 0, c_scan.time);
    do return __haxe_ds_Option.Some(_G.math.Remap(time, 0, c_scan.time, c_scan.reliability_min, c_scan.reliability_max)) end;
  else
    do return __haxe_ds_Option.None end;
  end;
end
__deceptinfect_items_ScannerSystem.prototype.final_scan = function(self,scan,target) 
  local c_reliab = self:get_reliability(scan, target);
  local id = 30;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][target] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][target]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (c_reliab[1] == 0) then 
    local _g1 = c_reliab[2];
    local tmp = _g[1];
    if (tmp) == 0 then 
      if (_G.math.random() < _g1) then 
        __haxe_Log.trace("right: human", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/items/ScannerSystem.hx",lineNumber=43,className="deceptinfect.items.ScannerSystem",methodName="final_scan"}));
        do return __deceptinfect_items_ScanResult.HUMAN end;
      else
        __haxe_Log.trace("wrong: human", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/items/ScannerSystem.hx",lineNumber=46,className="deceptinfect.items.ScannerSystem",methodName="final_scan"}));
        do return __deceptinfect_items_ScanResult.INFECTED end;
      end;
    elseif (tmp) == 1 then 
      __haxe_Log.trace(_g1, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/items/ScannerSystem.hx",lineNumber=33,className="deceptinfect.items.ScannerSystem",methodName="final_scan"}));
      if (_G.math.random() < _g1) then 
        __haxe_Log.trace("right : infected", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/items/ScannerSystem.hx",lineNumber=35,className="deceptinfect.items.ScannerSystem",methodName="final_scan"}));
        do return __deceptinfect_items_ScanResult.INFECTED end;
      else
        __haxe_Log.trace("wrong : infected", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/items/ScannerSystem.hx",lineNumber=38,className="deceptinfect.items.ScannerSystem",methodName="final_scan"}));
        do return __deceptinfect_items_ScanResult.HUMAN end;
      end; end;
  else
    do return __deceptinfect_items_ScanResult.NO_SCAN end;
  end;
end

__deceptinfect_items_ScannerSystem.prototype.__class__ =  __deceptinfect_items_ScannerSystem
__deceptinfect_items_ScannerSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_items_ScannerSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game_ItemOwnerSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_ItemOwnerSystem.prototype)
  __deceptinfect_game_ItemOwnerSystem.super(self)
  return self
end
__deceptinfect_game_ItemOwnerSystem.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.ItemOwnerSystem"] = __deceptinfect_game_ItemOwnerSystem
__deceptinfect_game_ItemOwnerSystem.__name__ = "deceptinfect.game.ItemOwnerSystem"
__deceptinfect_game_ItemOwnerSystem.prototype = _hx_e();
__deceptinfect_game_ItemOwnerSystem.prototype.run_server = function(self) 
end

__deceptinfect_game_ItemOwnerSystem.prototype.__class__ =  __deceptinfect_game_ItemOwnerSystem
__deceptinfect_game_ItemOwnerSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_ItemOwnerSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_ecswip_SystemManager.new = {}
_hxClasses["deceptinfect.ecswip.SystemManager"] = __deceptinfect_ecswip_SystemManager
__deceptinfect_ecswip_SystemManager.__name__ = "deceptinfect.ecswip.SystemManager"
__deceptinfect_ecswip_SystemManager.make = function() 
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_infection_systems_InfectionSystem;
  _this.h[key] = __deceptinfect_infection_systems_InfectionSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_client_GeigerSystem;
  _this.h[key] = __deceptinfect_client_GeigerSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_radiation_RadiationSystem;
  _this.h[key] = __deceptinfect_radiation_RadiationSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_ecswip_GrabSystem;
  _this.h[key] = __deceptinfect_ecswip_GrabSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_ecswip_HiddenHealthSystem;
  _this.h[key] = __deceptinfect_ecswip_HiddenHealthSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_WinSystem;
  _this.h[key] = __deceptinfect_game_WinSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_BatterySystem;
  _this.h[key] = __deceptinfect_game_BatterySystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_SpawnSystem;
  _this.h[key] = __deceptinfect_game_SpawnSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_statuses_WalkthroughSystem;
  _this.h[key] = __deceptinfect_statuses_WalkthroughSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_NestSystem;
  _this.h[key] = __deceptinfect_game_NestSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_EvacSystem;
  _this.h[key] = __deceptinfect_game_EvacSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_RagdollSystem;
  _this.h[key] = __deceptinfect_game_RagdollSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_SlowMotionSystem;
  _this.h[key] = __deceptinfect_game_SlowMotionSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_infection_systems_InfectionLookSystem;
  _this.h[key] = __deceptinfect_infection_systems_InfectionLookSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_radiation_ContaminationSystem;
  _this.h[key] = __deceptinfect_radiation_ContaminationSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_radiation_RadSourceSystem;
  _this.h[key] = __deceptinfect_radiation_RadSourceSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_LowHealthSystem;
  _this.h[key] = __deceptinfect_game_LowHealthSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_items_ScannerSystem;
  _this.h[key] = __deceptinfect_items_ScannerSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_WeaponSystem;
  _this.h[key] = __deceptinfect_WeaponSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_game_ItemOwnerSystem;
  _this.h[key] = __deceptinfect_game_ItemOwnerSystem.new();
  _this.k[key] = true;
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  local key = __deceptinfect_ecswip_DummySystem;
  _this.h[key] = __deceptinfect_ecswip_DummySystem.new();
  _this.k[key] = true;
end
__deceptinfect_ecswip_SystemManager.getSystem = function(cls) 
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[cls] end;
end
__deceptinfect_ecswip_SystemManager.getSystem2 = function(cls) 
  local result = __deceptinfect_ecswip_SystemManager.getSystems.h[cls];
  if (__deceptinfect_ecswip_SystemManager.getSystems.h[cls] == nil) then 
    do return __haxe_ds_Option.None end;
  else
    do return __haxe_ds_Option.Some(result) end;
  end;
end
__deceptinfect_ecswip_SystemManager.getSystemExp = function(name) 
  local key = Type.resolveClass(name);
  do return __deceptinfect_ecswip_SystemManager.getSystems.h[key] end;
end
_hx_exports["getSystem"] = __deceptinfect_ecswip_SystemManager.getSystemExp
__deceptinfect_ecswip_SystemManager.runAllSystems = function() 
  __deceptinfect_Profiler.profile("start", true);
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    local name = clsSystem.__name__;
    __deceptinfect_Profiler.profile(name);
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:run();
  end;
  __deceptinfect_Profiler.resetprofile();
  __deceptinfect_Profiler.report();
end
__deceptinfect_ecswip_SystemManager.beginReporting = function() 
  __deceptinfect_Profiler.beginProfiling();
end
_hx_exports["systemReport"] = __deceptinfect_ecswip_SystemManager.beginReporting
__deceptinfect_ecswip_SystemManager.initAllSystems = function() 
  __deceptinfect_ecswip_SystemManager.make();
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_SystemManager.runSystems;
  while (_g < _g1.length) do 
    local clsSystem = _g1[_g];
    _g = _g + 1;
    __deceptinfect_ecswip_SystemManager.getSystems.h[clsSystem]:init();
  end;
end
__deceptinfect_ecswip_SystemManager.destroySystems = function() 
  local _this = __deceptinfect_ecswip_SystemManager.getSystems;
  _this.h = ({});
  _this.k = ({});
end

__deceptinfect_ecswip_VirtualPosition.new = function(choice) 
  local self = _hx_new(__deceptinfect_ecswip_VirtualPosition.prototype)
  __deceptinfect_ecswip_VirtualPosition.super(self,choice)
  return self
end
__deceptinfect_ecswip_VirtualPosition.super = function(self,choice) 
  __deceptinfect_ecswip_Component.super(self);
  local tmp = choice[1];
  if (tmp) == 0 then 
    self.ent = choice[2];
  elseif (tmp) == 1 then 
    self:set_pos(choice[2]);
    self:set_ang(choice[3]); end;
end
_hxClasses["deceptinfect.ecswip.VirtualPosition"] = __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__name__ = "deceptinfect.ecswip.VirtualPosition"
__deceptinfect_ecswip_VirtualPosition.prototype = _hx_e();
__deceptinfect_ecswip_VirtualPosition.prototype.pos= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.ang= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.ent= nil;
__deceptinfect_ecswip_VirtualPosition.prototype.get_pos = function(self) 
  if (self.ent == nil) then 
    do return self.pos end;
  else
    do return self.ent:GetPos() end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.get_ang = function(self) 
  if (self.ent == nil) then 
    do return self.ang end;
  else
    do return self.ent:GetAngles() end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.set_pos = function(self,set) 
  if (self.ent == nil) then 
    self.pos = set do return self.pos end;
  else
    self.ent:SetPos(set);
    do return set end;
  end;
end
__deceptinfect_ecswip_VirtualPosition.prototype.set_ang = function(self,set) 
  if (self.ent == nil) then 
    self.ang = set do return self.ang end;
  else
    self.ent:SetAngles(set);
    do return set end;
  end;
end

__deceptinfect_ecswip_VirtualPosition.prototype.__class__ =  __deceptinfect_ecswip_VirtualPosition
__deceptinfect_ecswip_VirtualPosition.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_ecswip_VirtualPosition.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.ecswip.ChooseVirPos"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ENT","REAL"},2)}
__deceptinfect_ecswip_ChooseVirPos = _hxClasses["deceptinfect.ecswip.ChooseVirPos"];
__deceptinfect_ecswip_ChooseVirPos.ENT = function(x) local _x = _hx_tab_array({[0]="ENT",0,x,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 3); return _x; end 
__deceptinfect_ecswip_ChooseVirPos.REAL = function(vec,ang) local _x = _hx_tab_array({[0]="REAL",1,vec,ang,__enum__=__deceptinfect_ecswip_ChooseVirPos}, 4); return _x; end 

__deceptinfect_ents_Di_barrel.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_barrel.prototype)
  __deceptinfect_ents_Di_barrel.super(self,x)
  return self
end
__deceptinfect_ents_Di_barrel.super = function(self,x) 
  self.blasted = false;
  self.health = 100.0;
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  self["self"] = x;
end
_hx_exports["null"]["di_barrel"] = __deceptinfect_ents_Di_barrel
_hxClasses["deceptinfect.ents.Di_barrel"] = __deceptinfect_ents_Di_barrel
__deceptinfect_ents_Di_barrel.__name__ = "deceptinfect.ents.Di_barrel"
__deceptinfect_ents_Di_barrel.prototype = _hx_e();
__deceptinfect_ents_Di_barrel.prototype.properties= nil;
__deceptinfect_ents_Di_barrel.prototype.actualBarrel= nil;
__deceptinfect_ents_Di_barrel.prototype.health= nil;
__deceptinfect_ents_Di_barrel.prototype.blasted= nil;
__deceptinfect_ents_Di_barrel.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/oildrum001_explosive.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  if (_G.IsValid(self["self"]:GetPhysicsObject())) then 
    self["self"]:GetPhysicsObject():Wake();
  end;
  self["self"]:SetUseType(_G.SIMPLE_USE);
end
__deceptinfect_ents_Di_barrel.prototype.Use = function(self,activator,caller,useType,value) 
  if (self["self"]:IsPlayerHolding() or not activator:IsPlayer()) then 
    do return end;
  end;
  local _activator = activator;
  _activator:PickupObject(self["self"]);
end
__deceptinfect_ents_Di_barrel.prototype.blast = function(self) 
  self.blasted = true;
  _G.util.BlastDamage(self["self"], self["self"], self["self"]:GetPos(), 300, 25);
  local puddle = _G.ents.Create("di_puddle");
  puddle:SetPos(self["self"]:GetPos());
  puddle:Spawn();
  self["self"]:Remove();
end
__deceptinfect_ents_Di_barrel.prototype.OnTakeDamage = function(self,damage) 
  self.health = self.health - damage:GetDamage();
  if (self.health <= 0) then 
    if (not self.blasted) then 
      self:blast();
    end;
  end;
end
__deceptinfect_ents_Di_barrel.prototype["self"]= nil;

__deceptinfect_ents_Di_barrel.prototype.__class__ =  __deceptinfect_ents_Di_barrel
__deceptinfect_ents_Di_barrel.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_barrel.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_battery.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_battery.prototype)
  __deceptinfect_ents_Di_battery.super(self,x)
  return self
end
__deceptinfect_ents_Di_battery.super = function(self,x) 
  self.added = false;
  self.id = nil;
  self.lastplayer = nil;
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  self["self"] = x;
end
_hx_exports["null"]["di_battery"] = __deceptinfect_ents_Di_battery
_hxClasses["deceptinfect.ents.Di_battery"] = __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__name__ = "deceptinfect.ents.Di_battery"
__deceptinfect_ents_Di_battery.prototype = _hx_e();
__deceptinfect_ents_Di_battery.prototype.properties= nil;
__deceptinfect_ents_Di_battery.prototype.lastplayer= nil;
__deceptinfect_ents_Di_battery.prototype.id= nil;
__deceptinfect_ents_Di_battery.prototype.added= nil;
__deceptinfect_ents_Di_battery.prototype.spawnLoc= nil;
__deceptinfect_ents_Di_battery.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/items/car_battery01.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  self["self"]:SetUseType(_G.SIMPLE_USE);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local ent = x;
  self.id = ent.id;
  local x = __deceptinfect_game_components_BatterySource.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[0], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_battery.prototype.Use = function(self,activator,caller,useType,value) 
  if (self["self"]:IsPlayerHolding() or not activator:IsPlayer()) then 
    do return end;
  end;
  local _activator = activator;
  _activator:PickupObject(self["self"]);
  self.lastplayer = _activator;
end
__deceptinfect_ents_Di_battery.prototype.Touch = function(self,entity) 
  if (self.added) then 
    do return end;
  end;
  local _g = entity.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    local result = __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_BatterySystem):addBattery(self.id, _g[2]);
    if (result) then 
      self.added = true;
      __haxe_Log.trace("Battery added :)", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ents/Di_battery.hx",lineNumber=65,className="deceptinfect.ents.Di_battery",methodName="Touch"}));
      self["self"]:Remove();
    end;
  end;
end
__deceptinfect_ents_Di_battery.prototype["self"]= nil;

__deceptinfect_ents_Di_battery.prototype.__class__ =  __deceptinfect_ents_Di_battery
__deceptinfect_ents_Di_battery.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_battery.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_charger.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_charger.prototype)
  __deceptinfect_ents_Di_charger.super(self,x)
  return self
end
__deceptinfect_ents_Di_charger.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  self["self"] = x;
end
_hx_exports["null"]["di_charger"] = __deceptinfect_ents_Di_charger
_hxClasses["deceptinfect.ents.Di_charger"] = __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__name__ = "deceptinfect.ents.Di_charger"
__deceptinfect_ents_Di_charger.prototype = _hx_e();
__deceptinfect_ents_Di_charger.prototype.properties= nil;
__deceptinfect_ents_Di_charger.prototype.id= nil;
__deceptinfect_ents_Di_charger.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  physob:EnableMotion(false);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local ent = x;
  self.id = ent.id;
  local x = __deceptinfect_game_components_BatteryAccepter.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[17], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_charger.prototype["self"]= nil;

__deceptinfect_ents_Di_charger.prototype.__class__ =  __deceptinfect_ents_Di_charger
__deceptinfect_ents_Di_charger.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_charger.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_evac_zone.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_evac_zone.prototype)
  __deceptinfect_ents_Di_evac_zone.super(self,x)
  return self
end
__deceptinfect_ents_Di_evac_zone.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_brush"});
  self["self"] = x;
end
_hx_exports["null"]["di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
_hxClasses["deceptinfect.ents.Di_evac_zone"] = __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__name__ = "deceptinfect.ents.Di_evac_zone"
__deceptinfect_ents_Di_evac_zone.prototype = _hx_e();
__deceptinfect_ents_Di_evac_zone.prototype.properties= nil;
__deceptinfect_ents_Di_evac_zone.prototype.id= nil;
__deceptinfect_ents_Di_evac_zone.prototype.Initialize = function(self) 
  local tmp = self["self"];
  local this1 = _G.Vector(-250, -250, -250);
  local this2 = _G.Vector(250, 250, 250);
  tmp:SetCollisionBounds(this1, this2);
  self["self"]:SetTrigger(true);
  self["self"]:SetCollisionGroup(_G.COLLISION_GROUP_PLAYER);
  self["self"]:UseTriggerBounds(true, 0);
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  local x = __deceptinfect_game_components_EvacZone.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[29], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_evac_zone.prototype.setPoints = function(self,minmax) 
  self["self"]:SetCollisionBoundsWS(minmax.mins, minmax.maxs);
end
__deceptinfect_ents_Di_evac_zone.prototype.StartTouch = function(self,ent) 
  local _g = ent.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    if (__deceptinfect_ecswip_ComponentManager.components_3[29][1][self.id] ~= nil) then 
      __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem):leave(_g[2], __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(29, self.id));
    end;
  end;
end
__deceptinfect_ents_Di_evac_zone.prototype.EndTouch = function(self,ent) 
  local _g = ent.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    if (__deceptinfect_ecswip_ComponentManager.components_3[29][1][self.id] ~= nil) then 
      __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem):leave(_g[2], __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(29, self.id));
    end;
  end;
end
__deceptinfect_ents_Di_evac_zone.prototype["self"]= nil;

__deceptinfect_ents_Di_evac_zone.prototype.__class__ =  __deceptinfect_ents_Di_evac_zone
__deceptinfect_ents_Di_evac_zone.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_evac_zone.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_flare.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_flare.prototype)
  __deceptinfect_ents_Di_flare.super(self,x)
  return self
end
__deceptinfect_ents_Di_flare.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  self["self"] = x;
end
_hx_exports["null"]["di_flare"] = __deceptinfect_ents_Di_flare
_hxClasses["deceptinfect.ents.Di_flare"] = __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__name__ = "deceptinfect.ents.Di_flare"
__deceptinfect_ents_Di_flare.prototype = _hx_e();
__deceptinfect_ents_Di_flare.prototype.properties= nil;
__deceptinfect_ents_Di_flare.prototype.id= nil;
__deceptinfect_ents_Di_flare.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  self["self"]:PhysicsInit(_G.SOLID_VPHYSICS);
  local physob = self["self"]:GetPhysicsObject();
  if (_G.IsValid(physob)) then 
    physob:Wake();
  end;
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  local x = __deceptinfect_game_components_FlareComponent.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[27], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_flare.prototype.Touch = function(self,entity) 
  local _g = entity.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_game_EvacSystem):addFlare(self.id, _g[2]);
  end;
end
__deceptinfect_ents_Di_flare.prototype.Use = function(self,activator,caller,useType,value) 
  if (self["self"]:IsPlayerHolding() or not activator:IsPlayer()) then 
    do return end;
  end;
  local _activator = activator;
  _activator:PickupObject(self["self"]);
end
__deceptinfect_ents_Di_flare.prototype["self"]= nil;

__deceptinfect_ents_Di_flare.prototype.__class__ =  __deceptinfect_ents_Di_flare
__deceptinfect_ents_Di_flare.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_flare.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_nest.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_nest.prototype)
  __deceptinfect_ents_Di_nest.super(self,x)
  return self
end
__deceptinfect_ents_Di_nest.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  self["self"] = x;
end
_hx_exports["null"]["di_nest"] = __deceptinfect_ents_Di_nest
_hxClasses["deceptinfect.ents.Di_nest"] = __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__name__ = "deceptinfect.ents.Di_nest"
__deceptinfect_ents_Di_nest.prototype = _hx_e();
__deceptinfect_ents_Di_nest.prototype.properties= nil;
__deceptinfect_ents_Di_nest.prototype.id= nil;
__deceptinfect_ents_Di_nest.prototype.Initialize = function(self) 
  self["self"]:SetModel("models/props_c17/chair02a.mdl");
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  local ent = x;
  self.id = ent.id;
  local x = __deceptinfect_game_components_NestComponent.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[28], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_nest.prototype.Think = function(self) 
  __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(28, self.id);
  local _g = 0;
  local _g1 = __deceptinfect_ecswip_ComponentManager.entities;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local ent = x;
    local id = 33;
    local _g;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 30;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][ent] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][ent]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 28;
    local diID = self.id;
    local _g2;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
    else
      _g2 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    if (_g[1] == 1) then 
      local _g = _g[2];
      if (_g2[1] == 1) then 
        if (_g2[2].nestState[1] == 1) then 
          self["self"]:SetPreventTransmit(_g.player, false);
        else
          local tmp = _g1[1];
          if (tmp) == 0 then 
            self["self"]:SetPreventTransmit(_g.player, true);
          elseif (tmp) == 1 then 
            self["self"]:SetPreventTransmit(_g.player, false); end;
        end;
      end;
    end;
  end;
  do return nil end
end
__deceptinfect_ents_Di_nest.prototype.TestCollision = function(self,startpos,delta,isbox,extents,mask) 
  do return _hx_o({__fields__={HitPos=true,Fraction=true},HitPos=startpos,Fraction=0}) end
end
__deceptinfect_ents_Di_nest.prototype["self"]= nil;

__deceptinfect_ents_Di_nest.prototype.__class__ =  __deceptinfect_ents_Di_nest
__deceptinfect_ents_Di_nest.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_nest.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_puddle.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_puddle.prototype)
  __deceptinfect_ents_Di_puddle.super(self,x)
  return self
end
__deceptinfect_ents_Di_puddle.super = function(self,x) 
  self.active = false;
  self.visualHeight = 1;
  self.collideHeight = 40;
  self.puddleState = __deceptinfect_ents_PuddleState.NOT_ACTIVE;
  self.rampUpTime = 120;
  self.finalInfection = 75.0;
  self.initalInfection = 15.0;
  self.size = 100;
  self.totalCooldown = 5.0;
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  self.cooldown = __haxe_ds_ObjectMap.new();
  self["self"] = x;
end
_hx_exports["null"]["di_puddle"] = __deceptinfect_ents_Di_puddle
_hxClasses["deceptinfect.ents.Di_puddle"] = __deceptinfect_ents_Di_puddle
__deceptinfect_ents_Di_puddle.__name__ = "deceptinfect.ents.Di_puddle"
__deceptinfect_ents_Di_puddle.prototype = _hx_e();
__deceptinfect_ents_Di_puddle.prototype.cooldown= nil;
__deceptinfect_ents_Di_puddle.prototype.properties= nil;
__deceptinfect_ents_Di_puddle.prototype.totalCooldown= nil;
__deceptinfect_ents_Di_puddle.prototype.size= nil;
__deceptinfect_ents_Di_puddle.prototype.initalInfection= nil;
__deceptinfect_ents_Di_puddle.prototype.finalInfection= nil;
__deceptinfect_ents_Di_puddle.prototype.rampUpTime= nil;
__deceptinfect_ents_Di_puddle.prototype.sizeVector= nil;
__deceptinfect_ents_Di_puddle.prototype.collideHeightVector= nil;
__deceptinfect_ents_Di_puddle.prototype.visualHeightVector= nil;
__deceptinfect_ents_Di_puddle.prototype.puddleState= nil;
__deceptinfect_ents_Di_puddle.prototype.collideHeight= nil;
__deceptinfect_ents_Di_puddle.prototype.visualHeight= nil;
__deceptinfect_ents_Di_puddle.prototype.active= nil;
__deceptinfect_ents_Di_puddle.prototype.id= nil;
__deceptinfect_ents_Di_puddle.prototype.Initialize = function(self) 
  local this1 = _G.Vector(self.size / 2, self.size / 2, 0);
  self.sizeVector = this1;
  local this1 = _G.Vector(0, 0, self.collideHeight);
  self.collideHeightVector = this1;
  local this1 = _G.Vector(0, 0, self.visualHeight);
  self.visualHeightVector = this1;
  self["self"]:SetModel("models/props_c17/oildrum001_explosive.mdl");
  self["self"]:PhysicsInit(_G.SOLID_BBOX);
  self["self"]:SetTrigger(true);
  if (_G.IsValid(self["self"]:GetPhysicsObject())) then 
    self["self"]:GetPhysicsObject():EnableMotion(false);
    self["self"]:GetPhysicsObject():Wake();
    self["self"]:SetCollisionGroup(_G.COLLISION_GROUP_DEBRIS);
  end;
  self["self"]:DropToFloor();
  local tmp = self["self"];
  local this1 = self.sizeVector;
  local tmp1 = -this1;
  local this1 = self.sizeVector;
  local otherVec = self.collideHeightVector;
  tmp:SetCollisionBounds(tmp1, this1 + otherVec);
  local x = self["self"];
  local this1 = x;
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(this1);
  local ent = this1;
  self.id = ent.id;
  local x = __deceptinfect_infection_components_GrabAccepter.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[9], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
  local grabaccepter = x;
  grabaccepter.canGrabBack = false;
  grabaccepter.overwhelm = 1;
  local x = __deceptinfect_infection_components_GrabbableProp.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[2], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
  local x = __deceptinfect_infection_InfectionComponent.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[24], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_puddle.prototype.Touch = function(self,ent) 
  local _g;
  if (_G.IsValid(ent)) then 
    local _g1 = ent.id;
    _g = (function() 
      local _hx_1
      if (_g1 == nil) then 
      _hx_1 = __haxe_ds_Option.None; else 
      _hx_1 = __haxe_ds_Option.Some(_g1); end
      return _hx_1
    end )();
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local _g = _g[2];
    local id = 24;
    local _g1;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g]]);
    else
      _g1 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local id = 33;
    local _g2;
    if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g] ~= nil) then 
      local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
      _g2 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g]]);
    else
      _g2 = __deceptinfect_ecswip_ComponentState.NONE;
    end;
    local _g = self.puddleState;
    if (_g1[1] == 1) then 
      local _g1 = _g1[2];
      local _g3 = _g1.infection;
      if (_g3[1] == 0) then 
        local _g3 = _g3[2];
        if (_g2[1] == 1) then 
          if (_g[1] == 1) then 
            local curCooldown = self.cooldown.h[_g1];
            if ((curCooldown == nil) or (_G.CurTime() > curCooldown)) then 
              _g3[0] = _g3[0] + _g[2][0];
              local this1 = self.cooldown;
              local value = _G.CurTime() + self.totalCooldown;
              local _this = this1;
              _this.h[_g1] = value;
              _this.k[_g1] = true;
            end;
          end;
        end;
      end;
    end;
  end;
end
__deceptinfect_ents_Di_puddle.prototype.Think = function(self) 
  local _g = self.puddleState;
  local tmp = _g[1];
  if (tmp) == 0 then 
    local inf = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(24, self.id);
    if (inf.infection[1] == 1) then 
      local v = self.initalInfection;
      local this1 = ({length = 1});
      local this1 = this1;
      local ret = this1;
      ret[0] = v;
      self.puddleState = __deceptinfect_ents_PuddleState.ACTIVE(ret, _G.CurTime());
      __haxe_Log.trace("puddle infected", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/ents/Di_puddle.hx",lineNumber=121,className="deceptinfect.ents.Di_puddle",methodName="Think"}));
    end;
  elseif (tmp) == 1 then 
    local currentInfection = _g[2];
    local initTime = _g[3];
    local cur = _G.CurTime();
    currentInfection[0] = _G.math.Remap(cur, initTime, initTime + self.rampUpTime, self.initalInfection, self.finalInfection); end;
  do return nil end
end
__deceptinfect_ents_Di_puddle.prototype["self"]= nil;

__deceptinfect_ents_Di_puddle.prototype.__class__ =  __deceptinfect_ents_Di_puddle
__deceptinfect_ents_Di_puddle.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_puddle.prototype,{__index={} or a.prototype})
_hxClasses["deceptinfect.ents.PuddleState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_ACTIVE","ACTIVE"},2)}
__deceptinfect_ents_PuddleState = _hxClasses["deceptinfect.ents.PuddleState"];
__deceptinfect_ents_PuddleState.NOT_ACTIVE = _hx_tab_array({[0]="NOT_ACTIVE",0,__enum__ = __deceptinfect_ents_PuddleState},2)

__deceptinfect_ents_PuddleState.ACTIVE = function(currentInfection,timeActivated) local _x = _hx_tab_array({[0]="ACTIVE",1,currentInfection,timeActivated,__enum__=__deceptinfect_ents_PuddleState}, 4); return _x; end 

__deceptinfect_ents_Di_ragdoll.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_ragdoll.prototype)
  __deceptinfect_ents_Di_ragdoll.super(self,x)
  return self
end
__deceptinfect_ents_Di_ragdoll.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_entity"});
  self["self"] = x;
end
_hx_exports["null"]["di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
_hxClasses["deceptinfect.ents.Di_ragdoll"] = __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__name__ = "deceptinfect.ents.Di_ragdoll"
__deceptinfect_ents_Di_ragdoll.prototype = _hx_e();
__deceptinfect_ents_Di_ragdoll.prototype.properties= nil;
__deceptinfect_ents_Di_ragdoll.prototype.owner= nil;
__deceptinfect_ents_Di_ragdoll.prototype.id= nil;
__deceptinfect_ents_Di_ragdoll.prototype.Initialize = function(self) 
  self["self"]:SetModel(self.owner:GetModel());
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  local x = __deceptinfect_game_components_Ragdoll.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[26], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
  local x = __deceptinfect_game_components_CleanupEnt.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[14], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_ents_Di_ragdoll.prototype["self"]= nil;

__deceptinfect_ents_Di_ragdoll.prototype.__class__ =  __deceptinfect_ents_Di_ragdoll
__deceptinfect_ents_Di_ragdoll.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_ragdoll.prototype,{__index={} or a.prototype})

__deceptinfect_ents_Di_spitball.new = function(x) 
  local self = _hx_new(__deceptinfect_ents_Di_spitball.prototype)
  __deceptinfect_ents_Di_spitball.super(self,x)
  return self
end
__deceptinfect_ents_Di_spitball.super = function(self,x) 
  self.properties = _hx_o({__fields__={Base=true},Base="base_anim"});
  self["self"] = x;
end
_hx_exports["null"]["di_spitball"] = __deceptinfect_ents_Di_spitball
_hxClasses["deceptinfect.ents.Di_spitball"] = __deceptinfect_ents_Di_spitball
__deceptinfect_ents_Di_spitball.__name__ = "deceptinfect.ents.Di_spitball"
__deceptinfect_ents_Di_spitball.prototype = _hx_e();
__deceptinfect_ents_Di_spitball.prototype.properties= nil;
__deceptinfect_ents_Di_spitball.prototype.removetime= nil;
__deceptinfect_ents_Di_spitball.prototype.hit= nil;
__deceptinfect_ents_Di_spitball.prototype.Initialize = function(self) 
  self["self"]:SetModel(__deceptinfect_ents_Di_spitball.model);
  self["self"]:SetMoveType(_G.MOVETYPE_FLYGRAVITY);
  self["self"]:SetCollisionGroup(_G.COLLISION_GROUP_WORLD);
  self["self"]:SetSolid(_G.SOLID_OBB);
  local _hx_1_bounds_mins, _hx_1_bounds_maxs = self["self"]:GetModelBounds();
  self["self"]:SetCollisionBounds(_hx_1_bounds_mins, _hx_1_bounds_maxs);
  self["self"]:SetGravity(0.4);
  self["self"]:SetTrigger(true);
  self.removetime = _G.CurTime() + 5;
  self.hit = false;
end
__deceptinfect_ents_Di_spitball.prototype.Touch = function(self,entity) 
  local _g;
  if (_G.IsValid(entity)) then 
    local _g1 = entity.id;
    _g = (function() 
      local _hx_1
      if (_g1 == nil) then 
      _hx_1 = __haxe_ds_Option.None; else 
      _hx_1 = __haxe_ds_Option.Some(_g1); end
      return _hx_1
    end )();
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local _g = _g[2];
    if (self.hit == false) then 
      local id = 24;
      local _g1;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][_g] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g1 = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][_g]]);
      else
        _g1 = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g1[1] == 1) then 
        local _g = _g1[2].infection;
        if (_g[1] == 0) then 
          local _g = _g[2];
          self.hit = true;
          _g[0] = _g[0] + 6;
          self["self"]:Remove();
        end;
      end;
    end;
  end;
  if (entity:IsWorld()) then 
    self["self"]:Remove();
  end;
end
__deceptinfect_ents_Di_spitball.prototype.Think = function(self) 
  self["self"]:NextThink(_G.CurTime() + 1);
  if (_G.CurTime() > self.removetime) then 
    self["self"]:Remove();
  end;
  do return nil end
end
__deceptinfect_ents_Di_spitball.prototype["self"]= nil;

__deceptinfect_ents_Di_spitball.prototype.__class__ =  __deceptinfect_ents_Di_spitball
__deceptinfect_ents_Di_spitball.__super__ = {} or a
setmetatable(__deceptinfect_ents_Di_spitball.prototype,{__index={} or a.prototype})

__deceptinfect_game_Net_RemoveClientEnt.new = function(who) 
  local self = _hx_new(__deceptinfect_game_Net_RemoveClientEnt.prototype)
  __deceptinfect_game_Net_RemoveClientEnt.super(self,who)
  return self
end
__deceptinfect_game_Net_RemoveClientEnt.super = function(self,who) 
  self.__uid = _hx_bit.bor(_hx_bit.lshift(__hxbit_Serializer.SEQ,24),(function() 
  local _hx_obj = __hxbit_Serializer;
  local _hx_fld = 'UID';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
end
_hxClasses["deceptinfect.game.Net_RemoveClientEnt"] = __deceptinfect_game_Net_RemoveClientEnt
__deceptinfect_game_Net_RemoveClientEnt.__name__ = "deceptinfect.game.Net_RemoveClientEnt"
__deceptinfect_game_Net_RemoveClientEnt.__interfaces__ = {__hxbit_Serializable}
__deceptinfect_game_Net_RemoveClientEnt.prototype = _hx_e();
__deceptinfect_game_Net_RemoveClientEnt.prototype.who= nil;
__deceptinfect_game_Net_RemoveClientEnt.prototype.__uid= nil;
__deceptinfect_game_Net_RemoveClientEnt.prototype.getCLID = function(self) 
  do return __deceptinfect_game_Net_RemoveClientEnt.__clid end
end
__deceptinfect_game_Net_RemoveClientEnt.prototype.serialize = function(self,__ctx) 
  local v = self.who;
  if ((v >= 0) and (v < 128)) then 
    __ctx.out.b:push(v);
  else
    __ctx.out.b:push(128);
    __ctx.out:addInt32(v);
  end;
end

__deceptinfect_game_Net_RemoveClientEnt.prototype.__class__ =  __deceptinfect_game_Net_RemoveClientEnt

__deceptinfect_game_ClientTranslateSystem.new = function() 
  local self = _hx_new(__deceptinfect_game_ClientTranslateSystem.prototype)
  __deceptinfect_game_ClientTranslateSystem.super(self)
  return self
end
__deceptinfect_game_ClientTranslateSystem.super = function(self) 
  self.idToPlayer = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.ClientTranslateSystem"] = __deceptinfect_game_ClientTranslateSystem
__deceptinfect_game_ClientTranslateSystem.__name__ = "deceptinfect.game.ClientTranslateSystem"
__deceptinfect_game_ClientTranslateSystem.prototype = _hx_e();
__deceptinfect_game_ClientTranslateSystem.prototype.idToPlayer= nil;
__deceptinfect_game_ClientTranslateSystem.prototype.removeEntityForClient = function(self,client,id) 
  __deceptinfect_game_ClientTranslateSystem.net_removeClientEnt2:send(__deceptinfect_game_Net_RemoveClientEnt.new(5), client);
  __deceptinfect_game_ClientTranslateSystem.net_removeClientEnt:send(_hx_o({__fields__={id=true},id=id}), client);
end
__deceptinfect_game_ClientTranslateSystem.prototype.removeEntity = function(self,id) 
  local idMap = self.idToPlayer:iterator();
  while (idMap:hasNext()) do 
    local idMap = idMap:next();
    local player = idMap:keys();
    while (player:hasNext()) do 
      local player = player:next();
      self:removeEntityForClient(player, id);
    end;
  end;
end

__deceptinfect_game_ClientTranslateSystem.prototype.__class__ =  __deceptinfect_game_ClientTranslateSystem
__deceptinfect_game_ClientTranslateSystem.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_ClientTranslateSystem.prototype,{__index=__deceptinfect_ecswip_System.prototype})

__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.new = {}
_hxClasses["deceptinfect.game._EvacSystem.INT_EvacState_Impl_"] = __deceptinfect_game__EvacSystem_INT_EvacState_Impl_
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.__name__ = "deceptinfect.game._EvacSystem.INT_EvacState_Impl_"
__deceptinfect_game__EvacSystem_INT_EvacState_Impl_.from = function(x) 
  local tmp = x[1];
  if (tmp) == 0 then 
    do return 0 end;
  elseif (tmp) == 1 then 
    do return 1 end;
  elseif (tmp) == 2 then 
    do return 2 end; end;
end
_hxClasses["deceptinfect.game.SlowMotionState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","INACTIVE","FINISHED"},3)}
__deceptinfect_game_SlowMotionState = _hxClasses["deceptinfect.game.SlowMotionState"];
__deceptinfect_game_SlowMotionState.ACTIVE = function(target,start) local _x = _hx_tab_array({[0]="ACTIVE",0,target,start,__enum__=__deceptinfect_game_SlowMotionState}, 4); return _x; end 
__deceptinfect_game_SlowMotionState.INACTIVE = _hx_tab_array({[0]="INACTIVE",1,__enum__ = __deceptinfect_game_SlowMotionState},2)

__deceptinfect_game_SlowMotionState.FINISHED = _hx_tab_array({[0]="FINISHED",2,__enum__ = __deceptinfect_game_SlowMotionState},2)

_hxClasses["deceptinfect.game.SpawnClaim"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UNCLAIMED","CLAIMED"},2)}
__deceptinfect_game_SpawnClaim = _hxClasses["deceptinfect.game.SpawnClaim"];
__deceptinfect_game_SpawnClaim.UNCLAIMED = _hx_tab_array({[0]="UNCLAIMED",0,__enum__ = __deceptinfect_game_SpawnClaim},2)

__deceptinfect_game_SpawnClaim.CLAIMED = function(e) local _x = _hx_tab_array({[0]="CLAIMED",1,e,__enum__=__deceptinfect_game_SpawnClaim}, 3); return _x; end 

__deceptinfect_game_Spawn.new = function(parent,vec) 
  local self = _hx_new(__deceptinfect_game_Spawn.prototype)
  __deceptinfect_game_Spawn.super(self,parent,vec)
  return self
end
__deceptinfect_game_Spawn.super = function(self,parent,vec) 
  self.distOrder = _hx_tab_array({}, 0);
  self.distStore = __haxe_ds_IntMap.new();
  self.claimed = __deceptinfect_game_SpawnClaim.UNCLAIMED;
  self.vec = vec;
  self.parent = parent;
  self.id = parent.spawns.length;
end
_hxClasses["deceptinfect.game.Spawn"] = __deceptinfect_game_Spawn
__deceptinfect_game_Spawn.__name__ = "deceptinfect.game.Spawn"
__deceptinfect_game_Spawn.prototype = _hx_e();
__deceptinfect_game_Spawn.prototype.vec= nil;
__deceptinfect_game_Spawn.prototype.parent= nil;
__deceptinfect_game_Spawn.prototype.id= nil;
__deceptinfect_game_Spawn.prototype.claimed= nil;
__deceptinfect_game_Spawn.prototype.distStore= nil;
__deceptinfect_game_Spawn.prototype.distOrder= nil;
__deceptinfect_game_Spawn.prototype.maxdistID= nil;
__deceptinfect_game_Spawn.prototype.mindistID= nil;
__deceptinfect_game_Spawn.prototype.getRandomFarAwaySpawn = function(self) 
  do return _G.math.random(_G.math.floor(self.distOrder.length / 2), self.distOrder.length - 1) end
end
__deceptinfect_game_Spawn.prototype.getRandomSpawnMinDistAway = function(self,curSpawns) 
  local total = __haxe_ds_IntMap.new();
  local min = _G.math.huge;
  local max = -1.0;
  local _g = 0;
  while (_g < curSpawns.length) do 
    local _sp = curSpawns[_g];
    _g = _g + 1;
    local sp = self.parent.spawns[_sp];
    __haxe_Log.trace(Std.string(Std.string(Std.string("id : ") .. Std.string(_sp)) .. Std.string(" stuff : ")) .. Std.string(((function() 
      local _hx_1
      if (sp.distStore == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = sp.distStore:toString(); end
      return _hx_1
    end )())), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=73,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    local this1 = sp.distStore;
    local _g_keys = this1:keys();
    while (_g_keys:hasNext()) do 
      local key = _g_keys:next();
      local _g1_value = this1:get(key);
      __haxe_Log.trace(Std.string(Std.string(Std.string(Std.string(Std.string("my id : ") .. Std.string(_sp)) .. Std.string(" thier id : ")) .. Std.string(key)) .. Std.string(" boogie : ")) .. Std.string(Std.string(self.parent.spawns[key].claimed)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=76,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
      if (self.parent.spawns[key].claimed == __deceptinfect_game_SpawnClaim.UNCLAIMED) then 
        local ret = total.h[key];
        if (ret == __haxe_ds_IntMap.tnull) then 
          ret = nil;
        end;
        __haxe_Log.trace(ret, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=78,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        local ret = total.h[key];
        if (ret == __haxe_ds_IntMap.tnull) then 
          ret = nil;
        end;
        local _g = ret;
        local v = (function() 
          local _hx_2
          if (_g == nil) then 
          _hx_2 = _g1_value; else 
          _hx_2 = _g + _g1_value; end
          return _hx_2
        end )();
        if (v == nil) then 
          total.h[key] = __haxe_ds_IntMap.tnull;
        else
          total.h[key] = v;
        end;
        local ret = total.h[key];
        if (ret == __haxe_ds_IntMap.tnull) then 
          ret = nil;
        end;
        if (ret > max) then 
          local ret = total.h[key];
          if (ret == __haxe_ds_IntMap.tnull) then 
            ret = nil;
          end;
          local max1 = ret;
          max = max1;
          __haxe_Log.trace(Std.string("new max ") .. Std.string(max1), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=87,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        end;
        local ret = total.h[key];
        if (ret == __haxe_ds_IntMap.tnull) then 
          ret = nil;
        end;
        if (ret < min) then 
          local ret = total.h[key];
          if (ret == __haxe_ds_IntMap.tnull) then 
            ret = nil;
          end;
          local min1 = ret;
          min = min1;
          __haxe_Log.trace(Std.string("new min ") .. Std.string(min1), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=91,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
        end;
      end;
    end;
  end;
  local mindist = ((max - min) * 0.4) + min;
  local luckydraw = _hx_tab_array({}, 0);
  local map = total;
  local _g1_keys = map:keys();
  while (_g1_keys:hasNext()) do 
    local key = _g1_keys:next();
    local _g2_value = map:get(key);
    if (_g2_value > mindist) then 
      luckydraw:push(key);
    end;
  end;
  if (luckydraw.length == 0) then 
    __haxe_Log.trace("Not enough spawns far away enough to use algo.", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=104,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    local id = self:getRandomFarAwaySpawn();
    __haxe_Log.trace(Std.string("id chosen ") .. Std.string(id), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=106,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    do return self.parent.spawns[id] end;
  else
    local index = _G.math.random(0, luckydraw.length - 1);
    local id = luckydraw[index];
    __haxe_Log.trace(luckydraw, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=112,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    __haxe_Log.trace(Std.string(Std.string(Std.string("id chosen ") .. Std.string(id)) .. Std.string(" index ")) .. Std.string(index), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=113,className="deceptinfect.game.Spawn",methodName="getRandomSpawnMinDistAway"}));
    do return self.parent.spawns[id] end;
  end;
end
__deceptinfect_game_Spawn.prototype.getRandomSpawns = function(self,noSpawns) 
  local rtn = _hx_tab_array({}, 0);
  local curspawns = _hx_tab_array({[0]=self.id}, 1);
  local _g = 0;
  while (_g < noSpawns) do 
    _g = _g + 1;
    local i = _g - 1;
    __haxe_Log.trace(curspawns, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=123,className="deceptinfect.game.Spawn",methodName="getRandomSpawns"}));
    local newspawn = self:getRandomSpawnMinDistAway(curspawns);
    curspawns[i] = newspawn.id;
    rtn[i] = newspawn;
  end;
  do return rtn end
end
__deceptinfect_game_Spawn.prototype.spawn = function(self,ent) 
  self.claimed = __deceptinfect_game_SpawnClaim.CLAIMED(ent);
  ent:SetPos(self.vec);
  ent:Spawn();
  local _g = ent.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    local _g = _g[2];
    __haxe_Log.trace(_g, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=137,className="deceptinfect.game.Spawn",methodName="spawn"}));
    local x = __deceptinfect_game_components_Spawned.new(self);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[39], _g, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = _g;
    _this.k[key] = true;
  end;
end
__deceptinfect_game_Spawn.prototype.calculateDist = function(self,other) 
  local dist = self.vec:DistToSqr(other.vec);
  local key = other.id;
  local _this = self.distStore;
  if (dist == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = dist;
  end;
  local tmp;
  if (self.maxdistID ~= nil) then 
    local ret = self.distStore.h[self.maxdistID];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    tmp = dist > ret;
  else
    tmp = true;
  end;
  if (tmp) then 
    self.maxdistID = other.id;
  end;
  local tmp;
  if (self.mindistID ~= nil) then 
    local ret = self.distStore.h[self.mindistID];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    tmp = dist < ret;
  else
    tmp = true;
  end;
  if (tmp) then 
    self.mindistID = other.id;
  end;
  self:insertNewSortedDist(other);
end
__deceptinfect_game_Spawn.prototype.insertNewSortedDist = function(self,other) 
  local i = 0;
  local insert = self.distOrder.length - 1;
  local _g = 0;
  local _g1 = self.distOrder;
  while (_g < _g1.length) do 
    local spawnid = _g1[_g];
    _g = _g + 1;
    local ret = self.distStore.h[spawnid];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local ret1 = self.distStore.h[other.id];
    if (ret1 == __haxe_ds_IntMap.tnull) then 
      ret1 = nil;
    end;
    if (ret > ret1) then 
      insert = i;
      break;
    end;
    i = i + 1;
  end;
  self.distOrder[insert] = other.id;
end

__deceptinfect_game_Spawn.prototype.__class__ =  __deceptinfect_game_Spawn

__deceptinfect_game_BoundsSpawn.new = function(parent,vec,bounds) 
  local self = _hx_new(__deceptinfect_game_BoundsSpawn.prototype)
  __deceptinfect_game_BoundsSpawn.super(self,parent,vec,bounds)
  return self
end
__deceptinfect_game_BoundsSpawn.super = function(self,parent,vec,bounds) 
  __deceptinfect_game_Spawn.super(self,parent,vec);
  self.bounds = bounds;
end
_hxClasses["deceptinfect.game.BoundsSpawn"] = __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__name__ = "deceptinfect.game.BoundsSpawn"
__deceptinfect_game_BoundsSpawn.prototype = _hx_e();
__deceptinfect_game_BoundsSpawn.prototype.bounds= nil;
__deceptinfect_game_BoundsSpawn.prototype.spawn = function(self,ent) 
  self.claimed = __deceptinfect_game_SpawnClaim.CLAIMED(ent);
  ent:SetPos(self.vec);
  ent:Spawn();
  local _g = ent.id;
  local _g = (function() 
    local _hx_1
    if (_g == nil) then 
    _hx_1 = __haxe_ds_Option.None; else 
    _hx_1 = __haxe_ds_Option.Some(_g); end
    return _hx_1
  end )();
  if (_g[1] == 0) then 
    local _g = _g[2];
    __haxe_Log.trace(_g, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystem.hx",lineNumber=194,className="deceptinfect.game.BoundsSpawn",methodName="spawn"}));
    local x = __deceptinfect_game_components_Spawned.new(self);
    __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[39], _g, x);
    local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
    local key = x;
    _this.h[key] = _g;
    _this.k[key] = true;
  end;
  ent:SetCollisionBoundsWS(self.bounds.mins, self.bounds.maxs);
end

__deceptinfect_game_BoundsSpawn.prototype.__class__ =  __deceptinfect_game_BoundsSpawn
__deceptinfect_game_BoundsSpawn.__super__ = __deceptinfect_game_Spawn
setmetatable(__deceptinfect_game_BoundsSpawn.prototype,{__index=__deceptinfect_game_Spawn.prototype})

__deceptinfect_game_SpawnSystemNav.new = function() 
  local self = _hx_new(__deceptinfect_game_SpawnSystemNav.prototype)
  __deceptinfect_game_SpawnSystemNav.super(self)
  return self
end
__deceptinfect_game_SpawnSystemNav.super = function(self) 
  __deceptinfect_ecswip_System.super(self);
end
_hxClasses["deceptinfect.game.SpawnSystemNav"] = __deceptinfect_game_SpawnSystemNav
__deceptinfect_game_SpawnSystemNav.__name__ = "deceptinfect.game.SpawnSystemNav"
__deceptinfect_game_SpawnSystemNav.spawnItem = function(x) 
  local navmesh = _G.navmesh.GetNearestNavArea(x:GetPos(), nil, nil, nil, true);
  local processing = __haxe_ds_GenericStack.new();
  if (_G.IsValid(navmesh)) then 
    __deceptinfect_game_SpawnSystemNav.playerPos = x:GetPos();
    LuaLambda.iter(navmesh:GetAdjacentAreas(), _hx_bind(processing,processing.add));
    while (processing.head ~= nil) do 
      local k = processing.head;
      local nav;
      if (k == nil) then 
        nav = nil;
      else
        processing.head = k.next;
        nav = k.elt;
      end;
      if (__deceptinfect_game_SpawnSystemNav.filterAreas(nav)) then 
        if (__deceptinfect_game_SpawnSystemNav.filterAreaResults(nav)) then 
          __deceptinfect_game_SpawnSystemNav.result:push(nav);
        end;
        LuaLambda.iter(nav:GetAdjacentAreas(), _hx_bind(processing,processing.add));
      end;
    end;
    if (__deceptinfect_game_SpawnSystemNav.result.length == 0) then 
      _G.error(__haxe_Exception.thrown("bad"),0);
    end;
    local x1 = __deceptinfect_game_SpawnSystemNav.result;
    local point = x1[_G.math.random(0, x1.length - 1)]:GetRandomPoint();
    local ent = _G.ents.Create("di_battery");
    local _hx_1_bounds_mins, _hx_1_bounds_maxs = ent:GetCollisionBounds();
    local this1 = _G.Vector(0, 0, 50);
    local otherVec = this1;
    local traceResult = point + otherVec;
    local this1 = _G.Vector(0, 0, 49);
    local otherVec = this1;
    local traceResult = _G.util.TraceHull(_hx_o({__fields__={ignoreworld=true,start=true,endpos=true,mins=true,maxs=true},ignoreworld=false,start=traceResult,endpos=point + otherVec,mins=_hx_1_bounds_mins,maxs=_hx_1_bounds_maxs}));
    if (traceResult.Hit) then 
      __haxe_Log.trace("failed", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystemNav.hx",lineNumber=55,className="deceptinfect.game.SpawnSystemNav",methodName="spawnItem"}));
    else
      local this1 = _G.Vector(0, 0, 50);
      local otherVec = this1;
      ent:SetPos(point + otherVec);
      ent:Spawn();
      local c_itemOwner = __deceptinfect_game_components_ItemOwner.new(_G.CurTime(), x.id);
      __haxe_Log.trace(x.id, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystemNav.hx",lineNumber=60,className="deceptinfect.game.SpawnSystemNav",methodName="spawnItem"}));
      local to = ent.id;
      __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[32], to, c_itemOwner);
      local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
      local key = c_itemOwner;
      _this.h[key] = to;
      _this.k[key] = true;
      __haxe_Log.trace("success!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/deceptinfect/game/SpawnSystemNav.hx",lineNumber=62,className="deceptinfect.game.SpawnSystemNav",methodName="spawnItem"}));
    end;
  end;
end
_hx_exports["spawnItem"] = __deceptinfect_game_SpawnSystemNav.spawnItem
__deceptinfect_game_SpawnSystemNav.filterAreas = function(nav) 
  local this1 = __deceptinfect_game_SpawnSystemNav.areasCovered;
  local key = nav:GetID();
  if (this1.h[key] ~= nil) then 
    do return false end;
  else
    local this1 = __deceptinfect_game_SpawnSystemNav.areasCovered;
    local key = nav:GetID();
    local _this = this1;
    _this.h[key] = true;
    do return true end;
  end;
end
__deceptinfect_game_SpawnSystemNav.filterAreaResults = function(nav) 
  do return nav:GetCorner(1):DistToSqr(__deceptinfect_game_SpawnSystemNav.playerPos) > __deceptinfect_game_SpawnSystemNav.distanceMin end;
end
__deceptinfect_game_SpawnSystemNav.prototype = _hx_e();

__deceptinfect_game_SpawnSystemNav.prototype.__class__ =  __deceptinfect_game_SpawnSystemNav
__deceptinfect_game_SpawnSystemNav.__super__ = __deceptinfect_ecswip_System
setmetatable(__deceptinfect_game_SpawnSystemNav.prototype,{__index=__deceptinfect_ecswip_System.prototype})
_hxClasses["deceptinfect.game.Win"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WIN_HUMAN","WIN_INF","DRAW"},3)}
__deceptinfect_game_Win = _hxClasses["deceptinfect.game.Win"];
__deceptinfect_game_Win.WIN_HUMAN = _hx_tab_array({[0]="WIN_HUMAN",0,__enum__ = __deceptinfect_game_Win},2)

__deceptinfect_game_Win.WIN_INF = _hx_tab_array({[0]="WIN_INF",1,__enum__ = __deceptinfect_game_Win},2)

__deceptinfect_game_Win.DRAW = _hx_tab_array({[0]="DRAW",2,__enum__ = __deceptinfect_game_Win},2)


__deceptinfect_game_components_AliveComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_components_AliveComponent.prototype)
  __deceptinfect_game_components_AliveComponent.super(self)
  return self
end
__deceptinfect_game_components_AliveComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.AliveComponent"] = __deceptinfect_game_components_AliveComponent
__deceptinfect_game_components_AliveComponent.__name__ = "deceptinfect.game.components.AliveComponent"
__deceptinfect_game_components_AliveComponent.prototype = _hx_e();

__deceptinfect_game_components_AliveComponent.prototype.__class__ =  __deceptinfect_game_components_AliveComponent
__deceptinfect_game_components_AliveComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_AliveComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_BatteryAccepter.new = function() 
  local self = _hx_new(__deceptinfect_game_components_BatteryAccepter.prototype)
  __deceptinfect_game_components_BatteryAccepter.super(self)
  return self
end
__deceptinfect_game_components_BatteryAccepter.super = function(self) 
  self.status = __deceptinfect_game_components_AccepterStatus.AVALIABLE;
  self.satisfy = 100.0;
  self.decay = 0.01;
  self.charge = 0.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.BatteryAccepter"] = __deceptinfect_game_components_BatteryAccepter
__deceptinfect_game_components_BatteryAccepter.__name__ = "deceptinfect.game.components.BatteryAccepter"
__deceptinfect_game_components_BatteryAccepter.prototype = _hx_e();
__deceptinfect_game_components_BatteryAccepter.prototype.charge= nil;
__deceptinfect_game_components_BatteryAccepter.prototype.decay= nil;
__deceptinfect_game_components_BatteryAccepter.prototype.satisfy= nil;
__deceptinfect_game_components_BatteryAccepter.prototype.status= nil;

__deceptinfect_game_components_BatteryAccepter.prototype.__class__ =  __deceptinfect_game_components_BatteryAccepter
__deceptinfect_game_components_BatteryAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_BatteryAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.AccepterStatus"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="AVALIABLE","SATISIFED","UNAVALIABLE"},3)}
__deceptinfect_game_components_AccepterStatus = _hxClasses["deceptinfect.game.components.AccepterStatus"];
__deceptinfect_game_components_AccepterStatus.AVALIABLE = _hx_tab_array({[0]="AVALIABLE",0,__enum__ = __deceptinfect_game_components_AccepterStatus},2)

__deceptinfect_game_components_AccepterStatus.SATISIFED = _hx_tab_array({[0]="SATISIFED",1,__enum__ = __deceptinfect_game_components_AccepterStatus},2)

__deceptinfect_game_components_AccepterStatus.UNAVALIABLE = function(x) local _x = _hx_tab_array({[0]="UNAVALIABLE",2,x,__enum__=__deceptinfect_game_components_AccepterStatus}, 3); return _x; end 

__deceptinfect_game_components_BatterySource.new = function() 
  local self = _hx_new(__deceptinfect_game_components_BatterySource.prototype)
  __deceptinfect_game_components_BatterySource.super(self)
  return self
end
__deceptinfect_game_components_BatterySource.super = function(self) 
  self.charge = 25.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.BatterySource"] = __deceptinfect_game_components_BatterySource
__deceptinfect_game_components_BatterySource.__name__ = "deceptinfect.game.components.BatterySource"
__deceptinfect_game_components_BatterySource.prototype = _hx_e();
__deceptinfect_game_components_BatterySource.prototype.charge= nil;

__deceptinfect_game_components_BatterySource.prototype.__class__ =  __deceptinfect_game_components_BatterySource
__deceptinfect_game_components_BatterySource.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_BatterySource.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_CleanupEnt.new = function() 
  local self = _hx_new(__deceptinfect_game_components_CleanupEnt.prototype)
  __deceptinfect_game_components_CleanupEnt.super(self)
  return self
end
__deceptinfect_game_components_CleanupEnt.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.CleanupEnt"] = __deceptinfect_game_components_CleanupEnt
__deceptinfect_game_components_CleanupEnt.__name__ = "deceptinfect.game.components.CleanupEnt"
__deceptinfect_game_components_CleanupEnt.prototype = _hx_e();

__deceptinfect_game_components_CleanupEnt.prototype.__class__ =  __deceptinfect_game_components_CleanupEnt
__deceptinfect_game_components_CleanupEnt.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_CleanupEnt.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_EvacZone.new = function() 
  local self = _hx_new(__deceptinfect_game_components_EvacZone.prototype)
  __deceptinfect_game_components_EvacZone.super(self)
  return self
end
__deceptinfect_game_components_EvacZone.super = function(self) 
  self.state = __deceptinfect_game_components_EvacState.NOT_ACTIVE;
  self.leavetime = 25.0;
  self.arrivetime = 10.0;
  self.blocked = __haxe_ds_IntMap.new();
  self.in_zone = __haxe_ds_IntMap.new();
  self.touched = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.EvacZone"] = __deceptinfect_game_components_EvacZone
__deceptinfect_game_components_EvacZone.__name__ = "deceptinfect.game.components.EvacZone"
__deceptinfect_game_components_EvacZone.prototype = _hx_e();
__deceptinfect_game_components_EvacZone.prototype.touched= nil;
__deceptinfect_game_components_EvacZone.prototype.in_zone= nil;
__deceptinfect_game_components_EvacZone.prototype.blocked= nil;
__deceptinfect_game_components_EvacZone.prototype.arrivetime= nil;
__deceptinfect_game_components_EvacZone.prototype.leavetime= nil;
__deceptinfect_game_components_EvacZone.prototype.state= nil;

__deceptinfect_game_components_EvacZone.prototype.__class__ =  __deceptinfect_game_components_EvacZone
__deceptinfect_game_components_EvacZone.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_EvacZone.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.EvacState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_ACTIVE","ARRIVING","LEAVING"},3)}
__deceptinfect_game_components_EvacState = _hxClasses["deceptinfect.game.components.EvacState"];
__deceptinfect_game_components_EvacState.NOT_ACTIVE = _hx_tab_array({[0]="NOT_ACTIVE",0,__enum__ = __deceptinfect_game_components_EvacState},2)

__deceptinfect_game_components_EvacState.ARRIVING = function(time) local _x = _hx_tab_array({[0]="ARRIVING",1,time,__enum__=__deceptinfect_game_components_EvacState}, 3); return _x; end 
__deceptinfect_game_components_EvacState.LEAVING = function(time) local _x = _hx_tab_array({[0]="LEAVING",2,time,__enum__=__deceptinfect_game_components_EvacState}, 3); return _x; end 

__deceptinfect_game_components_FlareComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_components_FlareComponent.prototype)
  __deceptinfect_game_components_FlareComponent.super(self)
  return self
end
__deceptinfect_game_components_FlareComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.FlareComponent"] = __deceptinfect_game_components_FlareComponent
__deceptinfect_game_components_FlareComponent.__name__ = "deceptinfect.game.components.FlareComponent"
__deceptinfect_game_components_FlareComponent.prototype = _hx_e();

__deceptinfect_game_components_FlareComponent.prototype.__class__ =  __deceptinfect_game_components_FlareComponent
__deceptinfect_game_components_FlareComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_FlareComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_InEvacZone.new = function() 
  local self = _hx_new(__deceptinfect_game_components_InEvacZone.prototype)
  __deceptinfect_game_components_InEvacZone.super(self)
  return self
end
__deceptinfect_game_components_InEvacZone.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.InEvacZone"] = __deceptinfect_game_components_InEvacZone
__deceptinfect_game_components_InEvacZone.__name__ = "deceptinfect.game.components.InEvacZone"
__deceptinfect_game_components_InEvacZone.prototype = _hx_e();

__deceptinfect_game_components_InEvacZone.prototype.__class__ =  __deceptinfect_game_components_InEvacZone
__deceptinfect_game_components_InEvacZone.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_InEvacZone.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.Stage"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="STAGE","FINAL"},2)}
__deceptinfect_game_components_Stage = _hxClasses["deceptinfect.game.components.Stage"];
__deceptinfect_game_components_Stage.STAGE = function(time,dist,x) local _x = _hx_tab_array({[0]="STAGE",0,time,dist,x,__enum__=__deceptinfect_game_components_Stage}, 5); return _x; end 
__deceptinfect_game_components_Stage.FINAL = function(time,dist) local _x = _hx_tab_array({[0]="FINAL",1,time,dist,__enum__=__deceptinfect_game_components_Stage}, 4); return _x; end 

__deceptinfect_game_components_ItemOwner.new = function(initalTime,owner) 
  local self = _hx_new(__deceptinfect_game_components_ItemOwner.prototype)
  __deceptinfect_game_components_ItemOwner.super(self,initalTime,owner)
  return self
end
__deceptinfect_game_components_ItemOwner.super = function(self,initalTime,owner) 
  self.itemRevealState = __deceptinfect_game_components_ItemOwnerState.NOT_REVEALED(__deceptinfect_game_components_ItemOwner.stageProgression);
  __deceptinfect_ecswip_Component.super(self);
  self.initalSpawnTime = initalTime;
  self.owner = owner;
end
_hxClasses["deceptinfect.game.components.ItemOwner"] = __deceptinfect_game_components_ItemOwner
__deceptinfect_game_components_ItemOwner.__name__ = "deceptinfect.game.components.ItemOwner"
__deceptinfect_game_components_ItemOwner.prototype = _hx_e();
__deceptinfect_game_components_ItemOwner.prototype.owner= nil;
__deceptinfect_game_components_ItemOwner.prototype.itemRevealState= nil;
__deceptinfect_game_components_ItemOwner.prototype.initalSpawnTime= nil;

__deceptinfect_game_components_ItemOwner.prototype.__class__ =  __deceptinfect_game_components_ItemOwner
__deceptinfect_game_components_ItemOwner.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_ItemOwner.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.ItemOwnerState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_REVEALED","REVEALED"},2)}
__deceptinfect_game_components_ItemOwnerState = _hxClasses["deceptinfect.game.components.ItemOwnerState"];
__deceptinfect_game_components_ItemOwnerState.NOT_REVEALED = function(stage) local _x = _hx_tab_array({[0]="NOT_REVEALED",0,stage,__enum__=__deceptinfect_game_components_ItemOwnerState}, 3); return _x; end 
__deceptinfect_game_components_ItemOwnerState.REVEALED = function(reveal) local _x = _hx_tab_array({[0]="REVEALED",1,reveal,__enum__=__deceptinfect_game_components_ItemOwnerState}, 3); return _x; end 
_hxClasses["deceptinfect.game.components.RevealState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HIDDEN","VISIBLE"},2)}
__deceptinfect_game_components_RevealState = _hxClasses["deceptinfect.game.components.RevealState"];
__deceptinfect_game_components_RevealState.HIDDEN = function(dist) local _x = _hx_tab_array({[0]="HIDDEN",0,dist,__enum__=__deceptinfect_game_components_RevealState}, 3); return _x; end 
__deceptinfect_game_components_RevealState.VISIBLE = function(dist) local _x = _hx_tab_array({[0]="VISIBLE",1,dist,__enum__=__deceptinfect_game_components_RevealState}, 3); return _x; end 

__deceptinfect_game_components_KeepRestart.new = function() 
  local self = _hx_new(__deceptinfect_game_components_KeepRestart.prototype)
  __deceptinfect_game_components_KeepRestart.super(self)
  return self
end
__deceptinfect_game_components_KeepRestart.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.KeepRestart"] = __deceptinfect_game_components_KeepRestart
__deceptinfect_game_components_KeepRestart.__name__ = "deceptinfect.game.components.KeepRestart"
__deceptinfect_game_components_KeepRestart.prototype = _hx_e();

__deceptinfect_game_components_KeepRestart.prototype.__class__ =  __deceptinfect_game_components_KeepRestart
__deceptinfect_game_components_KeepRestart.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_KeepRestart.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_NestComponent.new = function() 
  local self = _hx_new(__deceptinfect_game_components_NestComponent.prototype)
  __deceptinfect_game_components_NestComponent.super(self)
  return self
end
__deceptinfect_game_components_NestComponent.super = function(self) 
  self.rate_threshold_max = 75.0;
  self.rate_threshold_min = 10.0;
  self.radius_end = __deceptinfect__DistSquared_DistSquared_Impl_.convert(1000);
  self.radius_start = __deceptinfect__DistSquared_DistSquared_Impl_.convert(200);
  self.rate_start = 5.0;
  self.rate_end = 7.0;
  self.health = 1000.0;
  self.nestState = __deceptinfect_game_components_NestState.INVISIBLE;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.NestComponent"] = __deceptinfect_game_components_NestComponent
__deceptinfect_game_components_NestComponent.__name__ = "deceptinfect.game.components.NestComponent"
__deceptinfect_game_components_NestComponent.prototype = _hx_e();
__deceptinfect_game_components_NestComponent.prototype.nestState= nil;
__deceptinfect_game_components_NestComponent.prototype.health= nil;
__deceptinfect_game_components_NestComponent.prototype.rate_end= nil;
__deceptinfect_game_components_NestComponent.prototype.rate_start= nil;
__deceptinfect_game_components_NestComponent.prototype.radius_start= nil;
__deceptinfect_game_components_NestComponent.prototype.radius_end= nil;
__deceptinfect_game_components_NestComponent.prototype.rate_threshold_min= nil;
__deceptinfect_game_components_NestComponent.prototype.rate_threshold_max= nil;

__deceptinfect_game_components_NestComponent.prototype.__class__ =  __deceptinfect_game_components_NestComponent
__deceptinfect_game_components_NestComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_NestComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.NestState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="INVISIBLE","VISIBLE","DEAD"},3)}
__deceptinfect_game_components_NestState = _hxClasses["deceptinfect.game.components.NestState"];
__deceptinfect_game_components_NestState.INVISIBLE = _hx_tab_array({[0]="INVISIBLE",0,__enum__ = __deceptinfect_game_components_NestState},2)

__deceptinfect_game_components_NestState.VISIBLE = _hx_tab_array({[0]="VISIBLE",1,__enum__ = __deceptinfect_game_components_NestState},2)

__deceptinfect_game_components_NestState.DEAD = _hx_tab_array({[0]="DEAD",2,__enum__ = __deceptinfect_game_components_NestState},2)


__deceptinfect_game_components_RagInfo.new = function() 
  local self = _hx_new(__deceptinfect_game_components_RagInfo.prototype)
  __deceptinfect_game_components_RagInfo.super(self)
  return self
end
__deceptinfect_game_components_RagInfo.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.RagInfo"] = __deceptinfect_game_components_RagInfo
__deceptinfect_game_components_RagInfo.__name__ = "deceptinfect.game.components.RagInfo"
__deceptinfect_game_components_RagInfo.prototype = _hx_e();
__deceptinfect_game_components_RagInfo.prototype.name= nil;
__deceptinfect_game_components_RagInfo.prototype.inf= nil;
__deceptinfect_game_components_RagInfo.prototype.attacker= nil;
__deceptinfect_game_components_RagInfo.prototype.cause= nil;

__deceptinfect_game_components_RagInfo.prototype.__class__ =  __deceptinfect_game_components_RagInfo
__deceptinfect_game_components_RagInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_RagInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_Ragdoll.new = function() 
  local self = _hx_new(__deceptinfect_game_components_Ragdoll.prototype)
  __deceptinfect_game_components_Ragdoll.super(self)
  return self
end
__deceptinfect_game_components_Ragdoll.super = function(self) 
  self.reveal = __deceptinfect_game_components_RagdollReveal.NO_REVEAL;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.Ragdoll"] = __deceptinfect_game_components_Ragdoll
__deceptinfect_game_components_Ragdoll.__name__ = "deceptinfect.game.components.Ragdoll"
__deceptinfect_game_components_Ragdoll.prototype = _hx_e();
__deceptinfect_game_components_Ragdoll.prototype.reveal= nil;
__deceptinfect_game_components_Ragdoll.prototype.owner= nil;

__deceptinfect_game_components_Ragdoll.prototype.__class__ =  __deceptinfect_game_components_Ragdoll
__deceptinfect_game_components_Ragdoll.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_Ragdoll.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.game.components.RagdollReveal"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="WAIT","REVEAL","NO_REVEAL"},3)}
__deceptinfect_game_components_RagdollReveal = _hxClasses["deceptinfect.game.components.RagdollReveal"];
__deceptinfect_game_components_RagdollReveal.WAIT = function(time) local _x = _hx_tab_array({[0]="WAIT",0,time,__enum__=__deceptinfect_game_components_RagdollReveal}, 3); return _x; end 
__deceptinfect_game_components_RagdollReveal.REVEAL = _hx_tab_array({[0]="REVEAL",1,__enum__ = __deceptinfect_game_components_RagdollReveal},2)

__deceptinfect_game_components_RagdollReveal.NO_REVEAL = _hx_tab_array({[0]="NO_REVEAL",2,__enum__ = __deceptinfect_game_components_RagdollReveal},2)


__deceptinfect_game_components_Spawned.new = function(sp) 
  local self = _hx_new(__deceptinfect_game_components_Spawned.prototype)
  __deceptinfect_game_components_Spawned.super(self,sp)
  return self
end
__deceptinfect_game_components_Spawned.super = function(self,sp) 
  __deceptinfect_ecswip_Component.super(self);
  self.spawn = sp;
end
_hxClasses["deceptinfect.game.components.Spawned"] = __deceptinfect_game_components_Spawned
__deceptinfect_game_components_Spawned.__name__ = "deceptinfect.game.components.Spawned"
__deceptinfect_game_components_Spawned.prototype = _hx_e();
__deceptinfect_game_components_Spawned.prototype.spawn= nil;

__deceptinfect_game_components_Spawned.prototype.__class__ =  __deceptinfect_game_components_Spawned
__deceptinfect_game_components_Spawned.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_Spawned.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_StatInfo.new = function() 
  local self = _hx_new(__deceptinfect_game_components_StatInfo.prototype)
  __deceptinfect_game_components_StatInfo.super(self)
  return self
end
__deceptinfect_game_components_StatInfo.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.StatInfo"] = __deceptinfect_game_components_StatInfo
__deceptinfect_game_components_StatInfo.__name__ = "deceptinfect.game.components.StatInfo"
__deceptinfect_game_components_StatInfo.prototype = _hx_e();
__deceptinfect_game_components_StatInfo.prototype.name= nil;
__deceptinfect_game_components_StatInfo.prototype.inf= nil;
__deceptinfect_game_components_StatInfo.prototype.health= nil;

__deceptinfect_game_components_StatInfo.prototype.__class__ =  __deceptinfect_game_components_StatInfo
__deceptinfect_game_components_StatInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_StatInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_game_components_Statue.new = function() 
  local self = _hx_new(__deceptinfect_game_components_Statue.prototype)
  __deceptinfect_game_components_Statue.super(self)
  return self
end
__deceptinfect_game_components_Statue.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.game.components.Statue"] = __deceptinfect_game_components_Statue
__deceptinfect_game_components_Statue.__name__ = "deceptinfect.game.components.Statue"
__deceptinfect_game_components_Statue.prototype = _hx_e();

__deceptinfect_game_components_Statue.prototype.__class__ =  __deceptinfect_game_components_Statue
__deceptinfect_game_components_Statue.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_game_components_Statue.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfVunerability.new = function(v,removeTime) 
  local self = _hx_new(__deceptinfect_infection_InfVunerability.prototype)
  __deceptinfect_infection_InfVunerability.super(self,v,removeTime)
  return self
end
__deceptinfect_infection_InfVunerability.super = function(self,v,removeTime) 
  __deceptinfect_ecswip_Component.super(self);
  self.vun = v;
  _G.CurTime();
end
_hxClasses["deceptinfect.infection.InfVunerability"] = __deceptinfect_infection_InfVunerability
__deceptinfect_infection_InfVunerability.__name__ = "deceptinfect.infection.InfVunerability"
__deceptinfect_infection_InfVunerability.prototype = _hx_e();
__deceptinfect_infection_InfVunerability.prototype.vun= nil;
__deceptinfect_infection_InfVunerability.prototype.removeTime= nil;

__deceptinfect_infection_InfVunerability.prototype.__class__ =  __deceptinfect_infection_InfVunerability
__deceptinfect_infection_InfVunerability.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfVunerability.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectedComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectedComponent.prototype)
  __deceptinfect_infection_InfectedComponent.super(self)
  return self
end
__deceptinfect_infection_InfectedComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectedComponent"] = __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__name__ = "deceptinfect.infection.InfectedComponent"
__deceptinfect_infection_InfectedComponent.prototype = _hx_e();

__deceptinfect_infection_InfectedComponent.prototype.__class__ =  __deceptinfect_infection_InfectedComponent
__deceptinfect_infection_InfectedComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectedComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_InfectionComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionComponent.prototype)
  __deceptinfect_infection_InfectionComponent.super(self)
  return self
end
__deceptinfect_infection_InfectionComponent.super = function(self) 
  self.acceptingInfection = __deceptinfect_infection_AcceptingInfection.ACCEPTING;
  self.baseInfection = __deceptinfect_infection_BaseInfection.USING_GLOBAL;
  self.rate = 1;
  local this1 = ({length = 1});
  local this1 = this1;
  local ret = this1;
  ret[0] = 0.0;
  self.infection = __deceptinfect_infection_INF_STATE.NOT_INFECTED(ret);
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectionComponent"] = __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__name__ = "deceptinfect.infection.InfectionComponent"
__deceptinfect_infection_InfectionComponent.prototype = _hx_e();
__deceptinfect_infection_InfectionComponent.prototype.infection= nil;
__deceptinfect_infection_InfectionComponent.prototype.rate= nil;
__deceptinfect_infection_InfectionComponent.prototype.player= nil;
__deceptinfect_infection_InfectionComponent.prototype.baseInfection= nil;
__deceptinfect_infection_InfectionComponent.prototype.onInfected= nil;
__deceptinfect_infection_InfectionComponent.prototype.acceptingInfection= nil;
__deceptinfect_infection_InfectionComponent.prototype.getInfValue = function(self) 
  local _g = self.infection;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return _g[2][0] end;
  elseif (tmp) == 1 then 
    do return 100 end; end;
end
__deceptinfect_infection_InfectionComponent.prototype.set_infection = function(self,x) 
  self.infection = x do return self.infection end
end

__deceptinfect_infection_InfectionComponent.prototype.__class__ =  __deceptinfect_infection_InfectionComponent
__deceptinfect_infection_InfectionComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectionComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.infection.AcceptingInfection"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACCEPTING","REJECTING"},2)}
__deceptinfect_infection_AcceptingInfection = _hxClasses["deceptinfect.infection.AcceptingInfection"];
__deceptinfect_infection_AcceptingInfection.ACCEPTING = _hx_tab_array({[0]="ACCEPTING",0,__enum__ = __deceptinfect_infection_AcceptingInfection},2)

__deceptinfect_infection_AcceptingInfection.REJECTING = _hx_tab_array({[0]="REJECTING",1,__enum__ = __deceptinfect_infection_AcceptingInfection},2)

_hxClasses["deceptinfect.infection.BaseInfection"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_USING","USING_GLOBAL","USING_STATIC"},3)}
__deceptinfect_infection_BaseInfection = _hxClasses["deceptinfect.infection.BaseInfection"];
__deceptinfect_infection_BaseInfection.NOT_USING = _hx_tab_array({[0]="NOT_USING",0,__enum__ = __deceptinfect_infection_BaseInfection},2)

__deceptinfect_infection_BaseInfection.USING_GLOBAL = _hx_tab_array({[0]="USING_GLOBAL",1,__enum__ = __deceptinfect_infection_BaseInfection},2)

__deceptinfect_infection_BaseInfection.USING_STATIC = function(rate) local _x = _hx_tab_array({[0]="USING_STATIC",2,rate,__enum__=__deceptinfect_infection_BaseInfection}, 3); return _x; end 
_hxClasses["deceptinfect.infection.INF_STATE"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_INFECTED","INFECTED"},2)}
__deceptinfect_infection_INF_STATE = _hxClasses["deceptinfect.infection.INF_STATE"];
__deceptinfect_infection_INF_STATE.NOT_INFECTED = function(inf) local _x = _hx_tab_array({[0]="NOT_INFECTED",0,inf,__enum__=__deceptinfect_infection_INF_STATE}, 3); return _x; end 
__deceptinfect_infection_INF_STATE.INFECTED = _hx_tab_array({[0]="INFECTED",1,__enum__ = __deceptinfect_infection_INF_STATE},2)


__deceptinfect_infection_InfectionLookInfo.new = function() 
  local self = _hx_new(__deceptinfect_infection_InfectionLookInfo.prototype)
  __deceptinfect_infection_InfectionLookInfo.super(self)
  return self
end
__deceptinfect_infection_InfectionLookInfo.super = function(self) 
  self.threshold = 2.0;
  self.lookat = __deceptinfect_util_TimeKeep.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.InfectionLookInfo"] = __deceptinfect_infection_InfectionLookInfo
__deceptinfect_infection_InfectionLookInfo.__name__ = "deceptinfect.infection.InfectionLookInfo"
__deceptinfect_infection_InfectionLookInfo.prototype = _hx_e();
__deceptinfect_infection_InfectionLookInfo.prototype.lookat= nil;
__deceptinfect_infection_InfectionLookInfo.prototype.threshold= nil;

__deceptinfect_infection_InfectionLookInfo.prototype.__class__ =  __deceptinfect_infection_InfectionLookInfo
__deceptinfect_infection_InfectionLookInfo.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_InfectionLookInfo.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_RateComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_RateComponent.prototype)
  __deceptinfect_infection_RateComponent.super(self)
  return self
end
__deceptinfect_infection_RateComponent.super = function(self) 
  self.multipliers = __haxe_ds_IntMap.new();
  self.addRates = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.RateComponent"] = __deceptinfect_infection_RateComponent
__deceptinfect_infection_RateComponent.__name__ = "deceptinfect.infection.RateComponent"
__deceptinfect_infection_RateComponent.prototype = _hx_e();
__deceptinfect_infection_RateComponent.prototype.addRates= nil;
__deceptinfect_infection_RateComponent.prototype.multipliers= nil;

__deceptinfect_infection_RateComponent.prototype.__class__ =  __deceptinfect_infection_RateComponent
__deceptinfect_infection_RateComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_RateComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_components_DamagePenaltyHidden.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_DamagePenaltyHidden.prototype)
  __deceptinfect_infection_components_DamagePenaltyHidden.super(self)
  return self
end
__deceptinfect_infection_components_DamagePenaltyHidden.super = function(self) 
  self.damagepenalty = 0.55;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.DamagePenaltyHidden"] = __deceptinfect_infection_components_DamagePenaltyHidden
__deceptinfect_infection_components_DamagePenaltyHidden.__name__ = "deceptinfect.infection.components.DamagePenaltyHidden"
__deceptinfect_infection_components_DamagePenaltyHidden.prototype = _hx_e();
__deceptinfect_infection_components_DamagePenaltyHidden.prototype.damagepenalty= nil;

__deceptinfect_infection_components_DamagePenaltyHidden.prototype.__class__ =  __deceptinfect_infection_components_DamagePenaltyHidden
__deceptinfect_infection_components_DamagePenaltyHidden.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_DamagePenaltyHidden.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_components_GrabAccepter.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_GrabAccepter.prototype)
  __deceptinfect_infection_components_GrabAccepter.super(self)
  return self
end
__deceptinfect_infection_components_GrabAccepter.super = function(self) 
  self.overwhelm = 2;
  self.canGrabBack = true;
  self.targeting = __haxe_ds_ObjectMap.new();
  local this1 = ({length = 1});
  local this1 = this1;
  local ret = this1;
  ret[0] = 0;
  self.grabState = __deceptinfect_infection_components_GrabAcceptState.NOT_GRABBED(ret);
  self.grabAttacker = __haxe_ds_ObjectMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.GrabAccepter"] = __deceptinfect_infection_components_GrabAccepter
__deceptinfect_infection_components_GrabAccepter.__name__ = "deceptinfect.infection.components.GrabAccepter"
__deceptinfect_infection_components_GrabAccepter.prototype = _hx_e();
__deceptinfect_infection_components_GrabAccepter.prototype.grabAttacker= nil;
__deceptinfect_infection_components_GrabAccepter.prototype.grabState= nil;
__deceptinfect_infection_components_GrabAccepter.prototype.targeting= nil;
__deceptinfect_infection_components_GrabAccepter.prototype.canGrabBack= nil;
__deceptinfect_infection_components_GrabAccepter.prototype.overwhelm= nil;

__deceptinfect_infection_components_GrabAccepter.prototype.__class__ =  __deceptinfect_infection_components_GrabAccepter
__deceptinfect_infection_components_GrabAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_GrabAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.infection.components.GrabAcceptState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_GRABBED","GRABBED","UNAVALIABLE"},3)}
__deceptinfect_infection_components_GrabAcceptState = _hxClasses["deceptinfect.infection.components.GrabAcceptState"];
__deceptinfect_infection_components_GrabAcceptState.NOT_GRABBED = function(numTargeting) local _x = _hx_tab_array({[0]="NOT_GRABBED",0,numTargeting,__enum__=__deceptinfect_infection_components_GrabAcceptState}, 3); return _x; end 
__deceptinfect_infection_components_GrabAcceptState.GRABBED = _hx_tab_array({[0]="GRABBED",1,__enum__ = __deceptinfect_infection_components_GrabAcceptState},2)

__deceptinfect_infection_components_GrabAcceptState.UNAVALIABLE = function(x) local _x = _hx_tab_array({[0]="UNAVALIABLE",2,x,__enum__=__deceptinfect_infection_components_GrabAcceptState}, 3); return _x; end 

__deceptinfect_infection_components_GrabDraw.new = function(ent1,ent2) 
  local self = _hx_new(__deceptinfect_infection_components_GrabDraw.prototype)
  __deceptinfect_infection_components_GrabDraw.super(self,ent1,ent2)
  return self
end
__deceptinfect_infection_components_GrabDraw.super = function(self,ent1,ent2) 
  __deceptinfect_ecswip_Component.super(self);
  self.ent1 = ent1;
  self.ent2 = ent2;
end
_hxClasses["deceptinfect.infection.components.GrabDraw"] = __deceptinfect_infection_components_GrabDraw
__deceptinfect_infection_components_GrabDraw.__name__ = "deceptinfect.infection.components.GrabDraw"
__deceptinfect_infection_components_GrabDraw.prototype = _hx_e();
__deceptinfect_infection_components_GrabDraw.prototype.ent1= nil;
__deceptinfect_infection_components_GrabDraw.prototype.ent2= nil;

__deceptinfect_infection_components_GrabDraw.prototype.__class__ =  __deceptinfect_infection_components_GrabDraw
__deceptinfect_infection_components_GrabDraw.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_GrabDraw.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_components_GrabProducer.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_GrabProducer.prototype)
  __deceptinfect_infection_components_GrabProducer.super(self)
  return self
end
__deceptinfect_infection_components_GrabProducer.super = function(self) 
  self.grabState = __deceptinfect_infection_components_GrabProduceState.READY(__deceptinfect_infection_components_SearchingState.NOT_SEARCHING);
  self.grabDist = 70;
  self.nextCooldown = 5;
  self.threshold = 50.0;
  self.damage = 0.0;
  self.grabindex = 0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.GrabProducer"] = __deceptinfect_infection_components_GrabProducer
__deceptinfect_infection_components_GrabProducer.__name__ = "deceptinfect.infection.components.GrabProducer"
__deceptinfect_infection_components_GrabProducer.prototype = _hx_e();
__deceptinfect_infection_components_GrabProducer.prototype.grabindex= nil;
__deceptinfect_infection_components_GrabProducer.prototype.damage= nil;
__deceptinfect_infection_components_GrabProducer.prototype.threshold= nil;
__deceptinfect_infection_components_GrabProducer.prototype.nextCooldown= nil;
__deceptinfect_infection_components_GrabProducer.prototype.grabDist= nil;
__deceptinfect_infection_components_GrabProducer.prototype.grabState= nil;
__deceptinfect_infection_components_GrabProducer.prototype.set_grabState = function(self,newGrabState) 
  local _g = self.grabState;
  if (_g[1] == 0) then 
    local _g = _g[2];
    if (_g[1] == 2) then 
      local _g = _g[2];
      if (newGrabState[1] == 0) then 
        local _g1 = newGrabState[2];
        if (_g1[1] == 2) then 
          if (_g ~= _g1[2]) then 
            local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, _g);
            local _g = c_accept.grabState;
            if (_g[1] == 0) then 
              local _g = _g[2];
              _g[0] = _g[0] - 1;
            end;
          end;
        else
          local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, _g);
          local _g = c_accept.grabState;
          if (_g[1] == 0) then 
            local _g = _g[2];
            _g[0] = _g[0] - 1;
          end;
        end;
      else
        local c_accept = __deceptinfect_ecswip_ComponentManager.getComponentForIDSure(9, _g);
        local _g = c_accept.grabState;
        if (_g[1] == 0) then 
          local _g = _g[2];
          _g[0] = _g[0] - 1;
        end;
      end;
    end;
  end;
  self.grabState = newGrabState do return self.grabState end
end

__deceptinfect_infection_components_GrabProducer.prototype.__class__ =  __deceptinfect_infection_components_GrabProducer
__deceptinfect_infection_components_GrabProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_GrabProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.infection.components.SearchingState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NOT_SEARCHING","SEARCHING","TARGET"},3)}
__deceptinfect_infection_components_SearchingState = _hxClasses["deceptinfect.infection.components.SearchingState"];
__deceptinfect_infection_components_SearchingState.NOT_SEARCHING = _hx_tab_array({[0]="NOT_SEARCHING",0,__enum__ = __deceptinfect_infection_components_SearchingState},2)

__deceptinfect_infection_components_SearchingState.SEARCHING = _hx_tab_array({[0]="SEARCHING",1,__enum__ = __deceptinfect_infection_components_SearchingState},2)

__deceptinfect_infection_components_SearchingState.TARGET = function(vic) local _x = _hx_tab_array({[0]="TARGET",2,vic,__enum__=__deceptinfect_infection_components_SearchingState}, 3); return _x; end 
_hxClasses["deceptinfect.infection.components.GrabProduceState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="READY","GRABBING","NOT_READY"},3)}
__deceptinfect_infection_components_GrabProduceState = _hxClasses["deceptinfect.infection.components.GrabProduceState"];
__deceptinfect_infection_components_GrabProduceState.READY = function(search) local _x = _hx_tab_array({[0]="READY",0,search,__enum__=__deceptinfect_infection_components_GrabProduceState}, 3); return _x; end 
__deceptinfect_infection_components_GrabProduceState.GRABBING = function(victim) local _x = _hx_tab_array({[0]="GRABBING",1,victim,__enum__=__deceptinfect_infection_components_GrabProduceState}, 3); return _x; end 
__deceptinfect_infection_components_GrabProduceState.NOT_READY = function(x) local _x = _hx_tab_array({[0]="NOT_READY",2,x,__enum__=__deceptinfect_infection_components_GrabProduceState}, 3); return _x; end 

__deceptinfect_infection_components_GrabbableProp.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_GrabbableProp.prototype)
  __deceptinfect_infection_components_GrabbableProp.super(self)
  return self
end
__deceptinfect_infection_components_GrabbableProp.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.GrabbableProp"] = __deceptinfect_infection_components_GrabbableProp
__deceptinfect_infection_components_GrabbableProp.__name__ = "deceptinfect.infection.components.GrabbableProp"
__deceptinfect_infection_components_GrabbableProp.prototype = _hx_e();

__deceptinfect_infection_components_GrabbableProp.prototype.__class__ =  __deceptinfect_infection_components_GrabbableProp
__deceptinfect_infection_components_GrabbableProp.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_GrabbableProp.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_components_HiddenHealthComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_HiddenHealthComponent.prototype)
  __deceptinfect_infection_components_HiddenHealthComponent.super(self)
  return self
end
__deceptinfect_infection_components_HiddenHealthComponent.super = function(self) 
  self.extraHealth = 0.0;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.HiddenHealthComponent"] = __deceptinfect_infection_components_HiddenHealthComponent
__deceptinfect_infection_components_HiddenHealthComponent.__name__ = "deceptinfect.infection.components.HiddenHealthComponent"
__deceptinfect_infection_components_HiddenHealthComponent.prototype = _hx_e();
__deceptinfect_infection_components_HiddenHealthComponent.prototype.extraHealth= nil;

__deceptinfect_infection_components_HiddenHealthComponent.prototype.__class__ =  __deceptinfect_infection_components_HiddenHealthComponent
__deceptinfect_infection_components_HiddenHealthComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_HiddenHealthComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_infection_components_SpectateComponent.new = function() 
  local self = _hx_new(__deceptinfect_infection_components_SpectateComponent.prototype)
  __deceptinfect_infection_components_SpectateComponent.super(self)
  return self
end
__deceptinfect_infection_components_SpectateComponent.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.infection.components.SpectateComponent"] = __deceptinfect_infection_components_SpectateComponent
__deceptinfect_infection_components_SpectateComponent.__name__ = "deceptinfect.infection.components.SpectateComponent"
__deceptinfect_infection_components_SpectateComponent.prototype = _hx_e();

__deceptinfect_infection_components_SpectateComponent.prototype.__class__ =  __deceptinfect_infection_components_SpectateComponent
__deceptinfect_infection_components_SpectateComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_infection_components_SpectateComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_items_Di_cure.new = function(x) 
  local self = _hx_new(__deceptinfect_items_Di_cure.prototype)
  __deceptinfect_items_Di_cure.super(self,x)
  return self
end
__deceptinfect_items_Di_cure.super = function(self,x) 
  self.properties = _hx_o({__fields__={Primary=true},Primary=_hx_o({__fields__={Ammo=true,ClipSize=true,DefaultClip=true,Automatic=true},Ammo="None",ClipSize=-1,DefaultClip=-1,Automatic=true})});
  self["self"] = x;
end
_hx_exports["null"]["di_cure"] = __deceptinfect_items_Di_cure
_hxClasses["deceptinfect.items.Di_cure"] = __deceptinfect_items_Di_cure
__deceptinfect_items_Di_cure.__name__ = "deceptinfect.items.Di_cure"
__deceptinfect_items_Di_cure.prototype = _hx_e();
__deceptinfect_items_Di_cure.prototype.properties= nil;
__deceptinfect_items_Di_cure.prototype.Initialize = function(self) 
end
__deceptinfect_items_Di_cure.prototype.PrimaryAttack = function(self) 
  local owner = self["self"].Owner;
  self["self"]:SetNextPrimaryFire(_G.CurTime() + 999);
  local id = 24;
  local diID = owner.id;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local c_inf = _g[2];
    local _g = c_inf.infection;
    local tmp = _g[1];
    if (tmp) == 0 then 
      local inf = _g[2];
      inf[0] = inf[0] - 12.5;
      local x = __deceptinfect_infection_InfVunerability.new(3, 10);
      local to = owner.id;
      __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[3], to, x);
      local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
      local key = x;
      _this.h[key] = to;
      _this.k[key] = true;
    elseif (tmp) == 1 then 
      local id = 23;
      local diID = owner.id;
      local _g;
      if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
        local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
        _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
      else
        _g = __deceptinfect_ecswip_ComponentState.NONE;
      end;
      if (_g[1] == 1) then 
        local c_form = _g[2];
        local c_form1 = c_form;
        c_form1.formMaxHealth = c_form1.formMaxHealth / 2;
        c_form.cooldown = __deceptinfect_abilities_Cooldown.COOLDOWN(_G.CurTime() + 15);
      end; end;
  end;
  self["self"]:Remove();
end
__deceptinfect_items_Di_cure.prototype["self"]= nil;

__deceptinfect_items_Di_cure.prototype.__class__ =  __deceptinfect_items_Di_cure
__deceptinfect_items_Di_cure.__super__ = {} or a
setmetatable(__deceptinfect_items_Di_cure.prototype,{__index={} or a.prototype})

__deceptinfect_items_ScannerComponent.new = function() 
  local self = _hx_new(__deceptinfect_items_ScannerComponent.prototype)
  __deceptinfect_items_ScannerComponent.super(self)
  return self
end
__deceptinfect_items_ScannerComponent.super = function(self) 
  self.reliability_min = 0.5;
  self.reliability_max = 0.7;
  self.time = 30;
  self.scanProgress = __deceptinfect_util_TimeKeep.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.items.ScannerComponent"] = __deceptinfect_items_ScannerComponent
__deceptinfect_items_ScannerComponent.__name__ = "deceptinfect.items.ScannerComponent"
__deceptinfect_items_ScannerComponent.prototype = _hx_e();
__deceptinfect_items_ScannerComponent.prototype.scanProgress= nil;
__deceptinfect_items_ScannerComponent.prototype.time= nil;
__deceptinfect_items_ScannerComponent.prototype.reliability_max= nil;
__deceptinfect_items_ScannerComponent.prototype.reliability_min= nil;

__deceptinfect_items_ScannerComponent.prototype.__class__ =  __deceptinfect_items_ScannerComponent
__deceptinfect_items_ScannerComponent.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_items_ScannerComponent.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.items.ScanResult"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NO_SCAN","HUMAN","INFECTED"},3)}
__deceptinfect_items_ScanResult = _hxClasses["deceptinfect.items.ScanResult"];
__deceptinfect_items_ScanResult.NO_SCAN = _hx_tab_array({[0]="NO_SCAN",0,__enum__ = __deceptinfect_items_ScanResult},2)

__deceptinfect_items_ScanResult.HUMAN = _hx_tab_array({[0]="HUMAN",1,__enum__ = __deceptinfect_items_ScanResult},2)

__deceptinfect_items_ScanResult.INFECTED = _hx_tab_array({[0]="INFECTED",2,__enum__ = __deceptinfect_items_ScanResult},2)


__deceptinfect_items_Weapon_Di_Scan.new = function(x) 
  local self = _hx_new(__deceptinfect_items_Weapon_Di_Scan.prototype)
  __deceptinfect_items_Weapon_Di_Scan.super(self,x)
  return self
end
__deceptinfect_items_Weapon_Di_Scan.super = function(self,x) 
  self.properties = _hx_o({__fields__={Primary=true},Primary=_hx_o({__fields__={Ammo=true,ClipSize=true,DefaultClip=true,Automatic=true},Ammo="Smg1",ClipSize=-1,DefaultClip=-1,Automatic=true})});
  self["self"] = x;
end
_hx_exports["null"]["weapon_di_scan"] = __deceptinfect_items_Weapon_Di_Scan
_hxClasses["deceptinfect.items.Weapon_Di_Scan"] = __deceptinfect_items_Weapon_Di_Scan
__deceptinfect_items_Weapon_Di_Scan.__name__ = "deceptinfect.items.Weapon_Di_Scan"
__deceptinfect_items_Weapon_Di_Scan.prototype = _hx_e();
__deceptinfect_items_Weapon_Di_Scan.prototype.properties= nil;
__deceptinfect_items_Weapon_Di_Scan.prototype.id= nil;
__deceptinfect_items_Weapon_Di_Scan.prototype.Initialize = function(self) 
  local x = self["self"];
  x.id = __deceptinfect_ecswip_ComponentManager.addGEnt(x);
  self.id = x.id;
  local x = __deceptinfect_items_ScannerComponent.new();
  local to = self.id;
  __deceptinfect_ecswip__ComponentManager_Component__Impl_.init_entity(__deceptinfect_ecswip_ComponentManager.components_3[37], to, x);
  local _this = __deceptinfect_ecswip_ComponentManager.lookupEntity;
  local key = x;
  _this.h[key] = to;
  _this.k[key] = true;
end
__deceptinfect_items_Weapon_Di_Scan.prototype.PrimaryAttack = function(self) 
  local owner = self["self"].Owner;
  local tr = owner:GetEyeTrace();
  local x = tr.Entity;
  local _g;
  if (_G.IsValid(x)) then 
    local _g1 = x.id;
    if (_g1 == nil) then 
      _g = __haxe_ds_Option.None;
    else
      local x = _g1;
      _g = __haxe_ds_Option.Some(x);
    end;
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local ent_id = _g[2];
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_items_ScannerSystem):scan_target(self.id, ent_id);
  end;
end
__deceptinfect_items_Weapon_Di_Scan.prototype.SecondaryAttack = function(self) 
  local owner = self["self"].Owner;
  local tr = owner:GetEyeTrace();
  local x = tr.Entity;
  local _g;
  if (_G.IsValid(x)) then 
    local _g1 = x.id;
    if (_g1 == nil) then 
      _g = __haxe_ds_Option.None;
    else
      local x = _g1;
      _g = __haxe_ds_Option.Some(x);
    end;
  else
    _g = __haxe_ds_Option.None;
  end;
  if (_g[1] == 0) then 
    local ent_id = _g[2];
    __deceptinfect_ecswip_SystemManager.getSystem(__deceptinfect_items_ScannerSystem):final_scan(self.id, ent_id);
  end;
end
__deceptinfect_items_Weapon_Di_Scan.prototype["self"]= nil;

__deceptinfect_items_Weapon_Di_Scan.prototype.__class__ =  __deceptinfect_items_Weapon_Di_Scan
__deceptinfect_items_Weapon_Di_Scan.__super__ = {} or a
setmetatable(__deceptinfect_items_Weapon_Di_Scan.prototype,{__index={} or a.prototype})

__haxe_ds_List.new = function() 
  local self = _hx_new(__haxe_ds_List.prototype)
  __haxe_ds_List.super(self)
  return self
end
__haxe_ds_List.super = function(self) 
  self.length = 0;
end
_hxClasses["haxe.ds.List"] = __haxe_ds_List
__haxe_ds_List.__name__ = "haxe.ds.List"
__haxe_ds_List.prototype = _hx_e();
__haxe_ds_List.prototype.h= nil;
__haxe_ds_List.prototype.q= nil;
__haxe_ds_List.prototype.length= nil;
__haxe_ds_List.prototype.add = function(self,item) 
  local next = nil;
  local x = __haxe_ds__List_ListNode.new(item, next);
  if (self.h == nil) then 
    self.h = x;
  else
    self.q.next = x;
  end;
  self.q = x;
  self.length = self.length + 1;
end
__haxe_ds_List.prototype.pop = function(self) 
  if (self.h == nil) then 
    do return nil end;
  end;
  local x = self.h.item;
  self.h = self.h.next;
  if (self.h == nil) then 
    self.q = nil;
  end;
  self.length = self.length - 1;
  do return x end
end
__haxe_ds_List.prototype.isEmpty = function(self) 
  do return self.h == nil end
end
__haxe_ds_List.prototype.iterator = function(self) 
  do return __haxe_ds__List_ListIterator.new(self.h) end
end

__haxe_ds_List.prototype.__class__ =  __haxe_ds_List

__deceptinfect_radiation_ContaminationAccepter.new = function() 
  local self = _hx_new(__deceptinfect_radiation_ContaminationAccepter.prototype)
  __deceptinfect_radiation_ContaminationAccepter.super(self)
  return self
end
__deceptinfect_radiation_ContaminationAccepter.super = function(self) 
  self.contam_time = __deceptinfect_util_TimeKeep.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.radiation.ContaminationAccepter"] = __deceptinfect_radiation_ContaminationAccepter
__deceptinfect_radiation_ContaminationAccepter.__name__ = "deceptinfect.radiation.ContaminationAccepter"
__deceptinfect_radiation_ContaminationAccepter.prototype = _hx_e();
__deceptinfect_radiation_ContaminationAccepter.prototype.contam_time= nil;

__deceptinfect_radiation_ContaminationAccepter.prototype.__class__ =  __deceptinfect_radiation_ContaminationAccepter
__deceptinfect_radiation_ContaminationAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_ContaminationAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_ContaminationProducer.new = function(options,radoptions) 
  local self = _hx_new(__deceptinfect_radiation_ContaminationProducer.prototype)
  __deceptinfect_radiation_ContaminationProducer.super(self,options,radoptions)
  return self
end
__deceptinfect_radiation_ContaminationProducer.super = function(self,options,radoptions) 
  self.type = __deceptinfect_radiation_ContaminationType.SAME_TYPE;
  __deceptinfect_ecswip_Component.super(self);
  self.chance = _hx_funcToField(options.chance);
  self.dist = __deceptinfect__DistSquared_DistSquared_Impl_.convert(options.dist);
  self.check = _hx_funcToField(options.check);
  if (options.type ~= nil) then 
    self.type = _hx_funcToField(options.type);
  end;
  self.nextoptions = _hx_funcToField(options.nextoptions);
end
_hxClasses["deceptinfect.radiation.ContaminationProducer"] = __deceptinfect_radiation_ContaminationProducer
__deceptinfect_radiation_ContaminationProducer.__name__ = "deceptinfect.radiation.ContaminationProducer"
__deceptinfect_radiation_ContaminationProducer.prototype = _hx_e();
__deceptinfect_radiation_ContaminationProducer.prototype.chance= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.check= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.dist= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.type= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.contam_time= nil;
__deceptinfect_radiation_ContaminationProducer.prototype.nextoptions= nil;

__deceptinfect_radiation_ContaminationProducer.prototype.__class__ =  __deceptinfect_radiation_ContaminationProducer
__deceptinfect_radiation_ContaminationProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_ContaminationProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.NextOptions"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TYPE","MY_TYPE","OVERRIDE_LIFETIME"},3)}
__deceptinfect_radiation_NextOptions = _hxClasses["deceptinfect.radiation.NextOptions"];
__deceptinfect_radiation_NextOptions.TYPE = function(radtype) local _x = _hx_tab_array({[0]="TYPE",0,radtype,__enum__=__deceptinfect_radiation_NextOptions}, 3); return _x; end 
__deceptinfect_radiation_NextOptions.MY_TYPE = _hx_tab_array({[0]="MY_TYPE",1,__enum__ = __deceptinfect_radiation_NextOptions},2)

__deceptinfect_radiation_NextOptions.OVERRIDE_LIFETIME = function(t) local _x = _hx_tab_array({[0]="OVERRIDE_LIFETIME",2,t,__enum__=__deceptinfect_radiation_NextOptions}, 3); return _x; end 
_hxClasses["deceptinfect.radiation.ContaminationType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ALWAYS","SAME_TYPE","SAME_SOURCE"},3)}
__deceptinfect_radiation_ContaminationType = _hxClasses["deceptinfect.radiation.ContaminationType"];
__deceptinfect_radiation_ContaminationType.ALWAYS = _hx_tab_array({[0]="ALWAYS",0,__enum__ = __deceptinfect_radiation_ContaminationType},2)

__deceptinfect_radiation_ContaminationType.SAME_TYPE = _hx_tab_array({[0]="SAME_TYPE",1,__enum__ = __deceptinfect_radiation_ContaminationType},2)

__deceptinfect_radiation_ContaminationType.SAME_SOURCE = _hx_tab_array({[0]="SAME_SOURCE",2,__enum__ = __deceptinfect_radiation_ContaminationType},2)


__deceptinfect_radiation_RadSource.new = function(rso) 
  local self = _hx_new(__deceptinfect_radiation_RadSource.prototype)
  __deceptinfect_radiation_RadSource.super(self,rso)
  return self
end
__deceptinfect_radiation_RadSource.super = function(self,rso) 
  self.state = __deceptinfect_radiation_RadSourceState.INACTIVE;
  __deceptinfect_ecswip_Component.super(self);
  self.attatch = _hx_funcToField(rso.attatch);
  self.type = _hx_funcToField(rso.type);
  self.lifetime = _hx_funcToField(rso.lifetime);
  self.rso = rso;
end
_hxClasses["deceptinfect.radiation.RadSource"] = __deceptinfect_radiation_RadSource
__deceptinfect_radiation_RadSource.__name__ = "deceptinfect.radiation.RadSource"
__deceptinfect_radiation_RadSource.prototype = _hx_e();
__deceptinfect_radiation_RadSource.prototype.base= nil;
__deceptinfect_radiation_RadSource.prototype.type= nil;
__deceptinfect_radiation_RadSource.prototype.attatch= nil;
__deceptinfect_radiation_RadSource.prototype.lifetime= nil;
__deceptinfect_radiation_RadSource.prototype.state= nil;
__deceptinfect_radiation_RadSource.prototype.rso= nil;

__deceptinfect_radiation_RadSource.prototype.__class__ =  __deceptinfect_radiation_RadSource
__deceptinfect_radiation_RadSource.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadSource.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.RadSourceOp"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="CONTAM","RAD","BOTH"},3)}
__deceptinfect_radiation_RadSourceOp = _hxClasses["deceptinfect.radiation.RadSourceOp"];
__deceptinfect_radiation_RadSourceOp.CONTAM = function(op) local _x = _hx_tab_array({[0]="CONTAM",0,op,__enum__=__deceptinfect_radiation_RadSourceOp}, 3); return _x; end 
__deceptinfect_radiation_RadSourceOp.RAD = function(op) local _x = _hx_tab_array({[0]="RAD",1,op,__enum__=__deceptinfect_radiation_RadSourceOp}, 3); return _x; end 
__deceptinfect_radiation_RadSourceOp.BOTH = function(rpo,cpo) local _x = _hx_tab_array({[0]="BOTH",2,rpo,cpo,__enum__=__deceptinfect_radiation_RadSourceOp}, 4); return _x; end 
_hxClasses["deceptinfect.radiation.RadSourceState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ACTIVE","INACTIVE"},2)}
__deceptinfect_radiation_RadSourceState = _hxClasses["deceptinfect.radiation.RadSourceState"];
__deceptinfect_radiation_RadSourceState.ACTIVE = function(x) local _x = _hx_tab_array({[0]="ACTIVE",0,x,__enum__=__deceptinfect_radiation_RadSourceState}, 3); return _x; end 
__deceptinfect_radiation_RadSourceState.INACTIVE = _hx_tab_array({[0]="INACTIVE",1,__enum__ = __deceptinfect_radiation_RadSourceState},2)

_hxClasses["deceptinfect.radiation.RadTime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="INFINITE","FINITE"},2)}
__deceptinfect_radiation_RadTime = _hxClasses["deceptinfect.radiation.RadTime"];
__deceptinfect_radiation_RadTime.INFINITE = _hx_tab_array({[0]="INFINITE",0,__enum__ = __deceptinfect_radiation_RadTime},2)

__deceptinfect_radiation_RadTime.FINITE = function(removetime) local _x = _hx_tab_array({[0]="FINITE",1,removetime,__enum__=__deceptinfect_radiation_RadTime}, 3); return _x; end 

__deceptinfect_radiation_RadVictim.new = function() 
  local self = _hx_new(__deceptinfect_radiation_RadVictim.prototype)
  __deceptinfect_radiation_RadVictim.super(self)
  return self
end
__deceptinfect_radiation_RadVictim.super = function(self) 
  self.radiation = __haxe_ds_IntMap.new();
  self.affectedtype = __haxe_ds_IntMap.new();
  self.affected = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.radiation.RadVictim"] = __deceptinfect_radiation_RadVictim
__deceptinfect_radiation_RadVictim.__name__ = "deceptinfect.radiation.RadVictim"
__deceptinfect_radiation_RadVictim.prototype = _hx_e();
__deceptinfect_radiation_RadVictim.prototype.affected= nil;
__deceptinfect_radiation_RadVictim.prototype.affectedtype= nil;
__deceptinfect_radiation_RadVictim.prototype.radiation= nil;

__deceptinfect_radiation_RadVictim.prototype.__class__ =  __deceptinfect_radiation_RadVictim
__deceptinfect_radiation_RadVictim.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadVictim.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_RadiationAccepter.new = function(options) 
  local self = _hx_new(__deceptinfect_radiation_RadiationAccepter.prototype)
  __deceptinfect_radiation_RadiationAccepter.super(self,options)
  return self
end
__deceptinfect_radiation_RadiationAccepter.super = function(self,options) 
  self.diminish = 0.75;
  self.radiation = __haxe_ds_IntMap.new();
  __deceptinfect_ecswip_Component.super(self);
  if (options.diminish ~= nil) then 
    self.diminish = _hx_funcToField(options.diminish);
  end;
end
_hxClasses["deceptinfect.radiation.RadiationAccepter"] = __deceptinfect_radiation_RadiationAccepter
__deceptinfect_radiation_RadiationAccepter.__name__ = "deceptinfect.radiation.RadiationAccepter"
__deceptinfect_radiation_RadiationAccepter.prototype = _hx_e();
__deceptinfect_radiation_RadiationAccepter.prototype.radiation= nil;
__deceptinfect_radiation_RadiationAccepter.prototype.diminish= nil;

__deceptinfect_radiation_RadiationAccepter.prototype.__class__ =  __deceptinfect_radiation_RadiationAccepter
__deceptinfect_radiation_RadiationAccepter.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadiationAccepter.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_radiation_RadiationProducer.new = function(options) 
  local self = _hx_new(__deceptinfect_radiation_RadiationProducer.prototype)
  __deceptinfect_radiation_RadiationProducer.super(self,options)
  return self
end
__deceptinfect_radiation_RadiationProducer.super = function(self,options) 
  self.state = __deceptinfect_radiation_RadiationState.ENABLED;
  __deceptinfect_ecswip_Component.super(self);
  self.maxrate = _hx_funcToField(options.maxrate);
  self.radius = __deceptinfect__DistSquared_DistSquared_Impl_.convert(options.radius);
end
_hxClasses["deceptinfect.radiation.RadiationProducer"] = __deceptinfect_radiation_RadiationProducer
__deceptinfect_radiation_RadiationProducer.__name__ = "deceptinfect.radiation.RadiationProducer"
__deceptinfect_radiation_RadiationProducer.prototype = _hx_e();
__deceptinfect_radiation_RadiationProducer.prototype.state= nil;
__deceptinfect_radiation_RadiationProducer.prototype.maxrate= nil;
__deceptinfect_radiation_RadiationProducer.prototype.radius= nil;
__deceptinfect_radiation_RadiationProducer.prototype.copy = function(self) 
end

__deceptinfect_radiation_RadiationProducer.prototype.__class__ =  __deceptinfect_radiation_RadiationProducer
__deceptinfect_radiation_RadiationProducer.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_radiation_RadiationProducer.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.radiation.RadiationState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="ENABLED","DISABLED","DESTROYED"},3)}
__deceptinfect_radiation_RadiationState = _hxClasses["deceptinfect.radiation.RadiationState"];
__deceptinfect_radiation_RadiationState.ENABLED = _hx_tab_array({[0]="ENABLED",0,__enum__ = __deceptinfect_radiation_RadiationState},2)

__deceptinfect_radiation_RadiationState.DISABLED = _hx_tab_array({[0]="DISABLED",1,__enum__ = __deceptinfect_radiation_RadiationState},2)

__deceptinfect_radiation_RadiationState.DESTROYED = _hx_tab_array({[0]="DESTROYED",2,__enum__ = __deceptinfect_radiation_RadiationState},2)

_hxClasses["deceptinfect.radiation.RadLifetime"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="FINITE","INFINITE"},2)}
__deceptinfect_radiation_RadLifetime = _hxClasses["deceptinfect.radiation.RadLifetime"];
__deceptinfect_radiation_RadLifetime.FINITE = function(x) local _x = _hx_tab_array({[0]="FINITE",0,x,__enum__=__deceptinfect_radiation_RadLifetime}, 3); return _x; end 
__deceptinfect_radiation_RadLifetime.INFINITE = _hx_tab_array({[0]="INFINITE",1,__enum__ = __deceptinfect_radiation_RadLifetime},2)


__deceptinfect_radiation_RadiationTypes.new = {}
_hxClasses["deceptinfect.radiation.RadiationTypes"] = __deceptinfect_radiation_RadiationTypes
__deceptinfect_radiation_RadiationTypes.__name__ = "deceptinfect.radiation.RadiationTypes"

__deceptinfect_sabotage_S_Break.new = function() 
  local self = _hx_new(__deceptinfect_sabotage_S_Break.prototype)
  __deceptinfect_sabotage_S_Break.super(self)
  return self
end
__deceptinfect_sabotage_S_Break.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.sabotage.S_Break"] = __deceptinfect_sabotage_S_Break
__deceptinfect_sabotage_S_Break.__name__ = "deceptinfect.sabotage.S_Break"
__deceptinfect_sabotage_S_Break.prototype = _hx_e();

__deceptinfect_sabotage_S_Break.prototype.__class__ =  __deceptinfect_sabotage_S_Break
__deceptinfect_sabotage_S_Break.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_sabotage_S_Break.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_sabotage_S_Explode.new = function() 
  local self = _hx_new(__deceptinfect_sabotage_S_Explode.prototype)
  __deceptinfect_sabotage_S_Explode.super(self)
  return self
end
__deceptinfect_sabotage_S_Explode.super = function(self) 
  self.dmg = 50;
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.sabotage.S_Explode"] = __deceptinfect_sabotage_S_Explode
__deceptinfect_sabotage_S_Explode.__name__ = "deceptinfect.sabotage.S_Explode"
__deceptinfect_sabotage_S_Explode.prototype = _hx_e();
__deceptinfect_sabotage_S_Explode.prototype.dmg= nil;

__deceptinfect_sabotage_S_Explode.prototype.__class__ =  __deceptinfect_sabotage_S_Explode
__deceptinfect_sabotage_S_Explode.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_sabotage_S_Explode.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_statuses_Contaminated.new = function() 
  local self = _hx_new(__deceptinfect_statuses_Contaminated.prototype)
  __deceptinfect_statuses_Contaminated.super(self)
  return self
end
__deceptinfect_statuses_Contaminated.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.statuses.Contaminated"] = __deceptinfect_statuses_Contaminated
__deceptinfect_statuses_Contaminated.__name__ = "deceptinfect.statuses.Contaminated"
__deceptinfect_statuses_Contaminated.prototype = _hx_e();

__deceptinfect_statuses_Contaminated.prototype.__class__ =  __deceptinfect_statuses_Contaminated
__deceptinfect_statuses_Contaminated.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_statuses_Contaminated.prototype,{__index=__deceptinfect_ecswip_Component.prototype})

__deceptinfect_statuses_Walkthroughable.new = function() 
  local self = _hx_new(__deceptinfect_statuses_Walkthroughable.prototype)
  __deceptinfect_statuses_Walkthroughable.super(self)
  return self
end
__deceptinfect_statuses_Walkthroughable.super = function(self) 
  __deceptinfect_ecswip_Component.super(self);
end
_hxClasses["deceptinfect.statuses.Walkthroughable"] = __deceptinfect_statuses_Walkthroughable
__deceptinfect_statuses_Walkthroughable.__name__ = "deceptinfect.statuses.Walkthroughable"
__deceptinfect_statuses_Walkthroughable.prototype = _hx_e();

__deceptinfect_statuses_Walkthroughable.prototype.__class__ =  __deceptinfect_statuses_Walkthroughable
__deceptinfect_statuses_Walkthroughable.__super__ = __deceptinfect_ecswip_Component
setmetatable(__deceptinfect_statuses_Walkthroughable.prototype,{__index=__deceptinfect_ecswip_Component.prototype})
_hxClasses["deceptinfect.util.Cooldown"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="AVALIABLE","COOLDOWN","UNAVALIABLE"},3)}
__deceptinfect_util_Cooldown = _hxClasses["deceptinfect.util.Cooldown"];
__deceptinfect_util_Cooldown.AVALIABLE = _hx_tab_array({[0]="AVALIABLE",0,__enum__ = __deceptinfect_util_Cooldown},2)

__deceptinfect_util_Cooldown.COOLDOWN = function(time) local _x = _hx_tab_array({[0]="COOLDOWN",1,time,__enum__=__deceptinfect_util_Cooldown}, 3); return _x; end 
__deceptinfect_util_Cooldown.UNAVALIABLE = _hx_tab_array({[0]="UNAVALIABLE",2,__enum__ = __deceptinfect_util_Cooldown},2)


__deceptinfect_util_EntityExt.new = {}
_hxClasses["deceptinfect.util.EntityExt"] = __deceptinfect_util_EntityExt
__deceptinfect_util_EntityExt.__name__ = "deceptinfect.util.EntityExt"
__deceptinfect_util_EntityExt.facingBehind = function(me,target) 
  local this1 = _G.Angle(0, me:EyeAngles()[2], 0);
  local vec1 = this1:Forward();
  local this1 = _G.Angle(0, target:EyeAngles()[2], 0);
  local vec2 = this1:Forward();
  local dot = _G.math.acos(vec1:Dot(vec2));
  do return dot < (_G.math.pi / 4) end;
end
__deceptinfect_util_EntityExt.validID2 = function(x) 
  if (_G.IsValid(x)) then 
    local _g = x.id;
    if (_g == nil) then 
      do return __deceptinfect_util_ValidID.NO_ID end;
    else
      do return __deceptinfect_util_ValidID.HAS_ID(_g) end;
    end;
  else
    do return __deceptinfect_util_ValidID.INVALID end;
  end;
end
_hxClasses["deceptinfect.util.ValidID"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HAS_ID","NO_ID","INVALID"},3)}
__deceptinfect_util_ValidID = _hxClasses["deceptinfect.util.ValidID"];
__deceptinfect_util_ValidID.HAS_ID = function(id) local _x = _hx_tab_array({[0]="HAS_ID",0,id,__enum__=__deceptinfect_util_ValidID}, 3); return _x; end 
__deceptinfect_util_ValidID.NO_ID = _hx_tab_array({[0]="NO_ID",1,__enum__ = __deceptinfect_util_ValidID},2)

__deceptinfect_util_ValidID.INVALID = _hx_tab_array({[0]="INVALID",2,__enum__ = __deceptinfect_util_ValidID},2)


__deceptinfect_util_MinMaxTools.new = {}
_hxClasses["deceptinfect.util.MinMaxTools"] = __deceptinfect_util_MinMaxTools
__deceptinfect_util_MinMaxTools.__name__ = "deceptinfect.util.MinMaxTools"
__deceptinfect_util_MinMaxTools.getCenter = function(x) 
  local this1 = x.maxs;
  local otherVec = x.mins;
  local this1 = this1 - otherVec;
  local this1 = this1 / 2;
  local otherVec = x.mins;
  do return this1 + otherVec end;
end

__deceptinfect_util_PlayerExt.new = {}
_hxClasses["deceptinfect.util.PlayerExt"] = __deceptinfect_util_PlayerExt
__deceptinfect_util_PlayerExt.__name__ = "deceptinfect.util.PlayerExt"
__deceptinfect_util_PlayerExt.setWalkthroughable = function(p,b) 
  if (b) then 
    p:SetCollisionGroup(_G.COLLISION_GROUP_PASSABLE_DOOR);
  else
    p:SetCollisionGroup(_G.COLLISION_GROUP_PLAYER);
  end;
end
__deceptinfect_util_PlayerExt.shouldFreeRoam = function(p) 
  local wrongMode = p:GetObserverMode() == _G.OBS_MODE_NONE;
  local targetDead = _G.IsValid(p:GetObserverTarget()) and not p:GetObserverTarget():Alive();
  local freeRoaming = p:GetObserverMode() == _G.OBS_MODE_ROAMING;
  if (not (wrongMode or targetDead)) then 
    do return not freeRoaming end;
  else
    do return true end;
  end;
end
__deceptinfect_util_PlayerExt.giveFullAmmo = function(p) 
  local x = p:GetWeapons();
  local _hx_1_p1_next, _hx_1_p1_table, _hx_1_p1_index = _G.ipairs(x);
  local wep_lnext = _hx_1_p1_next;
  local _hx_2_init_index, _hx_2_init_value = wep_lnext(x, _hx_1_p1_index);
  local wep_nextV = _hx_2_init_value;
  local wep_i = _hx_2_init_index;
  while (wep_nextV ~= nil) do 
    local v = wep_nextV;
    local _hx_3_nextResult_index, _hx_3_nextResult_value = wep_lnext(x, wep_i);
    wep_i = _hx_3_nextResult_index;
    wep_nextV = _hx_3_nextResult_value;
    local typ = v:GetPrimaryAmmoType();
    local count = v:GetMaxClip1() * 3;
    p:GiveAmmo(count, typ);
  end;
end

__deceptinfect_util_TimeKeep.new = function(limitZero) 
  local self = _hx_new(__deceptinfect_util_TimeKeep.prototype)
  __deceptinfect_util_TimeKeep.super(self,limitZero)
  return self
end
__deceptinfect_util_TimeKeep.super = function(self,limitZero) 
  if (limitZero == nil) then 
    limitZero = true;
  end;
  self.times = __haxe_ds_IntMap.new();
  self.limitZero = limitZero;
end
_hxClasses["deceptinfect.util.TimeKeep"] = __deceptinfect_util_TimeKeep
__deceptinfect_util_TimeKeep.__name__ = "deceptinfect.util.TimeKeep"
__deceptinfect_util_TimeKeep.prototype = _hx_e();
__deceptinfect_util_TimeKeep.prototype.times= nil;
__deceptinfect_util_TimeKeep.prototype.limitZero= nil;
__deceptinfect_util_TimeKeep.prototype.addTime = function(self,key) 
  self:initTime(key);
  local difftime = __deceptinfect_GameManager.diffTime;
  local _g = self.times;
  local ret = _g.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local v = ret + difftime;
  local key1 = key;
  if (v == nil) then 
    _g.h[key1] = __haxe_ds_IntMap.tnull;
  else
    _g.h[key1] = v;
  end;
  local ret = self.times.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__deceptinfect_util_TimeKeep.prototype.initTime = function(self,key) 
  if (self.times.h[key] == nil) then 
    local _this = self.times;
    local key = key;
    local value = 0;
    _this.h[key] = value;
  end;
end
__deceptinfect_util_TimeKeep.prototype.setTime = function(self,key,f) 
  local _this = self.times;
  local key = key;
  if (f == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = f;
  end;
end
__deceptinfect_util_TimeKeep.prototype.resetTime = function(self,key) 
  local _this = self.times;
  local key = key;
  local value = 0;
  _this.h[key] = value;
end
__deceptinfect_util_TimeKeep.prototype.removeTime = function(self,key) 
  self:initTime(key);
  local difftime = __deceptinfect_GameManager.diffTime;
  local _g = self.times;
  local ret = _g.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local v = ret - difftime;
  local key1 = key;
  if (v == nil) then 
    _g.h[key1] = __haxe_ds_IntMap.tnull;
  else
    _g.h[key1] = v;
  end;
  local ret = self.times.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  if (ret < 0) then 
    local _this = self.times;
    local key = key;
    local value = 0;
    _this.h[key] = value;
  end;
  local ret = self.times.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__deceptinfect_util_TimeKeep.prototype.removeAllTimes = function(self) 
  local difftime = __deceptinfect_GameManager.diffTime;
  local key = self.times:keys();
  while (key:hasNext()) do 
    local key = key:next();
    local _g = self.times;
    local ret = _g.h[key];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local v = ret - difftime;
    local key1 = key;
    if (v == nil) then 
      _g.h[key1] = __haxe_ds_IntMap.tnull;
    else
      _g.h[key1] = v;
    end;
    local ret = self.times.h[key];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    if (ret < 0) then 
      local _this = self.times;
      local key = key;
      local value = 0;
      _this.h[key] = value;
    end;
  end;
end
__deceptinfect_util_TimeKeep.prototype.getTime = function(self,key) 
  local ret = self.times.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end

__deceptinfect_util_TimeKeep.prototype.__class__ =  __deceptinfect_util_TimeKeep

__deceptinfect_util_Util.new = {}
_hxClasses["deceptinfect.util.Util"] = __deceptinfect_util_Util
__deceptinfect_util_Util.__name__ = "deceptinfect.util.Util"
__deceptinfect_util_Util.printTimer_2 = function(ident,time,run) 
  if (__deceptinfect_util_Util.mappy_2.h[ident] ~= nil) then 
    local ret = __deceptinfect_util_Util.mappy_2.h[ident];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    if (_G.CurTime() > ret) then 
      run();
      local this1 = __deceptinfect_util_Util.mappy_2;
      local value = _G.CurTime() + time;
      local _this = this1;
      if (value == nil) then 
        _this.h[ident] = __haxe_ds_IntMap.tnull;
      else
        _this.h[ident] = value;
      end;
    end;
  else
    run();
    local this1 = __deceptinfect_util_Util.mappy_2;
    local value = _G.CurTime() + time;
    local _this = this1;
    if (value == nil) then 
      _this.h[ident] = __haxe_ds_IntMap.tnull;
    else
      _this.h[ident] = value;
    end;
  end;
end

__deceptinfect_weapons_Weapon_di_spit.new = function(x) 
  local self = _hx_new(__deceptinfect_weapons_Weapon_di_spit.prototype)
  __deceptinfect_weapons_Weapon_di_spit.super(self,x)
  return self
end
__deceptinfect_weapons_Weapon_di_spit.super = function(self,x) 
  self.properties = _hx_o({__fields__={Primary=true,Secondary=true},Primary=_hx_o({__fields__={Ammo=true,ClipSize=true,DefaultClip=true,Automatic=true},Ammo="None",ClipSize=-1,DefaultClip=-1,Automatic=true}),Secondary=_hx_o({__fields__={Ammo=true,ClipSize=true,DefaultClip=true,Automatic=true},Ammo="none",ClipSize=0,DefaultClip=0,Automatic=false})});
  self["self"] = x;
end
_hx_exports["null"]["weapon_di_spit"] = __deceptinfect_weapons_Weapon_di_spit
_hxClasses["deceptinfect.weapons.Weapon_di_spit"] = __deceptinfect_weapons_Weapon_di_spit
__deceptinfect_weapons_Weapon_di_spit.__name__ = "deceptinfect.weapons.Weapon_di_spit"
__deceptinfect_weapons_Weapon_di_spit.prototype = _hx_e();
__deceptinfect_weapons_Weapon_di_spit.prototype.properties= nil;
__deceptinfect_weapons_Weapon_di_spit.prototype.Initialize = function(self) 
  self["self"]:SetNextSecondaryFire(_G.CurTime() + 9999);
end
__deceptinfect_weapons_Weapon_di_spit.prototype.PrimaryAttack = function(self) 
  local owner = self["self"].Owner;
  local id = 23;
  local diID = owner.id;
  local _g;
  if (__deceptinfect_ecswip_ComponentManager.components_3[id][1][diID] ~= nil) then 
    local this1 = __deceptinfect_ecswip_ComponentManager.components_3[id];
    _g = __deceptinfect_ecswip_ComponentState.Comp(this1[3][this1[1][diID]]);
  else
    _g = __deceptinfect_ecswip_ComponentState.NONE;
  end;
  if (_g[1] == 1) then 
    local _g = _g[2];
    local _g1 = _g.serverID;
    local _g1 = _g.formHealth;
    local _g1 = _g.cooldown;
    local _g1 = _g.nextCooldown;
    local _g1 = _g.formMaxHealth;
    local _g1 = _g.formModel;
    if (_g.form[1] == 1) then 
      local spitball = _G.ents.Create("di_spitball");
      spitball:SetOwner(owner);
      local this1 = owner:EyePos();
      local this2 = owner:GetForward();
      local otherVec = this2 * 5;
      spitball:SetPos(this1 + otherVec);
      spitball:Spawn();
      spitball:SetAngles(owner:GetAngles());
      local this1 = owner:GetForward();
      local this1 = this1 * 1000;
      local otherVec = owner:GetVelocity();
      spitball:SetVelocity(this1 + otherVec);
      self["self"]:SetNextPrimaryFire(_G.CurTime() + 1.5);
    end;
  end;
end
__deceptinfect_weapons_Weapon_di_spit.prototype["self"]= nil;

__deceptinfect_weapons_Weapon_di_spit.prototype.__class__ =  __deceptinfect_weapons_Weapon_di_spit
__deceptinfect_weapons_Weapon_di_spit.__super__ = {} or a
setmetatable(__deceptinfect_weapons_Weapon_di_spit.prototype,{__index={} or a.prototype})

__gmod_helpers_macros_include_Build.new = {}
_hxClasses["gmod.helpers.macros.include.Build"] = __gmod_helpers_macros_include_Build
__gmod_helpers_macros_include_Build.__name__ = "gmod.helpers.macros.include.Build"

__gmod_helpers_macros_include___ForceExpose.new = {}
_hx_exports["__forceExpose"] = __gmod_helpers_macros_include___ForceExpose
_hxClasses["gmod.helpers.macros.include.__ForceExpose"] = __gmod_helpers_macros_include___ForceExpose
__gmod_helpers_macros_include___ForceExpose.__name__ = "gmod.helpers.macros.include.__ForceExpose"

__gmod_helpers_net__NVector_NVector_Impl_.new = {}
_hxClasses["gmod.helpers.net._NVector.NVector_Impl_"] = __gmod_helpers_net__NVector_NVector_Impl_
__gmod_helpers_net__NVector_NVector_Impl_.__name__ = "gmod.helpers.net._NVector.NVector_Impl_"
__gmod_helpers_net__NVector_NVector_Impl_.from = function(x) 
  do return _hx_tab_array({[0]=x[1], x[2], x[3]}, 3) end;
end

__haxe_EntryPoint.new = {}
_hxClasses["haxe.EntryPoint"] = __haxe_EntryPoint
__haxe_EntryPoint.__name__ = "haxe.EntryPoint"
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (true) do 
    local nextTick = __haxe_EntryPoint.processEvents();
    if (nextTick < 0) then 
      break;
    end;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
_hxClasses["haxe.Exception"] = __haxe_Exception
__haxe_Exception.__name__ = "haxe.Exception"
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.__exceptionMessage= nil;
__haxe_Exception.prototype.__nativeStack= nil;
__haxe_Exception.prototype.__skipStack= nil;
__haxe_Exception.prototype.__nativeException= nil;
__haxe_Exception.prototype.__previousException= nil;
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Json.new = {}
_hxClasses["haxe.Json"] = __haxe_Json
__haxe_Json.__name__ = "haxe.Json"
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_Log.new = {}
_hxClasses["haxe.Log"] = __haxe_Log
__haxe_Log.__name__ = "haxe.Log"
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
_hxClasses["haxe.MainEvent"] = __haxe_MainEvent
__haxe_MainEvent.__name__ = "haxe.MainEvent"
__haxe_MainEvent.prototype = _hx_e();
__haxe_MainEvent.prototype.f= nil;
__haxe_MainEvent.prototype.prev= nil;
__haxe_MainEvent.prototype.next= nil;
__haxe_MainEvent.prototype.isBlocking= nil;
__haxe_MainEvent.prototype.nextRun= nil;
__haxe_MainEvent.prototype.priority= nil;
__haxe_MainEvent.prototype.delay = function(self,t) 
  self.nextRun = (function() 
    local _hx_1
    if (t == nil) then 
    _hx_1 = -_G.math.huge; else 
    _hx_1 = Sys.time() + t; end
    return _hx_1
  end )();
end
__haxe_MainEvent.prototype.stop = function(self) 
  if (self.f == nil) then 
    do return end;
  end;
  self.f = nil;
  self.nextRun = -_G.math.huge;
  if (self.prev == nil) then 
    __haxe_MainLoop.pending = self.next;
  else
    self.prev.next = self.next;
  end;
  if (self.next ~= nil) then 
    self.next.prev = self.prev;
  end;
end

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
_hxClasses["haxe.MainLoop"] = __haxe_MainLoop
__haxe_MainLoop.__name__ = "haxe.MainLoop"
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.add = function(f,priority) 
  if (priority == nil) then 
    priority = 0;
  end;
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown("Event function is null"),0);
  end;
  local e = __haxe_MainEvent.new(f, priority);
  local head = __haxe_MainLoop.pending;
  if (head ~= nil) then 
    head.prev = e;
  end;
  e.next = head;
  __haxe_MainLoop.pending = e;
  do return e end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_NativeStackTrace.new = {}
_hxClasses["haxe.NativeStackTrace"] = __haxe_NativeStackTrace
__haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace"
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (#"\n" > 0) then 
        newidx = _G.string.find(_g, "\n", idx, true);
      else
        if (idx >= #_g) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = _G.string.sub(_g, idx, newidx - 1);
        ret:push(match);
        idx = newidx + #"\n";
      else
        ret:push(_G.string.sub(_g, idx, #_g));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_Timer.new = function(time_ms) 
  local self = _hx_new(__haxe_Timer.prototype)
  __haxe_Timer.super(self,time_ms)
  return self
end
__haxe_Timer.super = function(self,time_ms) 
  local _gthis = self;
  local dt = time_ms / 1000;
  self.event = __haxe_MainLoop.add(function() 
    local fh = _gthis.event;
    fh.nextRun = fh.nextRun + dt;
    _gthis:run();
  end);
  self.event:delay(dt);
end
_hxClasses["haxe.Timer"] = __haxe_Timer
__haxe_Timer.__name__ = "haxe.Timer"
__haxe_Timer.delay = function(f,time_ms) 
  local t = __haxe_Timer.new(time_ms);
  t.run = function(self) 
    t:stop();
    f();
   end;
  do return t end;
end
__haxe_Timer.prototype = _hx_e();
__haxe_Timer.prototype.event= nil;
__haxe_Timer.prototype.stop = function(self) 
  if (self.event ~= nil) then 
    self.event:stop();
    self.event = nil;
  end;
end
__haxe_Timer.prototype.run = function(self) 
end

__haxe_Timer.prototype.__class__ =  __haxe_Timer

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,Std.string(value),previous,native);
  self.value = value;
end
_hxClasses["haxe.ValueException"] = __haxe_ValueException
__haxe_ValueException.__name__ = "haxe.ValueException"
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.value= nil;

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_ds_BalancedTree.new = function() 
  local self = _hx_new(__haxe_ds_BalancedTree.prototype)
  __haxe_ds_BalancedTree.super(self)
  return self
end
__haxe_ds_BalancedTree.super = function(self) 
end
_hxClasses["haxe.ds.BalancedTree"] = __haxe_ds_BalancedTree
__haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree"
__haxe_ds_BalancedTree.__interfaces__ = {__haxe_IMap}
__haxe_ds_BalancedTree.prototype = _hx_e();
__haxe_ds_BalancedTree.prototype.root= nil;
__haxe_ds_BalancedTree.prototype.set = function(self,key,value) 
  self.root = self:setLoop(key, value, self.root);
end
__haxe_ds_BalancedTree.prototype.get = function(self,key) 
  local node = self.root;
  while (node ~= nil) do 
    local c = self:compare(key, node.key);
    if (c == 0) then 
      do return node.value end;
    end;
    if (c < 0) then 
      node = node.left;
    else
      node = node.right;
    end;
  end;
  do return nil end
end
__haxe_ds_BalancedTree.prototype.keys = function(self) 
  local ret = _hx_tab_array({}, 0);
  self:keysLoop(self.root, ret);
  do return __haxe_iterators_ArrayIterator.new(ret) end
end
__haxe_ds_BalancedTree.prototype.setLoop = function(self,k,v,node) 
  if (node == nil) then 
    do return __haxe_ds_TreeNode.new(nil, k, v, nil) end;
  end;
  local c = self:compare(k, node.key);
  if (c == 0) then 
    do return __haxe_ds_TreeNode.new(node.left, k, v, node.right, (function() 
      local _hx_1
      if (node == nil) then 
      _hx_1 = 0; else 
      _hx_1 = node._height; end
      return _hx_1
    end )()) end;
  else
    if (c < 0) then 
      local nl = self:setLoop(k, v, node.left);
      do return self:balance(nl, node.key, node.value, node.right) end;
    else
      local nr = self:setLoop(k, v, node.right);
      do return self:balance(node.left, node.key, node.value, nr) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.keysLoop = function(self,node,acc) 
  if (node ~= nil) then 
    self:keysLoop(node.left, acc);
    acc:push(node.key);
    self:keysLoop(node.right, acc);
  end;
end
__haxe_ds_BalancedTree.prototype.balance = function(self,l,k,v,r) 
  local hl = (function() 
    local _hx_1
    if (l == nil) then 
    _hx_1 = 0; else 
    _hx_1 = l._height; end
    return _hx_1
  end )();
  local hr = (function() 
    local _hx_2
    if (r == nil) then 
    _hx_2 = 0; else 
    _hx_2 = r._height; end
    return _hx_2
  end )();
  if (hl > (hr + 2)) then 
    local _this = l.left;
    local _this1 = l.right;
    if ((function() 
      local _hx_3
      if (_this == nil) then 
      _hx_3 = 0; else 
      _hx_3 = _this._height; end
      return _hx_3
    end )() >= (function() 
      local _hx_4
      if (_this1 == nil) then 
      _hx_4 = 0; else 
      _hx_4 = _this1._height; end
      return _hx_4
    end )()) then 
      do return __haxe_ds_TreeNode.new(l.left, l.key, l.value, __haxe_ds_TreeNode.new(l.right, k, v, r)) end;
    else
      do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l.left, l.key, l.value, l.right.left), l.right.key, l.right.value, __haxe_ds_TreeNode.new(l.right.right, k, v, r)) end;
    end;
  else
    if (hr > (hl + 2)) then 
      local _this = r.right;
      local _this1 = r.left;
      if ((function() 
        local _hx_5
        if (_this == nil) then 
        _hx_5 = 0; else 
        _hx_5 = _this._height; end
        return _hx_5
      end )() > (function() 
        local _hx_6
        if (_this1 == nil) then 
        _hx_6 = 0; else 
        _hx_6 = _this1._height; end
        return _hx_6
      end )()) then 
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left), r.key, r.value, r.right) end;
      else
        do return __haxe_ds_TreeNode.new(__haxe_ds_TreeNode.new(l, k, v, r.left.left), r.left.key, r.left.value, __haxe_ds_TreeNode.new(r.left.right, r.key, r.value, r.right)) end;
      end;
    else
      do return __haxe_ds_TreeNode.new(l, k, v, r, (function() 
        local _hx_7
        if (hl > hr) then 
        _hx_7 = hl; else 
        _hx_7 = hr; end
        return _hx_7
      end )() + 1) end;
    end;
  end;
end
__haxe_ds_BalancedTree.prototype.compare = function(self,k1,k2) 
  do return Reflect.compare(k1, k2) end
end

__haxe_ds_BalancedTree.prototype.__class__ =  __haxe_ds_BalancedTree

__haxe_ds_TreeNode.new = function(l,k,v,r,h) 
  local self = _hx_new(__haxe_ds_TreeNode.prototype)
  __haxe_ds_TreeNode.super(self,l,k,v,r,h)
  return self
end
__haxe_ds_TreeNode.super = function(self,l,k,v,r,h) 
  if (h == nil) then 
    h = -1;
  end;
  self.left = l;
  self.key = k;
  self.value = v;
  self.right = r;
  if (h == -1) then 
    local tmp;
    local _this = self.left;
    local _this1 = self.right;
    if ((function() 
      local _hx_1
      if (_this == nil) then 
      _hx_1 = 0; else 
      _hx_1 = _this._height; end
      return _hx_1
    end )() > (function() 
      local _hx_2
      if (_this1 == nil) then 
      _hx_2 = 0; else 
      _hx_2 = _this1._height; end
      return _hx_2
    end )()) then 
      local _this = self.left;
      tmp = (function() 
        local _hx_3
        if (_this == nil) then 
        _hx_3 = 0; else 
        _hx_3 = _this._height; end
        return _hx_3
      end )();
    else
      local _this = self.right;
      tmp = (function() 
        local _hx_4
        if (_this == nil) then 
        _hx_4 = 0; else 
        _hx_4 = _this._height; end
        return _hx_4
      end )();
    end;
    self._height = tmp + 1;
  else
    self._height = h;
  end;
end
_hxClasses["haxe.ds.TreeNode"] = __haxe_ds_TreeNode
__haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode"
__haxe_ds_TreeNode.prototype = _hx_e();
__haxe_ds_TreeNode.prototype.left= nil;
__haxe_ds_TreeNode.prototype.right= nil;
__haxe_ds_TreeNode.prototype.key= nil;
__haxe_ds_TreeNode.prototype.value= nil;
__haxe_ds_TreeNode.prototype._height= nil;

__haxe_ds_TreeNode.prototype.__class__ =  __haxe_ds_TreeNode

__haxe_ds_EnumValueMap.new = function() 
  local self = _hx_new(__haxe_ds_EnumValueMap.prototype)
  __haxe_ds_EnumValueMap.super(self)
  return self
end
__haxe_ds_EnumValueMap.super = function(self) 
  __haxe_ds_BalancedTree.super(self);
end
_hxClasses["haxe.ds.EnumValueMap"] = __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap"
__haxe_ds_EnumValueMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_EnumValueMap.prototype = _hx_e();
__haxe_ds_EnumValueMap.prototype.compare = function(self,k1,k2) 
  local d = k1[1] - k2[1];
  if (d ~= 0) then 
    do return d end;
  end;
  local p1 = k1:slice(2);
  local p2 = k2:slice(2);
  if ((p1.length == 0) and (p2.length == 0)) then 
    do return 0 end;
  end;
  do return self:compareArgs(p1, p2) end
end
__haxe_ds_EnumValueMap.prototype.compareArgs = function(self,a1,a2) 
  local ld = a1.length - a2.length;
  if (ld ~= 0) then 
    do return ld end;
  end;
  local _g = 0;
  local _g1 = a1.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local d = self:compareArg(a1[i], a2[i]);
    if (d ~= 0) then 
      do return d end;
    end;
  end;
  do return 0 end
end
__haxe_ds_EnumValueMap.prototype.compareArg = function(self,v1,v2) 
  if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)) then 
    do return self:compare(v1, v2) end;
  else
    if (__lua_Boot.__instanceof(v1, Array) and __lua_Boot.__instanceof(v2, Array)) then 
      do return self:compareArgs(v1, v2) end;
    else
      do return Reflect.compare(v1, v2) end;
    end;
  end;
end

__haxe_ds_EnumValueMap.prototype.__class__ =  __haxe_ds_EnumValueMap
__haxe_ds_EnumValueMap.__super__ = __haxe_ds_BalancedTree
setmetatable(__haxe_ds_EnumValueMap.prototype,{__index=__haxe_ds_BalancedTree.prototype})

__haxe_ds_GenericCell.new = function(elt,next) 
  local self = _hx_new(__haxe_ds_GenericCell.prototype)
  __haxe_ds_GenericCell.super(self,elt,next)
  return self
end
__haxe_ds_GenericCell.super = function(self,elt,next) 
  self.elt = elt;
  self.next = next;
end
_hxClasses["haxe.ds.GenericCell"] = __haxe_ds_GenericCell
__haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell"
__haxe_ds_GenericCell.prototype = _hx_e();
__haxe_ds_GenericCell.prototype.elt= nil;
__haxe_ds_GenericCell.prototype.next= nil;

__haxe_ds_GenericCell.prototype.__class__ =  __haxe_ds_GenericCell

__haxe_ds_GenericStack.new = function() 
  local self = _hx_new(__haxe_ds_GenericStack.prototype)
  __haxe_ds_GenericStack.super(self)
  return self
end
__haxe_ds_GenericStack.super = function(self) 
end
_hxClasses["haxe.ds.GenericStack"] = __haxe_ds_GenericStack
__haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack"
__haxe_ds_GenericStack.prototype = _hx_e();
__haxe_ds_GenericStack.prototype.head= nil;
__haxe_ds_GenericStack.prototype.add = function(self,item) 
  self.head = __haxe_ds_GenericCell.new(item, self.head);
end

__haxe_ds_GenericStack.prototype.__class__ =  __haxe_ds_GenericStack

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.IntMap"] = __haxe_ds_IntMap
__haxe_ds_IntMap.__name__ = "haxe.ds.IntMap"
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_e();
__haxe_ds_IntMap.prototype.h= nil;
__haxe_ds_IntMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_IntMap.prototype.remove = function(self,key) 
  if (self.h[key] == nil) then 
    do return false end;
  else
    self.h[key] = nil;
    do return true end;
  end;
end
__haxe_ds_IntMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end
__haxe_ds_IntMap.prototype.iterator = function(self) 
  local _gthis = self;
  local it = self:keys();
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return it:hasNext() end;
  end,next=function(self) 
    do return _gthis.h[it:next()] end;
  end}) end
end
__haxe_ds_IntMap.prototype.toString = function(self) 
  local s_b = ({});
  _G.table.insert(s_b, "{");
  local it = self:keys();
  while (it:hasNext()) do 
    local i = it:next();
    local str = Std.string(i);
    _G.table.insert(s_b, str);
    _G.table.insert(s_b, " => ");
    local ret = self.h[i];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local str = Std.string(ret);
    _G.table.insert(s_b, str);
    if (it:hasNext()) then 
      _G.table.insert(s_b, ", ");
    end;
  end;
  _G.table.insert(s_b, "}");
  do return _G.table.concat(s_b) end
end

__haxe_ds_IntMap.prototype.__class__ =  __haxe_ds_IntMap

__haxe_ds__List_ListNode.new = function(item,next) 
  local self = _hx_new(__haxe_ds__List_ListNode.prototype)
  __haxe_ds__List_ListNode.super(self,item,next)
  return self
end
__haxe_ds__List_ListNode.super = function(self,item,next) 
  self.item = item;
  self.next = next;
end
_hxClasses["haxe.ds._List.ListNode"] = __haxe_ds__List_ListNode
__haxe_ds__List_ListNode.__name__ = "haxe.ds._List.ListNode"
__haxe_ds__List_ListNode.prototype = _hx_e();
__haxe_ds__List_ListNode.prototype.item= nil;
__haxe_ds__List_ListNode.prototype.next= nil;

__haxe_ds__List_ListNode.prototype.__class__ =  __haxe_ds__List_ListNode

__haxe_ds__List_ListIterator.new = function(head) 
  local self = _hx_new(__haxe_ds__List_ListIterator.prototype)
  __haxe_ds__List_ListIterator.super(self,head)
  return self
end
__haxe_ds__List_ListIterator.super = function(self,head) 
  self.head = head;
end
_hxClasses["haxe.ds._List.ListIterator"] = __haxe_ds__List_ListIterator
__haxe_ds__List_ListIterator.__name__ = "haxe.ds._List.ListIterator"
__haxe_ds__List_ListIterator.prototype = _hx_e();
__haxe_ds__List_ListIterator.prototype.head= nil;
__haxe_ds__List_ListIterator.prototype.hasNext = function(self) 
  do return self.head ~= nil end
end
__haxe_ds__List_ListIterator.prototype.next = function(self) 
  local val = self.head.item;
  self.head = self.head.next;
  do return val end
end

__haxe_ds__List_ListIterator.prototype.__class__ =  __haxe_ds__List_ListIterator
_hxClasses["haxe.ds.Option"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Some","None"},2)}
__haxe_ds_Option = _hxClasses["haxe.ds.Option"];
__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
_hxClasses["haxe.ds.StringMap"] = __haxe_ds_StringMap
__haxe_ds_StringMap.__name__ = "haxe.ds.StringMap"
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = _hx_funcToField(replacer);
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
_hxClasses["haxe.format.JsonPrinter"] = __haxe_format_JsonPrinter
__haxe_format_JsonPrinter.__name__ = "haxe.format.JsonPrinter"
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_e();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self:replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "null");
    _this.length = _this.length + #"null";
  elseif (tmp) == 1 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 2 then 
    local v = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 3 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"<fun>\"");
    _this.length = _this.length + #"\"<fun>\"";
  elseif (tmp) == 6 then 
    local _g = _g[2];
    if (_g == String) then 
      self:quote(v);
    else
      if (_g == Array) then 
        local v = v;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(91));
        _this.length = _this.length + 1;
        local len = v.length;
        local last = len - 1;
        local _g = 0;
        while (_g < len) do 
          _g = _g + 1;
          local i = _g - 1;
          if (i > 0) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(44));
            _this.length = _this.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(10));
            _this.length = _this.length + 1;
          end;
          if (self.pretty) then 
            local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this = self.buf;
            local str = Std.string(v);
            _G.table.insert(_this.b, str);
            _this.length = _this.length + #str;
          end;
          self:write(i, v[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this = self.buf;
              _G.table.insert(_this.b, _G.string.char(10));
              _this.length = _this.length + 1;
            end;
            if (self.pretty) then 
              local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this = self.buf;
              local str = Std.string(v);
              _G.table.insert(_this.b, str);
              _this.length = _this.length + #str;
            end;
          end;
        end;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(93));
        _this.length = _this.length + 1;
      else
        if (_g == __haxe_ds_StringMap) then 
          local v = v;
          local o = _hx_e();
          local k = v:keys();
          while (k:hasNext()) do 
            local k = k:next();
            local ret = v.h[k];
            if (ret == __haxe_ds_StringMap.tnull) then 
              ret = nil;
            end;
            o[k] = ret;
          end;
          local v = o;
          self:fieldsString(v, Reflect.fields(v));
        else
          if (_g == Date) then 
            local v = v;
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local i = v[1];
    local _this = self.buf;
    local str = Std.string(i);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 8 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"???\"");
    _this.length = _this.length + #"\"???\""; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  _this.length = _this.length + 1;
  local len = fields.length;
  local last = len - 1;
  local first = true;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < len) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (first) then 
      self.nind = self.nind + 1;
      first = false;
    else
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(44));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      _this.length = _this.length + #str;
    end;
    self:quote(f);
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(58));
    _this.length = _this.length + 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(32));
      _this.length = _this.length + 1;
    end;
    self:write(f, value);
    if (i == last) then 
      self.nind = self.nind - 1;
      if (self.pretty) then 
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(10));
        _this.length = _this.length + 1;
      end;
      if (self.pretty) then 
        local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
        local _this = self.buf;
        local str = Std.string(v);
        _G.table.insert(_this.b, str);
        _this.length = _this.length + #str;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(125));
  _this.length = _this.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
  local i = 0;
  local length = #s;
  while (i < length) do 
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    if (c) == 8 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\b");
      _this.length = _this.length + #"\\b";
    elseif (c) == 9 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\t");
      _this.length = _this.length + #"\\t";
    elseif (c) == 10 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\n");
      _this.length = _this.length + #"\\n";
    elseif (c) == 12 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\f");
      _this.length = _this.length + #"\\f";
    elseif (c) == 13 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\r");
      _this.length = _this.length + #"\\r";
    elseif (c) == 34 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\"");
      _this.length = _this.length + #"\\\"";
    elseif (c) == 92 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\\");
      _this.length = _this.length + #"\\\\";else
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(c));
    _this.length = _this.length + 1; end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
_hxClasses["haxe.io.Bytes"] = __haxe_io_Bytes
__haxe_io_Bytes.__name__ = "haxe.io.Bytes"
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    _g:push(_G.string.byte(s, i + 1));
  end;
  do return __haxe_io_Bytes.new(_g.length, _g) end;
end
__haxe_io_Bytes.prototype = _hx_e();
__haxe_io_Bytes.prototype.length= nil;
__haxe_io_Bytes.prototype.b= nil;
__haxe_io_Bytes.prototype.getString = function(self,pos,len,encoding) 
  local tmp = encoding == nil;
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  if ((self.b.length - pos) <= __lua_Boot.MAXSTACKSIZE) then 
    local _end = Math.min(self.b.length, pos + len) - 1;
    do return _G.string.char(_hx_table.unpack(self.b, pos, _end)) end;
  else
    local tbl = ({});
    local _g = pos;
    local _g1 = pos + len;
    while (_g < _g1) do 
      _g = _g + 1;
      local idx = _g - 1;
      _G.table.insert(tbl, _G.string.char(self.b[idx]));
    end;
    do return _G.table.concat(tbl, "") end;
  end;
end
__haxe_io_Bytes.prototype.toString = function(self) 
  do return self:getString(0, self.length) end
end

__haxe_io_Bytes.prototype.__class__ =  __haxe_io_Bytes

__haxe_io_BytesBuffer.new = function() 
  local self = _hx_new(__haxe_io_BytesBuffer.prototype)
  __haxe_io_BytesBuffer.super(self)
  return self
end
__haxe_io_BytesBuffer.super = function(self) 
  self.b = Array.new();
end
_hxClasses["haxe.io.BytesBuffer"] = __haxe_io_BytesBuffer
__haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer"
__haxe_io_BytesBuffer.prototype = _hx_e();
__haxe_io_BytesBuffer.prototype.b= nil;
__haxe_io_BytesBuffer.prototype.addInt32 = function(self,v) 
  self.b:push(_hx_bit.band(v,255));
  self.b:push(_hx_bit.band(_hx_bit.arshift(v,8),255));
  self.b:push(_hx_bit.band(_hx_bit.arshift(v,16),255));
  self.b:push(_hx_bit.rshift(v,24));
end
__haxe_io_BytesBuffer.prototype.getBytes = function(self) 
  local bytes = __haxe_io_Bytes.new(self.b.length, self.b);
  self.b = nil;
  do return bytes end
end

__haxe_io_BytesBuffer.prototype.__class__ =  __haxe_io_BytesBuffer
_hxClasses["haxe.io.Encoding"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UTF8","RawNative"},2)}
__haxe_io_Encoding = _hxClasses["haxe.io.Encoding"];
__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)

_hxClasses["haxe.io.Error"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Blocked","Overflow","OutsideBounds","Custom"},4)}
__haxe_io_Error = _hxClasses["haxe.io.Error"];
__haxe_io_Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=__haxe_io_Error}, 3); return _x; end 

__haxe_io_FPHelper.new = {}
_hxClasses["haxe.io.FPHelper"] = __haxe_io_FPHelper
__haxe_io_FPHelper.__name__ = "haxe.io.FPHelper"
__haxe_io_FPHelper.floatToI32 = function(f) 
  if (f == 0) then 
    do return 0 end;
  else
    local af = (function() 
      local _hx_1
      if (f < 0) then 
      _hx_1 = -f; else 
      _hx_1 = f; end
      return _hx_1
    end )();
    local exp = _G.math.floor(_G.math.log(af) / 0.6931471805599453);
    if (exp > 127) then 
      do return 2139095040 end;
    else
      if (exp <= -127) then 
        exp = -127;
        af = af * 7.1362384635298e+44;
      else
        af = ((af / _G.math.pow(2, exp)) - 1.0) * 8388608;
      end;
      do return _hx_bit.bor(_hx_bit.bor(((function() 
        local _hx_2
        if (f < 0) then 
        _hx_2 = -2147483648; else 
        _hx_2 = 0; end
        return _hx_2
      end )()),_hx_bit.lshift(exp + 127,23)),_G.math.floor(af + 0.5)) end;
    end;
  end;
end

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
_hxClasses["haxe.iterators.ArrayIterator"] = __haxe_iterators_ArrayIterator
__haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator"
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.array= nil;
__haxe_iterators_ArrayIterator.prototype.current= nil;
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
_hxClasses["haxe.iterators.ArrayKeyValueIterator"] = __haxe_iterators_ArrayKeyValueIterator
__haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator"
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.array= nil;

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator
_hxClasses["hxbit.PropTypeDesc"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="PInt","PFloat","PBool","PString","PBytes","PSerializable","PEnum","PMap","PArray","PObj","PAlias","PVector","PNull","PUnknown","PDynamic","PInt64","PFlags","PStruct"},18)}
__hxbit_PropTypeDesc = _hxClasses["hxbit.PropTypeDesc"];
__hxbit_PropTypeDesc.PInt = _hx_tab_array({[0]="PInt",0,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PFloat = _hx_tab_array({[0]="PFloat",1,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PBool = _hx_tab_array({[0]="PBool",2,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PString = _hx_tab_array({[0]="PString",3,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PBytes = _hx_tab_array({[0]="PBytes",4,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PSerializable = function(name) local _x = _hx_tab_array({[0]="PSerializable",5,name,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PEnum = function(name) local _x = _hx_tab_array({[0]="PEnum",6,name,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PMap = function(k,v) local _x = _hx_tab_array({[0]="PMap",7,k,v,__enum__=__hxbit_PropTypeDesc}, 4); return _x; end 
__hxbit_PropTypeDesc.PArray = function(k) local _x = _hx_tab_array({[0]="PArray",8,k,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PObj = function(fields) local _x = _hx_tab_array({[0]="PObj",9,fields,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PAlias = function(k) local _x = _hx_tab_array({[0]="PAlias",10,k,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PVector = function(k) local _x = _hx_tab_array({[0]="PVector",11,k,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PNull = function(t) local _x = _hx_tab_array({[0]="PNull",12,t,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PUnknown = _hx_tab_array({[0]="PUnknown",13,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PDynamic = _hx_tab_array({[0]="PDynamic",14,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PInt64 = _hx_tab_array({[0]="PInt64",15,__enum__ = __hxbit_PropTypeDesc},2)

__hxbit_PropTypeDesc.PFlags = function(t) local _x = _hx_tab_array({[0]="PFlags",16,t,__enum__=__hxbit_PropTypeDesc}, 3); return _x; end 
__hxbit_PropTypeDesc.PStruct = _hx_tab_array({[0]="PStruct",17,__enum__ = __hxbit_PropTypeDesc},2)


__hxbit_Schema.new = function() 
  local self = _hx_new(__hxbit_Schema.prototype)
  __hxbit_Schema.super(self)
  return self
end
__hxbit_Schema.super = function(self) 
  self.__uid = _hx_bit.bor(_hx_bit.lshift(__hxbit_Serializer.SEQ,24),(function() 
  local _hx_obj = __hxbit_Serializer;
  local _hx_fld = 'UID';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
  self.fieldsNames = _hx_tab_array({}, 0);
  self.fieldsTypes = _hx_tab_array({}, 0);
end
_hxClasses["hxbit.Schema"] = __hxbit_Schema
__hxbit_Schema.__name__ = "hxbit.Schema"
__hxbit_Schema.__interfaces__ = {__hxbit_Serializable}
__hxbit_Schema.prototype = _hx_e();
__hxbit_Schema.prototype.isFinal= nil;
__hxbit_Schema.prototype.fieldsNames= nil;
__hxbit_Schema.prototype.fieldsTypes= nil;
__hxbit_Schema.prototype.__uid= nil;
__hxbit_Schema.prototype.getCLID = function(self) 
  do return __hxbit_Schema.__clid end
end
__hxbit_Schema.prototype.serialize = function(self,__ctx) 
  __ctx.out.b:push((function() 
    local _hx_1
    if (self.isFinal) then 
    _hx_1 = 1; else 
    _hx_1 = 0; end
    return _hx_1
  end )());
  local a = self.fieldsNames;
  if (a == nil) then 
    __ctx.out.b:push(0);
  else
    local v = a.length + 1;
    if ((v >= 0) and (v < 128)) then 
      __ctx.out.b:push(v);
    else
      __ctx.out.b:push(128);
      __ctx.out:addInt32(v);
    end;
    local _g = 0;
    while (_g < a.length) do 
      local v = a[_g];
      _g = _g + 1;
      if (v == nil) then 
        __ctx.out.b:push(0);
      else
        local b = __haxe_io_Bytes.ofString(v);
        local v = b.length + 1;
        if ((v >= 0) and (v < 128)) then 
          __ctx.out.b:push(v);
        else
          __ctx.out.b:push(128);
          __ctx.out:addInt32(v);
        end;
        local _this = __ctx.out;
        local b2 = b.b;
        local _g = 0;
        local _g1 = b.length;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          _this.b:push(b2[i]);
        end;
      end;
    end;
  end;
  local a = self.fieldsTypes;
  if (a == nil) then 
    __ctx.out.b:push(0);
  else
    local v = a.length + 1;
    if ((v >= 0) and (v < 128)) then 
      __ctx.out.b:push(v);
    else
      __ctx.out.b:push(128);
      __ctx.out:addInt32(v);
    end;
    local _g = 0;
    while (_g < a.length) do 
      local v = a[_g];
      _g = _g + 1;
      __hxbit_enumSer_Hxbit_PropTypeDesc.doSerialize(__ctx, v);
    end;
  end;
end

__hxbit_Schema.prototype.__class__ =  __hxbit_Schema

__hxbit_StructSerializable.new = {}
_hxClasses["hxbit.StructSerializable"] = __hxbit_StructSerializable
__hxbit_StructSerializable.__name__ = "hxbit.StructSerializable"

__hxbit_enumSer_Hxbit_PropTypeDesc.new = {}
_hxClasses["hxbit.enumSer.Hxbit_PropTypeDesc"] = __hxbit_enumSer_Hxbit_PropTypeDesc
__hxbit_enumSer_Hxbit_PropTypeDesc.__name__ = "hxbit.enumSer.Hxbit_PropTypeDesc"
__hxbit_enumSer_Hxbit_PropTypeDesc.doSerialize = function(ctx,v) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    local _gctx = ctx;
    if (v == nil) then 
      _gctx.out.b:push(0);
    else
      local tmp = v[1];
      if (tmp) == 0 then 
        _gctx.out.b:push(1);
      elseif (tmp) == 1 then 
        _gctx.out.b:push(2);
      elseif (tmp) == 2 then 
        _gctx.out.b:push(3);
      elseif (tmp) == 3 then 
        _gctx.out.b:push(4);
      elseif (tmp) == 4 then 
        _gctx.out.b:push(5);
      elseif (tmp) == 5 then 
        local _g = v[2];
        _gctx.out.b:push(6);
        if (_g == nil) then 
          _gctx.out.b:push(0);
        else
          local b = __haxe_io_Bytes.ofString(_g);
          local v = b.length + 1;
          if ((v >= 0) and (v < 128)) then 
            _gctx.out.b:push(v);
          else
            _gctx.out.b:push(128);
            _gctx.out:addInt32(v);
          end;
          local _this = _gctx.out;
          local b2 = b.b;
          local _g = 0;
          local _g1 = b.length;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            _this.b:push(b2[i]);
          end;
        end;
      elseif (tmp) == 6 then 
        local _g = v[2];
        _gctx.out.b:push(7);
        if (_g == nil) then 
          _gctx.out.b:push(0);
        else
          local b = __haxe_io_Bytes.ofString(_g);
          local v = b.length + 1;
          if ((v >= 0) and (v < 128)) then 
            _gctx.out.b:push(v);
          else
            _gctx.out.b:push(128);
            _gctx.out:addInt32(v);
          end;
          local _this = _gctx.out;
          local b2 = b.b;
          local _g = 0;
          local _g1 = b.length;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            _this.b:push(b2[i]);
          end;
        end;
      elseif (tmp) == 7 then 
        _gctx.out.b:push(8);
        __hxbit_enumSer_Hxbit_PropTypeDesc.doSerialize(_gctx, v[2]);
        ctx = _gctx;
        v = v[3];
        break;
      elseif (tmp) == 8 then 
        _gctx.out.b:push(9);
        ctx = _gctx;
        v = v[2];
        break;
      elseif (tmp) == 9 then 
        local _g = v[2];
        _gctx.out.b:push(10);
        if (_g == nil) then 
          _gctx.out.b:push(0);
        else
          local v = _g.length + 1;
          if ((v >= 0) and (v < 128)) then 
            _gctx.out.b:push(v);
          else
            _gctx.out.b:push(128);
            _gctx.out:addInt32(v);
          end;
          local _g1 = 0;
          while (_g1 < _g.length) do 
            local v = _g[_g1];
            _g1 = _g1 + 1;
            if (v == nil) then 
              _gctx.out.b:push(0);
            else
              local fbits = 0;
              if (v.name ~= nil) then 
                fbits = 1;
              end;
              if (v.type ~= nil) then 
                fbits = _hx_bit.bor(fbits,2);
              end;
              local v1 = fbits + 1;
              if ((v1 >= 0) and (v1 < 128)) then 
                _gctx.out.b:push(v1);
              else
                _gctx.out.b:push(128);
                _gctx.out:addInt32(v1);
              end;
              if ((_hx_bit.band(fbits,1)) ~= 0) then 
                local s = v.name;
                if (s == nil) then 
                  _gctx.out.b:push(0);
                else
                  local b = __haxe_io_Bytes.ofString(s);
                  local v = b.length + 1;
                  if ((v >= 0) and (v < 128)) then 
                    _gctx.out.b:push(v);
                  else
                    _gctx.out.b:push(128);
                    _gctx.out:addInt32(v);
                  end;
                  local _this = _gctx.out;
                  local b2 = b.b;
                  local _g = 0;
                  local _g1 = b.length;
                  while (_g < _g1) do 
                    _g = _g + 1;
                    local i = _g - 1;
                    _this.b:push(b2[i]);
                  end;
                end;
              end;
              _gctx.out.b:push((function() 
                local _hx_1
                if (v.opt) then 
                _hx_1 = 1; else 
                _hx_1 = 0; end
                return _hx_1
              end )());
              if ((_hx_bit.band(fbits,2)) ~= 0) then 
                __hxbit_enumSer_Hxbit_PropTypeDesc.doSerialize(_gctx, v.type);
              end;
            end;
          end;
        end;
      elseif (tmp) == 10 then 
        _gctx.out.b:push(11);
        ctx = _gctx;
        v = v[2];
        break;
      elseif (tmp) == 11 then 
        _gctx.out.b:push(12);
        ctx = _gctx;
        v = v[2];
        break;
      elseif (tmp) == 12 then 
        _gctx.out.b:push(13);
        ctx = _gctx;
        v = v[2];
        break;
      elseif (tmp) == 13 then 
        _gctx.out.b:push(14);
      elseif (tmp) == 14 then 
        _gctx.out.b:push(15);
      elseif (tmp) == 15 then 
        _gctx.out.b:push(16);
      elseif (tmp) == 16 then 
        _gctx.out.b:push(17);
        ctx = _gctx;
        v = v[2];
        break;
      elseif (tmp) == 17 then 
        _gctx.out.b:push(18); end;
    end;
    do return end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end

__lua_Boot.new = {}
_hxClasses["lua.Boot"] = __lua_Boot
__lua_Boot.__name__ = "lua.Boot"
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

__lua_UserData.new = {}
_hxClasses["lua.UserData"] = __lua_UserData
__lua_UserData.__name__ = "lua.UserData"

__lua_Thread.new = {}
_hxClasses["lua.Thread"] = __lua_Thread
__lua_Thread.__name__ = "lua.Thread"

__tink_core__Callback_Callback_Impl_.new = {}
_hxClasses["tink.core._Callback.Callback_Impl_"] = __tink_core__Callback_Callback_Impl_
__tink_core__Callback_Callback_Impl_.__name__ = "tink.core._Callback.Callback_Impl_"
__tink_core__Callback_Callback_Impl_.defer = function(f) 
  __haxe_Timer.delay(f, 0);
end

__tink_core_LinkObject.new = {}
_hxClasses["tink.core.LinkObject"] = __tink_core_LinkObject
__tink_core_LinkObject.__name__ = "tink.core.LinkObject"

__tink_core__Callback_ListCell.new = function(cb,list) 
  local self = _hx_new(__tink_core__Callback_ListCell.prototype)
  __tink_core__Callback_ListCell.super(self,cb,list)
  return self
end
__tink_core__Callback_ListCell.super = function(self,cb,list) 
  if (cb == nil) then 
    _G.error(__haxe_Exception.thrown("callback expected but null received"),0);
  end;
  self.cb = _hx_funcToField(cb);
  self.list = list;
end
_hxClasses["tink.core._Callback.ListCell"] = __tink_core__Callback_ListCell
__tink_core__Callback_ListCell.__name__ = "tink.core._Callback.ListCell"
__tink_core__Callback_ListCell.__interfaces__ = {__tink_core_LinkObject}
__tink_core__Callback_ListCell.prototype = _hx_e();
__tink_core__Callback_ListCell.prototype.cb= nil;
__tink_core__Callback_ListCell.prototype.list= nil;

__tink_core__Callback_ListCell.prototype.__class__ =  __tink_core__Callback_ListCell

__tink_core_SimpleDisposable.new = function(dispose) 
  local self = _hx_new(__tink_core_SimpleDisposable.prototype)
  __tink_core_SimpleDisposable.super(self,dispose)
  return self
end
__tink_core_SimpleDisposable.super = function(self,dispose) 
  self.disposeHandlers = _hx_tab_array({}, 0);
  self.f = _hx_funcToField(dispose);
end
_hxClasses["tink.core.SimpleDisposable"] = __tink_core_SimpleDisposable
__tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable"
__tink_core_SimpleDisposable.__interfaces__ = {__tink_core_OwnedDisposable}
__tink_core_SimpleDisposable.noop = function() 
end
__tink_core_SimpleDisposable.prototype = _hx_e();
__tink_core_SimpleDisposable.prototype.f= nil;
__tink_core_SimpleDisposable.prototype.disposeHandlers= nil;
__tink_core_SimpleDisposable.prototype.dispose = function(self) 
  local _g = self.disposeHandlers;
  if (_g ~= nil) then 
    self.disposeHandlers = nil;
    local f = self.f;
    self.f = _hx_funcToField(__tink_core_SimpleDisposable.noop);
    f();
    local _g1 = 0;
    while (_g1 < _g.length) do 
      local h = _g[_g1];
      _g1 = _g1 + 1;
      h();
    end;
  end;
end

__tink_core_SimpleDisposable.prototype.__class__ =  __tink_core_SimpleDisposable

__tink_core_CallbackList.new = function(destructive) 
  local self = _hx_new(__tink_core_CallbackList.prototype)
  __tink_core_CallbackList.super(self,destructive)
  return self
end
__tink_core_CallbackList.super = function(self,destructive) 
  if (destructive == nil) then 
    destructive = false;
  end;
  self.onfill = function(self) 
   end;
  self.ondrain = function(self) 
   end;
  self.busy = false;
  self.queue = _hx_tab_array({}, 0);
  self.used = 0;
  local _gthis = self;
  __tink_core_SimpleDisposable.super(self,function() 
    if (not _gthis.busy) then 
      _gthis:destroy();
    end;
  end);
  self.destructive = destructive;
  self.cells = _hx_tab_array({}, 0);
end
_hxClasses["tink.core.CallbackList"] = __tink_core_CallbackList
__tink_core_CallbackList.__name__ = "tink.core.CallbackList"
__tink_core_CallbackList.prototype = _hx_e();
__tink_core_CallbackList.prototype.destructive= nil;
__tink_core_CallbackList.prototype.cells= nil;
__tink_core_CallbackList.prototype.used= nil;
__tink_core_CallbackList.prototype.queue= nil;
__tink_core_CallbackList.prototype.busy= nil;
__tink_core_CallbackList.prototype.ondrain= nil;
__tink_core_CallbackList.prototype.onfill= nil;
__tink_core_CallbackList.prototype.destroy = function(self) 
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local c = _g1[_g];
    _g = _g + 1;
    c.cb = nil;
    c.list = nil;
  end;
  self.queue = nil;
  self.cells = nil;
  if (self.used > 0) then 
    self.used = 0;
    local fn = self.ondrain;
    if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
      fn();
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
    else
      __tink_core__Callback_Callback_Impl_.defer(fn);
    end;
  end;
end
__tink_core_CallbackList.prototype.invoke = function(self,data) 
  local _gthis = self;
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    if (_gthis.disposeHandlers ~= nil) then 
      if (_gthis.busy) then 
        if (_gthis.destructive ~= true) then 
          local _g = _hx_bind(_gthis,_gthis.invoke);
          local data = data;
          local tmp = function() 
            _g(data);
          end;
          _gthis.queue:push(tmp);
        end;
      else
        _gthis.busy = true;
        if (_gthis.destructive) then 
          _gthis:dispose();
        end;
        local length = _gthis.cells.length;
        local _g = 0;
        while (_g < length) do 
          _g = _g + 1;
          local i = _g - 1;
          local _this = _gthis.cells[i];
          if (_this.list ~= nil) then 
            _this:cb(data);
          end;
        end;
        _gthis.busy = false;
        if (_gthis.disposeHandlers == nil) then 
          _gthis:destroy();
        else
          if (_gthis.used < _gthis.cells.length) then 
            _gthis:compact();
          end;
          if (_gthis.queue.length > 0) then 
            (_gthis.queue:shift())();
          end;
        end;
      end;
    end;
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    __tink_core__Callback_Callback_Impl_.defer(function() 
      if (_gthis.disposeHandlers ~= nil) then 
        if (_gthis.busy) then 
          if (_gthis.destructive ~= true) then 
            local _g = _hx_bind(_gthis,_gthis.invoke);
            local data = data;
            local tmp = function() 
              _g(data);
            end;
            _gthis.queue:push(tmp);
          end;
        else
          _gthis.busy = true;
          if (_gthis.destructive) then 
            _gthis:dispose();
          end;
          local length = _gthis.cells.length;
          local _g = 0;
          while (_g < length) do 
            _g = _g + 1;
            local i = _g - 1;
            local _this = _gthis.cells[i];
            if (_this.list ~= nil) then 
              _this:cb(data);
            end;
          end;
          _gthis.busy = false;
          if (_gthis.disposeHandlers == nil) then 
            _gthis:destroy();
          else
            if (_gthis.used < _gthis.cells.length) then 
              _gthis:compact();
            end;
            if (_gthis.queue.length > 0) then 
              (_gthis.queue:shift())();
            end;
          end;
        end;
      end;
    end);
  end;
end
__tink_core_CallbackList.prototype.compact = function(self) 
  if (self.busy) then 
    do return end;
  else
    if (self.used == 0) then 
      self:resize(0);
      local fn = self.ondrain;
      if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
        fn();
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
      else
        __tink_core__Callback_Callback_Impl_.defer(fn);
      end;
    else
      local compacted = 0;
      local _g = 0;
      local _g1 = self.cells.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        local _g = self.cells[i];
        if (_g.cb ~= nil) then 
          if (compacted ~= i) then 
            self.cells[compacted] = _g;
          end;
          compacted = compacted + 1;
          if (compacted == self.used) then 
            break;
          end;
        end;
      end;
      self:resize(self.used);
    end;
  end;
end
__tink_core_CallbackList.prototype.resize = function(self,length) 
  self.cells:resize(length);
end
__tink_core_CallbackList.prototype.clear = function(self) 
  if (self.busy) then 
    self.queue:push(_hx_bind(self,self.clear));
  end;
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local cell = _g1[_g];
    _g = _g + 1;
    cell.cb = nil;
    cell.list = nil;
  end;
  self:resize(0);
end

__tink_core_CallbackList.prototype.__class__ =  __tink_core_CallbackList
__tink_core_CallbackList.__super__ = __tink_core_SimpleDisposable
setmetatable(__tink_core_CallbackList.prototype,{__index=__tink_core_SimpleDisposable.prototype})
-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
else
  _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end;
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end;
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end;

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  String.__name__ = "String";
  _hxClasses.Array = Array;
  Array.__name__ = "Array";
  __deceptinfect_ecswip_ComponentManager.initComponent(23, "FormComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(34, "GEntityComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(33, "PlayerComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(31, "VirtualPosition");
  __deceptinfect_ecswip_ComponentManager.initComponent(25, "AliveComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(17, "BatteryAccepter");
  __deceptinfect_ecswip_ComponentManager.initComponent(0, "BatterySource");
  __deceptinfect_ecswip_ComponentManager.initComponent(14, "CleanupEnt");
  __deceptinfect_ecswip_ComponentManager.initComponent(29, "EvacZone");
  __deceptinfect_ecswip_ComponentManager.initComponent(27, "FlareComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(38, "InEvacZone");
  __deceptinfect_ecswip_ComponentManager.initComponent(32, "ItemOwner");
  __deceptinfect_ecswip_ComponentManager.initComponent(40, "KeepRestart");
  __deceptinfect_ecswip_ComponentManager.initComponent(28, "NestComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(4, "RagInfo");
  __deceptinfect_ecswip_ComponentManager.initComponent(26, "Ragdoll");
  __deceptinfect_ecswip_ComponentManager.initComponent(39, "Spawned");
  __deceptinfect_ecswip_ComponentManager.initComponent(5, "StatInfo");
  __deceptinfect_ecswip_ComponentManager.initComponent(41, "Statue");
  __deceptinfect_ecswip_ComponentManager.initComponent(3, "InfVunerability");
  __deceptinfect_ecswip_ComponentManager.initComponent(30, "InfectedComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(24, "InfectionComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(6, "InfectionLookInfo");
  __deceptinfect_ecswip_ComponentManager.initComponent(20, "RateComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(13, "DamagePenaltyHidden");
  __deceptinfect_ecswip_ComponentManager.initComponent(9, "GrabAccepter");
  __deceptinfect_ecswip_ComponentManager.initComponent(1, "GrabDraw");
  __deceptinfect_ecswip_ComponentManager.initComponent(12, "GrabProducer");
  __deceptinfect_ecswip_ComponentManager.initComponent(2, "GrabbableProp");
  __deceptinfect_ecswip_ComponentManager.initComponent(8, "HiddenHealthComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(7, "SpectateComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(37, "ScannerComponent");
  __deceptinfect_ecswip_ComponentManager.initComponent(11, "ContaminationAccepter");
  __deceptinfect_ecswip_ComponentManager.initComponent(21, "ContaminationProducer");
  __deceptinfect_ecswip_ComponentManager.initComponent(22, "RadSource");
  __deceptinfect_ecswip_ComponentManager.initComponent(15, "RadVictim");
  __deceptinfect_ecswip_ComponentManager.initComponent(10, "RadiationAccepter");
  __deceptinfect_ecswip_ComponentManager.initComponent(19, "RadiationProducer");
  __deceptinfect_ecswip_ComponentManager.initComponent(35, "S_Break");
  __deceptinfect_ecswip_ComponentManager.initComponent(36, "S_Explode");
  __deceptinfect_ecswip_ComponentManager.initComponent(16, "Contaminated");
  __deceptinfect_ecswip_ComponentManager.initComponent(18, "Walkthroughable");__deceptinfect_Darken.materialsSet = _hx_tab_array({}, 0);
  
  __deceptinfect_Darken.replaced = false;
  
  __deceptinfect_GameManager.state = __deceptinfect_GAME_STATE.WAIT;
  
  __deceptinfect_GameManager.lastTick = 0.0;
  
  __deceptinfect_GameManager.stateTrig = __tink_core_SignalTrigger.new();
  
  __deceptinfect_GameManager.net_gamestate = NETMESSAGE_gamestate.new();
  
  __deceptinfect_GameManager.net_cleanup = NETMESSAGE_di_cleanup.new();
  
  __deceptinfect_GameValues.MIN_PLAYERS = 3;
  
  __deceptinfect_GameValues.INF_INIT_MIN = 1.5;
  
  __deceptinfect_GameValues.INF_INIT_MAX = 7.5;
  
  __deceptinfect_GameValues.CONTAMINATE_WARNING_TIME = 4;
  
  __deceptinfect_GameValues.RADIATION_WARNING_TIME = 1.5;
  
  __deceptinfect_GameValues.MAX_INF_RATE = 12;
  
  __deceptinfect_GameValues.GAME_TIMER = 540;
  
  __deceptinfect_GameValues.GAME_TIMER_VARIANCE = 45;
  
  __deceptinfect_GameValues.EVAC_ARRIVAL = 25;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW = 0.75;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE = 1.6;
  
  __deceptinfect_GameValues.LOW_HEALTH_SLOW_START = 0.4;
  
  __deceptinfect_GameValues.LOW_HEALTH_RATE_START = 0.25;
  
  __deceptinfect_GameValues.AVERAGE_RATE_SAMPLES = 15;
  
  __deceptinfect_GameValues.AVERAGE_RATE_TIME = 3;
  
  __deceptinfect_GameValues.MIN_BATTERY_TIME = 45;
  
  __deceptinfect_GameValues.MAX_BATTERY_TIME = 90;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_MODE = 0;
  
  __deceptinfect_GameValues.MULTIPLE_SOURCES_DIMINISH_PERCENT = 0.75;
  
  __deceptinfect_GameValues.MAX_IDENT_DIST = 1000;
  
  __deceptinfect_GameValues.BATTERIES_SPAWNED = 2;
  
  __deceptinfect_GameValues.EVAC_INFECTION_RATE = 0.5;
  
  __deceptinfect_GameValues.BEGIN_EVAC_INF = 0.65;
  
  __deceptinfect_GameValues.BATTERIES_REQUIRED = 4;
  
  __deceptinfect_GameValues.GRAB_TIME = 6;
  
  __deceptinfect_GameValues.SETUP_TIME = 10;
  
  __deceptinfect_MapStorage.spawns = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    local this1 = _G.Vector(-20.135118, 293.638184, 62.682350);
    local this2 = _G.Vector(214.035873, 252.134552, 46.033661);
    local this3 = _G.Vector(45.967289, -942.858459, 64.031250);
    local this4 = _G.Vector(-4.848439, -1728.742920, 64.031250);
    local this5 = _G.Vector(-481.968323, -1022.401917, 64.031250);
    local this6 = _G.Vector(571.895020, -1031.322632, 64.031250);
    local this7 = _G.Vector(10.328067, -1039.059570, 64.031250);
    local this8 = _G.Vector(-64.220894, -989.030090, 60.787186);
    local this9 = _G.Vector(111.524712, -1094.413208, 110.729080);
    local this10 = _G.Vector(29.061092, 1006.951233, 93.697433);
    local value = _hx_o({__fields__={items=true,objectives=true,evacs=true,nests=true},items=_hx_tab_array({[0]=this1, this2}, 2),objectives=_hx_tab_array({[0]=this3, this4, this5, this6, this7}, 5),evacs=_hx_tab_array({[0]=_hx_o({__fields__={mins=true,maxs=true},mins=this8,maxs=this9})}, 1),nests=_hx_tab_array({[0]=this10}, 1)});
    if (value == nil) then 
      _g.h.mor_temple_v1 = __haxe_ds_StringMap.tnull;
    else
      _g.h.mor_temple_v1 = value;
    end;
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  __deceptinfect_Misc.roundModels = _hx_tab_array({[0]="models/player/mossman.mdl", "models/player/alyx.mdl", "models/player/barney.mdl", "models/player/breen.mdl", "models/player/Eli.mdl", "models/player/gman_high.mdl", "models/player/kleiner.mdl", "models/player/monk.mdl", "models/player/odessa.mdl", "models/player/Group03/Female_01.mdl", "models/player/Group03/Female_02.mdl", "models/player/Group03/Female_03.mdl", "models/player/Group03/Female_04.mdl", "models/player/Group03/Female_06.mdl", "models/player/Group03/Male_01.mdl", "models/player/Group03/Male_02.mdl", "models/player/Group03/Male_03.mdl", "models/player/Group03/Male_04.mdl", "models/player/Group03/Male_05.mdl", "models/player/Group03/Male_06.mdl", "models/player/Group03/Male_07.mdl", "models/player/Group03/Male_08.mdl", "models/player/Group03/Male_09.mdl"}, 23);
  
  __deceptinfect_Misc.roundWeapons = _hx_tab_array({[0]="weapon_mor_ump"}, 1);
  
  __deceptinfect_Misc.startingWeapons = _hx_tab_array({[0]="weapon_mor_p229"}, 1);
  
  __deceptinfect_Misc.infModel = "models/player/zombie_classic.mdl";
  
  __deceptinfect_Misc.deathSounds = (function() 
    local _hx_2
    
    local _g = __haxe_ds_EnumValueMap.new();
    
    _g:set(__deceptinfect_ModelType.ZOMBIE, _hx_tab_array({[0]="npc/zombie/zombie_die1.wav"}, 1));
    
    _g:set(__deceptinfect_ModelType.HUMAN_MALE, _hx_tab_array({[0]="vo/npc/barney/ba_pain06.wav", "vo/npc/male01/pain09.wav"}, 2));
    
    _hx_2 = _g;
    return _hx_2
  end )();
  
  __deceptinfect_PlayerManager.indexLookup = __haxe_ds_IntMap.new();
  
  __deceptinfect_Profiler.inital = _hx_tab_array({}, 0);
  
  __deceptinfect_Profiler.vinal = _hx_tab_array({}, 0);
  
  __deceptinfect_Profiler.pass = 0;
  
  __deceptinfect_Profiler.lastname = "";
  
  __deceptinfect_Profiler.profileState = __deceptinfect_ProfilingState.NOT_PROFILING;
  
  __deceptinfect_Profiler.cumulativeTime = 0.0;
  
  __deceptinfect_Profiler.totalProfileTime = 0.0;
  
  __deceptinfect_Profiler.totalPasses = 500;
  
  __hxbit_Serializer.UID = 0;
  
  __hxbit_Serializer.SEQ = 0;
  
  __hxbit_Serializer.CLASSES = _hx_tab_array({}, 0);
  
  __deceptinfect_NetSpread.__clid = __hxbit_Serializer.registerClass(__deceptinfect_NetSpread);
  
  __deceptinfect_Spread.netSpread = NETMESSAGE_haxe1.new();
  
  __deceptinfect_Spread.nextGas = .0;
  
  __deceptinfect_Spread.particleTable = _hx_tab_array({[0]=_hx_o({__fields__={particle=true,sizeStart=true,sizeEnd=true,airRecis=true,startAlpha=true,endAlpha=true,randXY=true,randZMin=true,randZMax=true,color=true,rotRate=true,lifeTimeMin=true,lifeTimeMax=true},particle="particle/smokesprites_0001",sizeStart=200,sizeEnd=200,airRecis=90,startAlpha=255,endAlpha=100,randXY=10,randZMin=10,randZMax=50,color=_G.Color(0, 0, 0),rotRate=0.9,lifeTimeMin=2,lifeTimeMax=3})}, 1);
  
  __deceptinfect_Spread.clendpoints = _hx_tab_array({}, 0);
  
  __deceptinfect_Spread.markedMap = __haxe_ds_IntMap.new();
  
  __deceptinfect_Spread.marked = _hx_tab_array({}, 0);
  
  __deceptinfect_Spread.endpoints = _hx_tab_array({}, 0);
  
  __deceptinfect_Spread.mapSize = .0;
  
  __deceptinfect_TestObject.__clid = __hxbit_Serializer.registerClass(__deceptinfect_TestObject);
  
  __deceptinfect_ecswip_ComponentManager.entities = 0;
  
  __deceptinfect_ecswip_ComponentManager.activeEntities = 0;
  
  __deceptinfect_ecswip_ComponentManager.lookupEntity = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_abilities_FormComponent.compID = 23;
  
  __deceptinfect_client_GeigerSystem.net_geiger = NETMESSAGE_geiger.new();
  
  __deceptinfect_ecswip_GEntityComponent.compID = 34;
  
  __deceptinfect_ecswip_GrabSystem.net_grabupdate = NETMESSAGE_grabupdate.new();
  
  __deceptinfect_ecswip_GrabSystem.net_grabend = NETMESSAGE_grabend.new();
  
  __deceptinfect_ecswip_GrabSystem.grabindex = 0;
  
  __deceptinfect_ecswip_PlayerComponent.compID = 33;
  
  __deceptinfect_ecswip_SignalStorage.entDamageTrigger = __tink_core_SignalTrigger.new();
  
  __deceptinfect_infection_systems_InfectionSystem.net_inf = NETMESSAGE_di_infection.new();
  
  __deceptinfect_infection_systems_InfectionSystem.net_infected = NETMESSAGE_di_infected.new();
  
  __deceptinfect_infection_systems_InfectionSystem.averageInfection = 0.0;
  
  __deceptinfect_infection_systems_InfectionSystem.infectionReport = 0.0;
  
  __deceptinfect_infection_systems_RateSystem.nextAddRate = 0;
  
  __deceptinfect_radiation_RadiationSystem.radRateID = __deceptinfect_infection_systems_RateSystem.getAddRateTicket();
  
  __deceptinfect_game_SpawnSystem.obj = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.item = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.nest = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_SpawnSystem.evac = __deceptinfect_game_SpawnPointTable.new();
  
  __deceptinfect_game_EvacSystem.evac_state = NETMESSAGE_di_evac.new();
  
  __deceptinfect_game_RagdollSystem.statueinfo = NETMESSAGE_di_statinfo.new();
  
  __deceptinfect_infection_systems_InfectionLookSystem.infectioninfo = NETMESSAGE_di_infinfo.new();
  
  __deceptinfect_ecswip_SystemManager.getSystems = __haxe_ds_ObjectMap.new();
  
  __deceptinfect_ecswip_SystemManager.runSystems = _hx_tab_array({[0]=__deceptinfect_infection_systems_InfectionSystem, __deceptinfect_client_GeigerSystem, __deceptinfect_radiation_RadiationSystem, __deceptinfect_ecswip_GrabSystem, __deceptinfect_ecswip_HiddenHealthSystem, __deceptinfect_game_WinSystem, __deceptinfect_game_BatterySystem, __deceptinfect_game_SpawnSystem, __deceptinfect_statuses_WalkthroughSystem, __deceptinfect_game_NestSystem, __deceptinfect_game_EvacSystem, __deceptinfect_game_RagdollSystem, __deceptinfect_game_SlowMotionSystem, __deceptinfect_infection_systems_InfectionLookSystem, __deceptinfect_radiation_ContaminationSystem, __deceptinfect_radiation_RadSourceSystem, __deceptinfect_game_LowHealthSystem, __deceptinfect_items_ScannerSystem, __deceptinfect_WeaponSystem, __deceptinfect_game_ItemOwnerSystem, __deceptinfect_ecswip_DummySystem}, 21);
  
  __deceptinfect_ecswip_VirtualPosition.compID = 31;
  
  __deceptinfect_ents_Di_puddle.material = _G.Material("nature/water_coast01");
  
  __deceptinfect_ents_Di_spitball.model = _G.Model("models/crossbow_bolt.mdl");
  
  __deceptinfect_game_Net_RemoveClientEnt.__clid = __hxbit_Serializer.registerClass(__deceptinfect_game_Net_RemoveClientEnt);
  
  __deceptinfect_game_ClientTranslateSystem.net_removeClientEnt = NETMESSAGE_di_removeclientent.new();
  
  __deceptinfect_game_ClientTranslateSystem.net_removeClientEnt2 = NETMESSAGE_haxe0.new();
  
  __deceptinfect_game_SpawnSystemNav.areasCovered = __haxe_ds_IntMap.new();
  
  __deceptinfect_game_SpawnSystemNav.distanceMin = __deceptinfect__DistSquared_DistSquared_Impl_.convert(500);
  
  __deceptinfect_game_SpawnSystemNav.result = _hx_tab_array({}, 0);
  
  __deceptinfect_game_components_AliveComponent.compID = 25;
  
  __deceptinfect_game_components_BatteryAccepter.compID = 17;
  
  __deceptinfect_game_components_BatterySource.compID = 0;
  
  __deceptinfect_game_components_CleanupEnt.compID = 14;
  
  __deceptinfect_game_components_EvacZone.compID = 29;
  
  __deceptinfect_game_components_FlareComponent.compID = 27;
  
  __deceptinfect_game_components_InEvacZone.compID = 38;
  
  __deceptinfect_game_components_ItemOwner.stageProgression = __deceptinfect_game_components_Stage.STAGE(0, __deceptinfect__DistSquared_DistSquared_Impl_.convert(50), __deceptinfect_game_components_Stage.STAGE(30, __deceptinfect__DistSquared_DistSquared_Impl_.convert(300), __deceptinfect_game_components_Stage.STAGE(60, __deceptinfect__DistSquared_DistSquared_Impl_.convert(500), __deceptinfect_game_components_Stage.FINAL(240, __deceptinfect__DistSquared_DistSquared_Impl_.convert(1100)))));
  
  __deceptinfect_game_components_ItemOwner.compID = 32;
  
  __deceptinfect_game_components_KeepRestart.compID = 40;
  
  __deceptinfect_game_components_NestComponent.compID = 28;
  
  __deceptinfect_game_components_RagInfo.compID = 4;
  
  __deceptinfect_game_components_Ragdoll.compID = 26;
  
  __deceptinfect_game_components_Spawned.compID = 39;
  
  __deceptinfect_game_components_StatInfo.compID = 5;
  
  __deceptinfect_game_components_Statue.compID = 41;
  
  __deceptinfect_infection_InfVunerability.compID = 3;
  
  __deceptinfect_infection_InfectedComponent.compID = 30;
  
  __deceptinfect_infection_InfectionComponent.compID = 24;
  
  __deceptinfect_infection_InfectionLookInfo.compID = 6;
  
  __deceptinfect_infection_RateComponent.compID = 20;
  
  __deceptinfect_infection_components_DamagePenaltyHidden.compID = 13;
  
  __deceptinfect_infection_components_GrabAccepter.compID = 9;
  
  __deceptinfect_infection_components_GrabDraw.compID = 1;
  
  __deceptinfect_infection_components_GrabProducer.compID = 12;
  
  __deceptinfect_infection_components_GrabbableProp.compID = 2;
  
  __deceptinfect_infection_components_HiddenHealthComponent.compID = 8;
  
  __deceptinfect_infection_components_SpectateComponent.compID = 7;
  
  __deceptinfect_items_ScannerComponent.compID = 37;
  
  __deceptinfect_radiation_ContaminationAccepter.compID = 11;
  
  __deceptinfect_radiation_ContaminationProducer.compID = 21;
  
  __deceptinfect_radiation_RadSource.compID = 22;
  
  __deceptinfect_radiation_RadVictim.compID = 15;
  
  __deceptinfect_radiation_RadiationAccepter.compID = 10;
  
  __deceptinfect_radiation_RadiationProducer.compID = 19;
  
  __deceptinfect_radiation_RadiationTypes.types = (function() 
    local _hx_3
    
    local _g = __haxe_ds_IntMap.new();
    
    local value = _hx_o({__fields__={type=true,lifetime=true,options=true},type=1,lifetime=__deceptinfect_radiation_RadLifetime.INFINITE,options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=6,radius=500}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=20,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.TYPE(0)}))});
    if (value == nil) then 
      _g.h[1] = __haxe_ds_IntMap.tnull;
    else
      _g.h[1] = value;
    end;
    
    local value = _hx_o({__fields__={type=true,lifetime=true,options=true},type=0,lifetime=__deceptinfect_radiation_RadLifetime.FINITE(10),options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=4,radius=300}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=20,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.MY_TYPE}))});
    if (value == nil) then 
      _g.h[0] = __haxe_ds_IntMap.tnull;
    else
      _g.h[0] = value;
    end;
    
    local value = _hx_o({__fields__={type=true,lifetime=true,options=true},type=3,lifetime=__deceptinfect_radiation_RadLifetime.INFINITE,options=__deceptinfect_radiation_RadSourceOp.BOTH(_hx_o({__fields__={maxrate=true,radius=true},maxrate=5,radius=500}), _hx_o({__fields__={chance=true,dist=true,check=true,type=true,nextoptions=true},chance=0.4,dist=40,check=0.8,type=__deceptinfect_radiation_ContaminationType.SAME_SOURCE,nextoptions=__deceptinfect_radiation_NextOptions.OVERRIDE_LIFETIME(__deceptinfect_radiation_RadLifetime.FINITE(10))}))});
    if (value == nil) then 
      _g.h[3] = __haxe_ds_IntMap.tnull;
    else
      _g.h[3] = value;
    end;
    
    _hx_3 = _g;
    return _hx_3
  end )();
  
  __deceptinfect_sabotage_S_Break.compID = 35;
  
  __deceptinfect_sabotage_S_Explode.compID = 36;
  
  __deceptinfect_statuses_Contaminated.compID = 16;
  
  __deceptinfect_statuses_Walkthroughable.compID = 18;
  
  __deceptinfect_util_Util.mappy_2 = __haxe_ds_IntMap.new();
  
  __gmod_helpers_macros_include_Build.buildIdent = "Delta Lima";
  _hx_exports["buildIdent"] = __gmod_helpers_macros_include_Build.buildIdent;
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_IntMap.tnull = ({});
  
  __haxe_ds_StringMap.tnull = ({});
  
  __hxbit_Schema.__clid = __hxbit_Serializer.registerClass(__hxbit_Schema);
  
  __lua_Boot.MAXSTACKSIZE = 1000;
  
  __tink_core__Callback_Callback_Impl_.depth = 0;
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_G.math.randomseed(_G.os.time());

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
_G.xpcall(function() 
  Main.main();
  __haxe_EntryPoint.run();
end, _hx_error)
return _hx_exports
